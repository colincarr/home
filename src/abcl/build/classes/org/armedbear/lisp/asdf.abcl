"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Users/cpc26/src/abcl/src/org/armedbear/lisp/asdf.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-284051 #:ENVIRONMENT-284052 #:WHOLE-284067 #:ENVIRONMENT-284068 #:WHOLE-286751 #:ENVIRONMENT-286752 #:WHOLE-373667 #:ENVIRONMENT-373668 #:WHOLE-373806 #:ENVIRONMENT-373807 #:COMPATFMT #:LOOP* #:FROB-SUBSTRINGS #:COMPATFMT #:LOOP* #:FROB-SUBSTRINGS #:COMPATFMT #:UIOP-DEBUG #:LOAD-UIOP-DEBUG-UTILITY #:*UIOP-DEBUG-UTILITY* #:WITH-UPGRADABILITY #:UNDEFINE-FUNCTION #:UNDEFINE-FUNCTIONS #:DEFUN* #:DEFGENERIC* #:NEST #:IF-LET #:WHILE-COLLECTING #:APPENDF #:LENGTH=N-P #:ENSURE-LIST #:REMOVE-PLIST-KEYS #:REMOVE-PLIST-KEY #:EMPTYP #:+NON-BASE-CHARS-EXIST-P+ #:+MAX-CHARACTER-TYPE-INDEX+ #:CHARACTER-TYPE-INDEX #:+CHARACTER-TYPES+ #:BASE-STRING-P #:STRINGS-COMMON-ELEMENT-TYPE #:REDUCE/STRCAT #:STRCAT #:FIRST-CHAR #:LAST-CHAR #:SPLIT-STRING #:STRIPLN #:+CR+ #:+LF+ #:+CRLF+ #:STRING-PREFIX-P #:STRING-ENCLOSED-P #:STRING-SUFFIX-P #:COERCE-CLASS #:STAMP< #:STAMPS< #:STAMP*< #:STAMP<= #:EARLIER-STAMP #:STAMPS-EARLIEST #:EARLIEST-STAMP #:LATER-STAMP #:STAMPS-LATEST #:LATEST-STAMP #:LATEST-STAMP-F #:LIST-TO-HASH-SET #:ENSURE-GETHASH #:ENSURE-FUNCTION #:ACCESS-AT #:ACCESS-AT-COUNT #:CALL-FUNCTION #:CALL-FUNCTIONS #:REGISTER-HOOK-FUNCTION #:MATCH-CONDITION-P #:MATCH-ANY-CONDITION-P #:CALL-WITH-MUFFLED-CONDITIONS #:WITH-MUFFLED-CONDITIONS #:LEXICOGRAPHIC< #:LEXICOGRAPHIC<= #:PARSE-VERSION #:UNPARSE-VERSION #:VERSION< #:VERSION<= #:VERSION-COMPATIBLE-P #:WHOLE-408140 #:ENVIRONMENT-408141 #:WHOLE-408188 #:ENVIRONMENT-408189 #:WHOLE-408236 #:ENVIRONMENT-408237 #:WHOLE-408299 #:ENVIRONMENT-408300 #:G408343 #:WHOLE-408436 #:ENVIRONMENT-408437 #:WHOLE-408463 #:ENVIRONMENT-408464 #:WHOLE-408521 #:ENVIRONMENT-408522 #:WHOLE-408640 #:ENVIRONMENT-408641 #:G408639 #:G408638 #:WHOLE-409492 #:ENVIRONMENT-409493 #:G409491 #:G409490 #:G410181 #:G410185 #:WHOLE-410346 #:ENVIRONMENT-410347 #:FEATUREP #:OS-UNIX-P #:OS-MACOSX-P #:OS-WINDOWS-P #:OS-GENERA-P #:DETECT-OS #:GETENV #:GETENVP #:IMPLEMENTATION-IDENTIFIER #:IMPLEMENTATION-TYPE #:*IMPLEMENTATION-TYPE* #:OPERATING-SYSTEM #:ARCHITECTURE #:LISP-VERSION-STRING #:HOSTNAME #:GETCWD #:CHDIR #:READ-NULL-TERMINATED-STRING #:READ-LITTLE-ENDIAN #:PARSE-FILE-LOCATION-INFO #:PARSE-WINDOWS-SHORTCUT #:G445424 #:NORMALIZE-PATHNAME-DIRECTORY-COMPONENT #:DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT #:MERGE-PATHNAME-DIRECTORY-COMPONENTS #:*UNSPECIFIC-PATHNAME-TYPE* #:MAKE-PATHNAME* #:MAKE-PATHNAME-COMPONENT-LOGICAL #:MAKE-PATHNAME-LOGICAL #:MERGE-PATHNAMES* #:NIL-PATHNAME #:*NIL-PATHNAME* #:WITH-PATHNAME-DEFAULTS #:PATHNAME-EQUAL #:LOGICAL-PATHNAME-P #:PHYSICAL-PATHNAME-P #:PHYSICALIZE-PATHNAME #:ABSOLUTE-PATHNAME-P #:RELATIVE-PATHNAME-P #:HIDDEN-PATHNAME-P #:FILE-PATHNAME-P #:PATHNAME-DIRECTORY-PATHNAME #:PATHNAME-PARENT-DIRECTORY-PATHNAME #:DIRECTORY-PATHNAME-P #:ENSURE-DIRECTORY-PATHNAME #:COMPONENT-NAME-TO-PATHNAME-COMPONENTS #:SPLIT-NAME-TYPE #:PARSE-UNIX-NAMESTRING #:UNIX-NAMESTRING #:SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS #:SUBPATHNAME #:SUBPATHNAME* #:ENSURE-ABSOLUTE-PATHNAME #:PATHNAME-ROOT #:PATHNAME-HOST-PATHNAME #:SUBPATHP #:ENOUGH-PATHNAME #:WITH-ENOUGH-PATHNAME #:CALL-WITH-ENOUGH-PATHNAME #:ENSURE-PATHNAME #:*WILD* #:*WILD-FILE* #:*WILD-DIRECTORY* #:*WILD-INFERIORS* #:*WILD-PATH* #:WILDEN #:RELATIVIZE-DIRECTORY-COMPONENT #:RELATIVIZE-PATHNAME-DIRECTORY #:DIRECTORY-SEPARATOR-FOR-HOST #:DIRECTORIZE-PATHNAME-HOST-DEVICE #:TRANSLATE-PATHNAME* #:*OUTPUT-TRANSLATION-FUNCTION* #:WHOLE-482082 #:ENVIRONMENT-482083 #:WHOLE-483141 #:ENVIRONMENT-483142 #:NATIVE-NAMESTRING #:PARSE-NATIVE-NAMESTRING #:TRUENAME* #:SAFE-FILE-WRITE-DATE #:PROBE-FILE* #:DIRECTORY-EXISTS-P #:FILE-EXISTS-P #:DIRECTORY* #:FILTER-LOGICAL-DIRECTORY-RESULTS #:DIRECTORY-FILES #:SUBDIRECTORIES #:COLLECT-SUB*DIRECTORIES #:TRUENAMIZE #:RESOLVE-SYMLINKS #:*RESOLVE-SYMLINKS* #:RESOLVE-SYMLINKS* #:GET-PATHNAME-DEFAULTS #:CALL-WITH-CURRENT-DIRECTORY #:WITH-CURRENT-DIRECTORY #:INTER-DIRECTORY-SEPARATOR #:SPLIT-NATIVE-PATHNAMES-STRING #:GETENV-PATHNAME #:GETENV-PATHNAMES #:GETENV-ABSOLUTE-DIRECTORY #:GETENV-ABSOLUTE-DIRECTORIES #:LISP-IMPLEMENTATION-DIRECTORY #:LISP-IMPLEMENTATION-PATHNAME-P #:ENSURE-ALL-DIRECTORIES-EXIST #:RENAME-FILE-OVERWRITING-TARGET #:DELETE-FILE-IF-EXISTS #:DELETE-EMPTY-DIRECTORY #:DELETE-DIRECTORY-TREE #:G520481 #:G520537 #:G520599 #:G520602 #:G520780 #:G520860 #:G521075 #:G521079 #:WHOLE-521535 #:ENVIRONMENT-521536 #:G521847 #:*DEFAULT-STREAM-ELEMENT-TYPE* #:*STDIN* #:SETUP-STDIN #:*STDOUT* #:SETUP-STDOUT #:*STDERR* #:SETUP-STDERR #:DETECT-ENCODING #:*ENCODING-DETECTION-HOOK* #:ALWAYS-DEFAULT-ENCODING #:ENCODING-EXTERNAL-FORMAT #:*ENCODING-EXTERNAL-FORMAT-HOOK* #:DEFAULT-ENCODING-EXTERNAL-FORMAT #:*DEFAULT-ENCODING* #:*UTF-8-EXTERNAL-FORMAT* #:WITH-SAFE-IO-SYNTAX #:CALL-WITH-SAFE-IO-SYNTAX #:SAFE-READ-FROM-STRING #:WITH-OUTPUT #:OUTPUT-STRING #:WITH-INPUT #:WITH-INPUT-FILE #:CALL-WITH-INPUT-FILE #:WITH-OUTPUT-FILE #:CALL-WITH-OUTPUT-FILE #:NULL-DEVICE-PATHNAME #:CALL-WITH-NULL-INPUT #:WITH-NULL-INPUT #:CALL-WITH-NULL-OUTPUT #:WITH-NULL-OUTPUT #:FINISH-OUTPUTS #:FORMAT! #:SAFE-FORMAT! #:COPY-STREAM-TO-STREAM #:CONCATENATE-FILES #:COPY-FILE #:SLURP-STREAM-STRING #:SLURP-STREAM-LINES #:SLURP-STREAM-LINE #:SLURP-STREAM-FORMS #:SLURP-STREAM-FORM #:READ-FILE-STRING #:READ-FILE-LINE #:READ-FILE-LINES #:SAFE-READ-FILE-LINE #:READ-FILE-FORMS #:READ-FILE-FORM #:SAFE-READ-FILE-FORM #:EVAL-INPUT #:EVAL-THUNK #:STANDARD-EVAL-THUNK #:PRINTLN #:WRITELN #:*TEMPORARY-DIRECTORY* #:TEMPORARY-DIRECTORY #:DEFAULT-TEMPORARY-DIRECTORY #:SETUP-TEMPORARY-DIRECTORY #:CALL-WITH-TEMPORARY-FILE #:WITH-TEMPORARY-FILE #:ADD-PATHNAME-SUFFIX #:TMPIZE-PATHNAME #:CALL-WITH-STAGING-PATHNAME #:WITH-STAGING-PATHNAME #:WHOLE-561478 #:ENVIRONMENT-561479 #:WHOLE-561659 #:ENVIRONMENT-561660 #:WHOLE-561778 #:ENVIRONMENT-561779 #:WHOLE-561902 #:ENVIRONMENT-561903 #:WHOLE-562005 #:ENVIRONMENT-562006 #:WHOLE-562099 #:ENVIRONMENT-562100 #:WHOLE-562181 #:ENVIRONMENT-562182 #:G562239 #:G562332 #:EOF #:EOF #:G563319 #:G563323 #:WHOLE-563545 #:ENVIRONMENT-563546 #:WHOLE-563816 #:ENVIRONMENT-563817 #:*IMAGE-DUMPED-P* #:RAW-COMMAND-LINE-ARGUMENTS #:*COMMAND-LINE-ARGUMENTS* #:COMMAND-LINE-ARGUMENTS #:RAW-COMMAND-LINE-ARGUMENTS #:SETUP-COMMAND-LINE-ARGUMENTS #:ARGV0 #:*LISP-INTERACTION* #:*FATAL-CONDITIONS* #:FATAL-CONDITION-P #:HANDLE-FATAL-CONDITION #:CALL-WITH-FATAL-CONDITION-HANDLER #:WITH-FATAL-CONDITION-HANDLER #:*IMAGE-RESTORE-HOOK* #:*IMAGE-PRELUDE* #:*IMAGE-ENTRY-POINT* #:*IMAGE-POSTLUDE* #:*IMAGE-DUMP-HOOK* #:QUIT #:DIE #:RAW-PRINT-BACKTRACE #:PRINT-BACKTRACE #:PRINT-CONDITION-BACKTRACE #:SHELL-BOOLEAN-EXIT #:REGISTER-IMAGE-RESTORE-HOOK #:REGISTER-IMAGE-DUMP-HOOK #:CALL-IMAGE-RESTORE-HOOK #:CALL-IMAGE-DUMP-HOOK #:RESTORE-IMAGE #:DUMP-IMAGE #:CREATE-IMAGE #:G602790 #:G602911 #:WHOLE-603076 #:ENVIRONMENT-603077 #:EASY-SH-CHARACTER-P #:ESCAPE-SH-TOKEN #:ESCAPE-SH-COMMAND #:ESCAPE-WINDOWS-TOKEN #:ESCAPE-WINDOWS-COMMAND #:ESCAPE-TOKEN #:ESCAPE-COMMAND #:SLURP-INPUT-STREAM #:VOMIT-OUTPUT-STREAM #:RUN-PROGRAM #:SUBPROCESS-ERROR #:SUBPROCESS-ERROR-CODE #:SUBPROCESS-ERROR-COMMAND #:SUBPROCESS-ERROR-PROCESS #:WHOLE-644767 #:ENVIRONMENT-644768 #:WHOLE-644795 #:ENVIRONMENT-644796 #:WHOLE-644869 #:ENVIRONMENT-644870 #:WHOLE-644943 #:ENVIRONMENT-644944 #:G645065 #:G645072 #:*COMPILE-FILE-WARNINGS-BEHAVIOUR* #:*COMPILE-FILE-FAILURE-BEHAVIOUR* #:*OUTPUT-TRANSLATION-FUNCTION* #:*OPTIMIZATION-SETTINGS* #:*PREVIOUS-OPTIMIZATION-SETTINGS* #:*BASE-BUILD-DIRECTORY* #:COMPILE-CONDITION #:COMPILE-FILE-ERROR #:COMPILE-WARNED-ERROR #:COMPILE-FAILED-ERROR #:COMPILE-WARNED-WARNING #:COMPILE-FAILED-WARNING #:CHECK-LISP-COMPILE-RESULTS #:CHECK-LISP-COMPILE-WARNINGS #:*UNINTERESTING-CONDITIONS* #:*USUAL-UNINTERESTING-CONDITIONS* #:*UNINTERESTING-COMPILER-CONDITIONS* #:*UNINTERESTING-LOADER-CONDITIONS* #:GET-OPTIMIZATION-SETTINGS #:PROCLAIM-OPTIMIZATION-SETTINGS #:CALL-WITH-MUFFLED-COMPILER-CONDITIONS #:WITH-MUFFLED-COMPILER-CONDITIONS #:CALL-WITH-MUFFLED-LOADER-CONDITIONS #:WITH-MUFFLED-LOADER-CONDITIONS #:REIFY-SIMPLE-SEXP #:UNREIFY-SIMPLE-SEXP #:REIFY-DEFERRED-WARNINGS #:UNREIFY-DEFERRED-WARNINGS #:RESET-DEFERRED-WARNINGS #:SAVE-DEFERRED-WARNINGS #:CHECK-DEFERRED-WARNINGS #:WITH-SAVED-DEFERRED-WARNINGS #:WARNINGS-FILE-P #:WARNINGS-FILE-TYPE #:*WARNINGS-FILE-TYPE* #:ENABLE-DEFERRED-WARNINGS-CHECK #:DISABLE-DEFERRED-WARNINGS-CHECK #:CURRENT-LISP-FILE-PATHNAME #:LOAD-PATHNAME #:LISPIZE-PATHNAME #:COMPILE-FILE-TYPE #:CALL-AROUND-HOOK #:COMPILE-FILE* #:COMPILE-FILE-PATHNAME* #:*COMPILE-CHECK* #:LOAD* #:LOAD-FROM-STRING #:COMBINE-FASLS #:DEFAULTS #:FAILURE-P #:WARNINGS-P #:S #:Y #:BODY #:FINALIZERS-OFF-WARNING #:WHOLE-687494 #:ENVIRONMENT-687495 #:WHOLE-687548 #:ENVIRONMENT-687549 #:G688251 #:WHOLE-688403 #:ENVIRONMENT-688404 #:GET-FOLDER-PATH #:USER-CONFIGURATION-DIRECTORIES #:SYSTEM-CONFIGURATION-DIRECTORIES #:IN-FIRST-DIRECTORY #:IN-USER-CONFIGURATION-DIRECTORY #:IN-SYSTEM-CONFIGURATION-DIRECTORY #:VALIDATE-CONFIGURATION-FORM #:VALIDATE-CONFIGURATION-FILE #:VALIDATE-CONFIGURATION-DIRECTORY #:CONFIGURATION-INHERITANCE-DIRECTIVE-P #:REPORT-INVALID-FORM #:INVALID-CONFIGURATION #:*IGNORED-CONFIGURATION-FORM* #:*USER-CACHE* #:*CLEAR-CONFIGURATION-HOOK* #:CLEAR-CONFIGURATION #:REGISTER-CLEAR-CONFIGURATION-HOOK #:RESOLVE-LOCATION #:LOCATION-DESIGNATOR-P #:LOCATION-FUNCTION-P #:*HERE-DIRECTORY* #:RESOLVE-RELATIVE-LOCATION #:RESOLVE-ABSOLUTE-LOCATION #:UPGRADE-CONFIGURATION #:G730447 #:COERCE-PATHNAME #:COMPONENT-NAME-TO-PATHNAME-COMPONENTS #:INTERN* #:FIND-SYMBOL* #:ASDF-VERSION #:*PREVIOUS-ASDF-VERSIONS* #:*ASDF-VERSION* #:ASDF-MESSAGE #:*VERBOSE-OUT* #:UPGRADING-P #:WHEN-UPGRADING #:UPGRADE-ASDF #:ASDF-UPGRADE-ERROR #:DEFPARAMETER* #:*POST-UPGRADE-CLEANUP-HOOK* #:*POST-UPGRADE-RESTART-HOOK* #:CLEANUP-UPGRADED-ASDF #:INTERN* #:WHOLE-866795 #:ENVIRONMENT-866796 #:WHOLE-866898 #:ENVIRONMENT-866899 #:COMPONENT-RELATIVE-PATHNAME #:COMPONENT-PARENT-PATHNAME #:SOURCE-FILE-TYPE #:FIND-SYSTEM #:SYSTEM-SOURCE-FILE #:SYSTEM-RELATIVE-PATHNAME #:FIND-COMPONENT #:EXPLAIN #:PERFORM #:PERFORM-WITH-RESTARTS #:INPUT-FILES #:OUTPUT-FILES #:COMPONENT-DEPENDS-ON #:OPERATION-DONE-P #:COMPONENT-DEPENDS-ON #:TRAVERSE #:MAP-DIRECT-DEPENDENCIES #:REDUCE-DIRECT-DEPENDENCIES #:DIRECT-DEPENDENCIES #:OPERATE #:PARSE-COMPONENT-FORM #:APPLY-OUTPUT-TRANSLATIONS #:PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE #:INHERIT-SOURCE-REGISTRY #:PROCESS-SOURCE-REGISTRY #:PROCESS-SOURCE-REGISTRY-DIRECTIVE #:TRIVIAL-SYSTEM-P #:COMPILE-CONCATENATED-SOURCE-OP #:OPERATION #:COMPONENT #:COMPONENT-FIND-PATH #:COMPONENT-NAME #:COMPONENT-PATHNAME #:COMPONENT-RELATIVE-PATHNAME #:COMPONENT-PARENT #:COMPONENT-SYSTEM #:COMPONENT-PARENT-PATHNAME #:CHILD-COMPONENT #:PARENT-COMPONENT #:MODULE #:FILE-COMPONENT #:SOURCE-FILE #:C-SOURCE-FILE #:JAVA-SOURCE-FILE #:STATIC-FILE #:DOC-FILE #:HTML-FILE #:FILE-TYPE #:SOURCE-FILE-TYPE #:SOURCE-FILE-EXPLICIT-TYPE #:COMPONENT-IN-ORDER-TO #:COMPONENT-SIDEWAY-DEPENDENCIES #:COMPONENT-IF-FEATURE #:AROUND-COMPILE-HOOK #:COMPONENT-DESCRIPTION #:COMPONENT-LONG-DESCRIPTION #:COMPONENT-VERSION #:VERSION-SATISFIES #:COMPONENT-INLINE-METHODS #:COMPONENT-OPERATION-TIMES #:COMPONENT-EXTERNAL-FORMAT #:COMPONENT-ENCODING #:COMPONENT-CHILDREN-BY-NAME #:COMPONENT-CHILDREN #:COMPUTE-CHILDREN-BY-NAME #:COMPONENT-BUILD-OPERATION #:MODULE-DEFAULT-COMPONENT-CLASS #:MODULE-COMPONENTS #:SUB-COMPONENTS #:SYSTEM-DEFINITION-ERROR #:DUPLICATE-NAMES #:NAME #:VERSION #:DESCRIPTION #:LONG-DESCRIPTION #:AUTHOR #:MAINTAINER #:LICENCE #:COMPONENTS-BY-NAME #:COMPONENTS #:CHILDREN #:CHILDREN-BY-NAME #:DEFAULT-COMPONENT-CLASS #:SOURCE-FILE #:DEFSYSTEM-DEPENDS-ON #:SIDEWAY-DEPENDENCIES #:IF-FEATURE #:IN-ORDER-TO #:INLINE-METHODS #:RELATIVE-PATHNAME #:ABSOLUTE-PATHNAME #:OPERATION-TIMES #:AROUND-COMPILE #:%ENCODING #:PROPERTIES #:COMPONENT-PROPERTIES #:PARENT #:SYSTEM #:PROTO-SYSTEM #:SYSTEM-SOURCE-FILE #:SYSTEM-SOURCE-DIRECTORY #:SYSTEM-RELATIVE-PATHNAME #:RESET-SYSTEM #:SYSTEM-DESCRIPTION #:SYSTEM-LONG-DESCRIPTION #:SYSTEM-AUTHOR #:SYSTEM-MAINTAINER #:SYSTEM-LICENCE #:SYSTEM-LICENSE #:SYSTEM-DEFSYSTEM-DEPENDS-ON #:SYSTEM-DEPENDS-ON #:SYSTEM-WEAKLY-DEPENDS-ON #:COMPONENT-BUILD-PATHNAME #:BUILD-PATHNAME #:COMPONENT-ENTRY-POINT #:ENTRY-POINT #:HOMEPAGE #:SYSTEM-HOMEPAGE #:BUG-TRACKER #:SYSTEM-BUG-TRACKER #:MAILTO #:SYSTEM-MAILTO #:LONG-NAME #:SYSTEM-LONG-NAME #:SOURCE-CONTROL #:SYSTEM-SOURCE-CONTROL #:FIND-SYSTEM #:BUILTIN-SYSTEM-P #:GET-FILE-STAMP #:COMPUTE-FILE-STAMP #:REGISTER-FILE-STAMP #:SET-ASDF-CACHE-ENTRY #:UNSET-ASDF-CACHE-ENTRY #:CONSULT-ASDF-CACHE #:DO-ASDF-CACHE #:NORMALIZE-NAMESTRING #:CALL-WITH-ASDF-CACHE #:WITH-ASDF-CACHE #:*ASDF-CACHE* #:WHOLE-1005522 #:ENVIRONMENT-1005523 #:WHOLE-1005578 #:ENVIRONMENT-1005579 #:REMOVE-ENTRY-FROM-REGISTRY #:COERCE-ENTRY-TO-DIRECTORY #:COERCE-NAME #:PRIMARY-SYSTEM-NAME #:COERCE-FILENAME #:FIND-SYSTEM #:LOCATE-SYSTEM #:LOAD-ASD #:SYSTEM-REGISTERED-P #:REGISTER-SYSTEM #:REGISTERED-SYSTEMS #:CLEAR-SYSTEM #:MAP-SYSTEMS #:MISSING-COMPONENT #:MISSING-REQUIRES #:MISSING-PARENT #:FORMATTED-SYSTEM-DEFINITION-ERROR #:FORMAT-CONTROL #:FORMAT-ARGUMENTS #:SYSDEF-ERROR #:LOAD-SYSTEM-DEFINITION-ERROR #:ERROR-NAME #:ERROR-PATHNAME #:ERROR-CONDITION #:*SYSTEM-DEFINITION-SEARCH-FUNCTIONS* #:SEARCH-FOR-SYSTEM-DEFINITION #:*CENTRAL-REGISTRY* #:PROBE-ASD #:SYSDEF-CENTRAL-REGISTRY-SEARCH #:FIND-SYSTEM-IF-BEING-DEFINED #:CONTRIB-SYSDEF-SEARCH #:SYSDEF-FIND-ASDF #:SYSDEF-PRELOADED-SYSTEM-SEARCH #:REGISTER-PRELOADED-SYSTEM #:*PRELOADED-SYSTEMS* #:CLEAR-DEFINED-SYSTEM #:CLEAR-DEFINED-SYSTEMS #:*DEFINED-SYSTEMS* #:*IMMUTABLE-SYSTEMS* #:INITIALIZE-SOURCE-REGISTRY #:SYSDEF-SOURCE-REGISTRY-SEARCH #:G1053987 #:G1054373 #:G1054374 #:G1055093 #:FIND-COMPONENT #:RESOLVE-DEPENDENCY-NAME #:RESOLVE-DEPENDENCY-SPEC #:RESOLVE-DEPENDENCY-COMBINATION #:MISSING-COMPONENT #:MISSING-COMPONENT-OF-VERSION #:RETRY #:MISSING-DEPENDENCY #:MISSING-DEPENDENCY-OF-VERSION #:MISSING-REQUIRES #:MISSING-PARENT #:MISSING-REQUIRED-BY #:MISSING-VERSION #:G1103547 #:OPERATION #:OPERATION-ORIGINAL-INITARGS #:ORIGINAL-INITARGS #:*OPERATIONS* #:MAKE-OPERATION #:FIND-OPERATION #:FEATURE #:G1148112 #:G1148242 #:ASDF/CACHE #:ACTION #:DEFINE-CONVENIENCE-ACTION-METHODS #:EXPLAIN #:ACTION-DESCRIPTION #:DOWNWARD-OPERATION #:UPWARD-OPERATION #:SIDEWAY-OPERATION #:SELFWARD-OPERATION #:NON-PROPAGATING-OPERATION #:COMPONENT-DEPENDS-ON #:INPUT-FILES #:OUTPUT-FILES #:OUTPUT-FILE #:OPERATION-DONE-P #:ACTION-STATUS #:ACTION-STAMP #:ACTION-DONE-P #:COMPONENT-OPERATION-TIME #:MARK-OPERATION-DONE #:COMPUTE-ACTION-STAMP #:PERFORM #:PERFORM-WITH-RESTARTS #:RETRY #:ACCEPT #:TRAVERSE-ACTIONS #:TRAVERSE-SUB-ACTIONS #:REQUIRED-COMPONENTS #:ACTION-PATH #:FIND-ACTION #:STAMP #:DONE-P #:OPERATION-DEFINITION-WARNING #:OPERATION-DEFINITION-ERROR #:WHOLE-1197918 #:ENVIRONMENT-1197919 #:G1200836 #:G1200837 #:TRY-RECOMPILING #:CL-SOURCE-FILE #:CL-SOURCE-FILE.CL #:CL-SOURCE-FILE.LSP #:BASIC-LOAD-OP #:BASIC-COMPILE-OP #:COMPILE-OP-FLAGS #:COMPILE-OP-PROCLAMATIONS #:LOAD-OP #:PREPARE-OP #:COMPILE-OP #:TEST-OP #:LOAD-SOURCE-OP #:PREPARE-SOURCE-OP #:CALL-WITH-AROUND-COMPILE-HOOK #:PERFORM-LISP-COMPILATION #:PERFORM-LISP-LOAD-FASL #:PERFORM-LISP-LOAD-SOURCE #:LISP-COMPILATION-OUTPUT-FILES #:FLAGS #:PROCLAMATIONS #:FLAGS #:G1251984 #:COMPONENT-OPERATION-TIME #:MARK-OPERATION-DONE #:PLAN #:PLAN-TRAVERSAL #:SEQUENTIAL-PLAN #:*DEFAULT-PLAN-CLASS* #:PLANNED-ACTION-STATUS #:PLAN-ACTION-STATUS #:ACTION-ALREADY-DONE-P #:CIRCULAR-DEPENDENCY #:CIRCULAR-DEPENDENCY-ACTIONS #:NODE-FOR #:NEEDED-IN-IMAGE-P #:ACTION-INDEX #:ACTION-PLANNED-P #:ACTION-VALID-P #:PLAN-RECORD-DEPENDENCY #:NORMALIZE-FORCED-SYSTEMS #:ACTION-FORCED-P #:ACTION-FORCED-NOT-P #:MAP-DIRECT-DEPENDENCIES #:REDUCE-DIRECT-DEPENDENCIES #:DIRECT-DEPENDENCIES #:COMPUTE-ACTION-STAMP #:TRAVERSE-ACTION #:CIRCULAR-DEPENDENCY #:CIRCULAR-DEPENDENCY-ACTIONS #:CALL-WHILE-VISITING-ACTION #:WHILE-VISITING-ACTION #:MAKE-PLAN #:PLAN-ACTIONS #:PERFORM-PLAN #:PLAN-OPERATES-ON-P #:PLANNED-P #:INDEX #:FORCED #:FORCED-NOT #:TOTAL-ACTION-COUNT #:PLANNED-ACTION-COUNT #:PLANNED-OUTPUT-ACTION-COUNT #:VISITED-ACTIONS #:VISITING-ACTION-SET #:VISITING-ACTION-LIST #:PLAN-ACTIONS-R #:REQUIRED-COMPONENTS #:FILTERED-SEQUENTIAL-PLAN #:PLAN-SYSTEM #:PLAN-ACTION-FILTER #:PLAN-COMPONENT-TYPE #:PLAN-KEEP-OPERATION #:PLAN-KEEP-COMPONENT #:TRAVERSE-ACTIONS #:TRAVERSE-SUB-ACTIONS #:WHOLE-1306150 #:ENVIRONMENT-1306151 #:REST1306533 #:REST1307336 #:OPERATE #:OOS #:*SYSTEMS-BEING-OPERATED* #:BUILD-OP #:MAKE #:LOAD-SYSTEM #:LOAD-SYSTEMS #:LOAD-SYSTEMS* #:COMPILE-SYSTEM #:TEST-SYSTEM #:REQUIRE-SYSTEM #:*LOAD-SYSTEM-OPERATION* #:MODULE-PROVIDE-ASDF #:COMPONENT-LOADED-P #:ALREADY-LOADED-SYSTEMS #:REST1359427 #:*OUTPUT-TRANSLATIONS* #:*OUTPUT-TRANSLATIONS-PARAMETER* #:INVALID-OUTPUT-TRANSLATION #:OUTPUT-TRANSLATIONS #:OUTPUT-TRANSLATIONS-INITIALIZED-P #:INITIALIZE-OUTPUT-TRANSLATIONS #:CLEAR-OUTPUT-TRANSLATIONS #:DISABLE-OUTPUT-TRANSLATIONS #:ENSURE-OUTPUT-TRANSLATIONS #:APPLY-OUTPUT-TRANSLATIONS #:VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE #:VALIDATE-OUTPUT-TRANSLATIONS-FORM #:VALIDATE-OUTPUT-TRANSLATIONS-FILE #:VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY #:PARSE-OUTPUT-TRANSLATIONS-STRING #:WRAPPING-OUTPUT-TRANSLATIONS #:USER-OUTPUT-TRANSLATIONS-PATHNAME #:SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME #:USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME #:SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME #:ENVIRONMENT-OUTPUT-TRANSLATIONS #:PROCESS-OUTPUT-TRANSLATIONS #:COMPUTE-OUTPUT-TRANSLATIONS #:TRANSLATE-JAR-PATHNAME #:*SOURCE-REGISTRY-PARAMETER* #:*DEFAULT-SOURCE-REGISTRIES* #:INVALID-SOURCE-REGISTRY #:SOURCE-REGISTRY-INITIALIZED-P #:INITIALIZE-SOURCE-REGISTRY #:CLEAR-SOURCE-REGISTRY #:*SOURCE-REGISTRY* #:ENSURE-SOURCE-REGISTRY #:*SOURCE-REGISTRY-PARAMETER* #:*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS* #:*SOURCE-REGISTRY-EXCLUSIONS* #:*WILD-ASD* #:DIRECTORY-ASD-FILES #:REGISTER-ASD-DIRECTORY #:COLLECT-ASDS-IN-DIRECTORY #:COLLECT-SUB*DIRECTORIES-ASD-FILES #:VALIDATE-SOURCE-REGISTRY-DIRECTIVE #:VALIDATE-SOURCE-REGISTRY-FORM #:VALIDATE-SOURCE-REGISTRY-FILE #:VALIDATE-SOURCE-REGISTRY-DIRECTORY #:PARSE-SOURCE-REGISTRY-STRING #:WRAPPING-SOURCE-REGISTRY #:DEFAULT-USER-SOURCE-REGISTRY #:DEFAULT-SYSTEM-SOURCE-REGISTRY #:USER-SOURCE-REGISTRY #:SYSTEM-SOURCE-REGISTRY #:USER-SOURCE-REGISTRY-DIRECTORY #:SYSTEM-SOURCE-REGISTRY-DIRECTORY #:ENVIRONMENT-SOURCE-REGISTRY #:PROCESS-SOURCE-REGISTRY #:COMPUTE-SOURCE-REGISTRY #:FLATTEN-SOURCE-REGISTRY #:SYSDEF-SOURCE-REGISTRY-SEARCH #:LOAD-SYSDEF #:MAKE-TEMPORARY-PACKAGE #:%REFRESH-COMPONENT-INLINE-METHODS #:MAKE-SUB-OPERATION #:LOAD-SYSDEF #:MAKE-TEMPORARY-PACKAGE #:DEPENDS-ON #:WEAKLY-DEPENDS-ON #:DEFSYSTEM #:REGISTER-SYSTEM-DEFINITION #:CLASS-FOR-TYPE #:*DEFAULT-COMPONENT-CLASS* #:DETERMINE-SYSTEM-DIRECTORY #:PARSE-COMPONENT-FORM #:NON-TOPLEVEL-SYSTEM #:NON-SYSTEM-SYSTEM #:SYSDEF-ERROR-COMPONENT #:CHECK-COMPONENT-INPUT #:WHOLE-1551388 #:ENVIRONMENT-1551389 #:BUNDLE-OP #:BUNDLE-TYPE #:PROGRAM-SYSTEM #:BUNDLE-SYSTEM #:BUNDLE-PATHNAME-TYPE #:BUNDLABLE-FILE-P #:DIRECT-DEPENDENCY-FILES #:MONOLITHIC-OP #:MONOLITHIC-BUNDLE-OP #:OPERATION-MONOLITHIC-P #:FASL-OP #:LOAD-FASL-OP #:MONOLITHIC-FASL-OP #:BINARY-OP #:MONOLITHIC-BINARY-OP #:BASIC-COMPILE-BUNDLE-OP #:PREPARE-BUNDLE-OP #:COMPILE-BUNDLE-OP #:LOAD-BUNDLE-OP #:MONOLITHIC-COMPILE-BUNDLE-OP #:MONOLITHIC-LOAD-BUNDLE-OP #:LIB-OP #:MONOLITHIC-LIB-OP #:DLL-OP #:MONOLITHIC-DLL-OP #:DELIVER-ASD-OP #:MONOLITHIC-DELIVER-ASD-OP #:PROGRAM-OP #:IMAGE-OP #:COMPILED-FILE #:PRECOMPILED-SYSTEM #:PREBUILT-SYSTEM #:USER-SYSTEM-P #:USER-SYSTEM #:TRIVIAL-SYSTEM-P #:MAKE-BUILD #:BUILD-ARGS #:NAME-SUFFIX #:PROLOGUE-CODE #:EPILOGUE-CODE #:STATIC-LIBRARY #:CONCATENATE-SOURCE-OP #:LOAD-CONCATENATED-SOURCE-OP #:COMPILE-CONCATENATED-SOURCE-OP #:LOAD-COMPILED-CONCATENATED-SOURCE-OP #:MONOLITHIC-CONCATENATE-SOURCE-OP #:MONOLITHIC-LOAD-CONCATENATED-SOURCE-OP #:MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP #:MONOLITHIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP #:*ASDF-VERBOSE* #:OPERATION-ERROR #:COMPILE-ERROR #:COMPILE-FAILED #:COMPILE-WARNED #:ERROR-COMPONENT #:ERROR-OPERATION #:TRAVERSE #:COMPONENT-LOAD-DEPENDENCIES #:ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY #:OPERATION-FORCED #:OPERATION-ON-FAILURE #:OPERATION-ON-WARNINGS #:ON-FAILURE #:ON-WARNINGS #:COMPONENT-PROPERTY #:RUN-SHELL-COMMAND #:SYSTEM-DEFINITION-PATHNAME #:REST1712123 #:OUTPUT-FILES-FOR-SYSTEM-AND-OPERATION #:G1712442 #:PACKAGE-SYSTEM #:REGISTER-SYSTEM-PACKAGES #:SYSDEF-PACKAGE-SYSTEM-SEARCH #:*DEFPACKAGE-FORMS* #:*PACKAGE-SYSTEMS* #:PACKAGE-SYSTEM-MISSING-PACKAGE-ERROR #:DEFSYSTEM #:FIND-SYSTEM #:LOCATE-SYSTEM #:COERCE-NAME #:PRIMARY-SYSTEM-NAME #:OOS #:OPERATE #:MAKE-PLAN #:PERFORM-PLAN #:SEQUENTIAL-PLAN #:SYSTEM-DEFINITION-PATHNAME #:SEARCH-FOR-SYSTEM-DEFINITION #:FIND-COMPONENT #:COMPONENT-FIND-PATH #:COMPILE-SYSTEM #:LOAD-SYSTEM #:LOAD-SYSTEMS #:LOAD-SYSTEMS* #:REQUIRE-SYSTEM #:TEST-SYSTEM #:CLEAR-SYSTEM #:OPERATION #:MAKE-OPERATION #:FIND-OPERATION #:UPWARD-OPERATION #:DOWNWARD-OPERATION #:SIDEWAY-OPERATION #:SELFWARD-OPERATION #:NON-PROPAGATING-OPERATION #:BUILD-OP #:MAKE #:LOAD-OP #:PREPARE-OP #:COMPILE-OP #:PREPARE-SOURCE-OP #:LOAD-SOURCE-OP #:TEST-OP #:FEATURE #:VERSION #:VERSION-SATISFIES #:UPGRADE-ASDF #:IMPLEMENTATION-IDENTIFIER #:IMPLEMENTATION-TYPE #:HOSTNAME #:INPUT-FILES #:OUTPUT-FILES #:OUTPUT-FILE #:PERFORM #:PERFORM-WITH-RESTARTS #:OPERATION-DONE-P #:EXPLAIN #:ACTION-DESCRIPTION #:COMPONENT-SIDEWAY-DEPENDENCIES #:NEEDED-IN-IMAGE-P #:COMPONENT-LOAD-DEPENDENCIES #:RUN-SHELL-COMMAND #:BUNDLE-OP #:MONOLITHIC-BUNDLE-OP #:PRECOMPILED-SYSTEM #:COMPILED-FILE #:BUNDLE-SYSTEM #:PROGRAM-SYSTEM #:MAKE-BUILD #:FASL-OP #:LOAD-FASL-OP #:MONOLITHIC-FASL-OP #:BINARY-OP #:MONOLITHIC-BINARY-OP #:BASIC-COMPILE-BUNDLE-OP #:PREPARE-BUNDLE-OP #:COMPILE-BUNDLE-OP #:LOAD-BUNDLE-OP #:MONOLITHIC-COMPILE-BUNDLE-OP #:MONOLITHIC-LOAD-BUNDLE-OP #:LIB-OP #:DLL-OP #:DELIVER-ASD-OP #:PROGRAM-OP #:IMAGE-OP #:MONOLITHIC-LIB-OP #:MONOLITHIC-DLL-OP #:MONOLITHIC-DELIVER-ASD-OP #:CONCATENATE-SOURCE-OP #:LOAD-CONCATENATED-SOURCE-OP #:COMPILE-CONCATENATED-SOURCE-OP #:LOAD-COMPILED-CONCATENATED-SOURCE-OP #:MONOLITHIC-CONCATENATE-SOURCE-OP #:MONOLITHIC-LOAD-CONCATENATED-SOURCE-OP #:MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP #:MONOLITHIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP #:OPERATION-MONOLITHIC-P #:REQUIRED-COMPONENTS #:COMPONENT-LOADED-P #:COMPONENT #:PARENT-COMPONENT #:CHILD-COMPONENT #:SYSTEM #:MODULE #:FILE-COMPONENT #:SOURCE-FILE #:C-SOURCE-FILE #:JAVA-SOURCE-FILE #:CL-SOURCE-FILE #:CL-SOURCE-FILE.CL #:CL-SOURCE-FILE.LSP #:STATIC-FILE #:DOC-FILE #:HTML-FILE #:FILE-TYPE #:SOURCE-FILE-TYPE #:PACKAGE-SYSTEM #:REGISTER-SYSTEM-PACKAGES #:COMPONENT-CHILDREN #:COMPONENT-CHILDREN-BY-NAME #:COMPONENT-PATHNAME #:COMPONENT-RELATIVE-PATHNAME #:COMPONENT-NAME #:COMPONENT-VERSION #:COMPONENT-PARENT #:COMPONENT-SYSTEM #:COMPONENT-ENCODING #:COMPONENT-EXTERNAL-FORMAT #:COMPONENT-DEPENDS-ON #:MODULE-COMPONENTS #:OPERATION-ON-WARNINGS #:OPERATION-ON-FAILURE #:COMPONENT-PROPERTY #:TRAVERSE #:SYSTEM-DESCRIPTION #:SYSTEM-LONG-DESCRIPTION #:SYSTEM-AUTHOR #:SYSTEM-MAINTAINER #:SYSTEM-LICENSE #:SYSTEM-LICENCE #:SYSTEM-SOURCE-FILE #:SYSTEM-SOURCE-DIRECTORY #:SYSTEM-RELATIVE-PATHNAME #:SYSTEM-HOMEPAGE #:SYSTEM-MAILTO #:SYSTEM-BUG-TRACKER #:SYSTEM-LONG-NAME #:SYSTEM-SOURCE-CONTROL #:MAP-SYSTEMS #:SYSTEM-DEFSYSTEM-DEPENDS-ON #:SYSTEM-DEPENDS-ON #:SYSTEM-WEAKLY-DEPENDS-ON #:*SYSTEM-DEFINITION-SEARCH-FUNCTIONS* #:*CENTRAL-REGISTRY* #:*COMPILE-FILE-WARNINGS-BEHAVIOUR* #:*COMPILE-FILE-FAILURE-BEHAVIOUR* #:*RESOLVE-SYMLINKS* #:*LOAD-SYSTEM-OPERATION* #:*IMMUTABLE-SYSTEMS* #:*ASDF-VERBOSE* #:*VERBOSE-OUT* #:ASDF-VERSION #:COMPILE-CONDITION #:COMPILE-FILE-ERROR #:COMPILE-WARNED-ERROR #:COMPILE-FAILED-ERROR #:COMPILE-WARNED-WARNING #:COMPILE-FAILED-WARNING #:OPERATION-ERROR #:COMPILE-FAILED #:COMPILE-WARNED #:COMPILE-ERROR #:ERROR-NAME #:ERROR-PATHNAME #:LOAD-SYSTEM-DEFINITION-ERROR #:ERROR-COMPONENT #:ERROR-OPERATION #:SYSTEM-DEFINITION-ERROR #:MISSING-COMPONENT #:MISSING-COMPONENT-OF-VERSION #:MISSING-DEPENDENCY #:MISSING-DEPENDENCY-OF-VERSION #:CIRCULAR-DEPENDENCY #:DUPLICATE-NAMES #:NON-TOPLEVEL-SYSTEM #:NON-SYSTEM-SYSTEM #:PACKAGE-SYSTEM-MISSING-PACKAGE-ERROR #:OPERATION-DEFINITION-WARNING #:OPERATION-DEFINITION-ERROR #:TRY-RECOMPILING #:RETRY #:ACCEPT #:COERCE-ENTRY-TO-DIRECTORY #:REMOVE-ENTRY-FROM-REGISTRY #:*ENCODING-DETECTION-HOOK* #:*ENCODING-EXTERNAL-FORMAT-HOOK* #:*DEFAULT-ENCODING* #:*UTF-8-EXTERNAL-FORMAT* #:CLEAR-CONFIGURATION #:*OUTPUT-TRANSLATIONS-PARAMETER* #:INITIALIZE-OUTPUT-TRANSLATIONS #:DISABLE-OUTPUT-TRANSLATIONS #:CLEAR-OUTPUT-TRANSLATIONS #:ENSURE-OUTPUT-TRANSLATIONS #:APPLY-OUTPUT-TRANSLATIONS #:COMPILE-FILE* #:COMPILE-FILE-PATHNAME* #:*WARNINGS-FILE-TYPE* #:ENABLE-DEFERRED-WARNINGS-CHECK #:DISABLE-DEFERRED-WARNINGS-CHECK #:ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY #:*DEFAULT-SOURCE-REGISTRIES* #:*SOURCE-REGISTRY-PARAMETER* #:INITIALIZE-SOURCE-REGISTRY #:COMPUTE-SOURCE-REGISTRY #:CLEAR-SOURCE-REGISTRY #:ENSURE-SOURCE-REGISTRY #:PROCESS-SOURCE-REGISTRY #:SYSTEM-REGISTERED-P #:REGISTERED-SYSTEMS #:ALREADY-LOADED-SYSTEMS #:RESOLVE-LOCATION #:ASDF-MESSAGE #:*USER-CACHE* #:USER-OUTPUT-TRANSLATIONS-PATHNAME #:SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME #:USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME #:SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME #:USER-SOURCE-REGISTRY #:SYSTEM-SOURCE-REGISTRY #:USER-SOURCE-REGISTRY-DIRECTORY #:SYSTEM-SOURCE-REGISTRY-DIRECTORY #:LOADED-SYSTEMS #:OUTPUT-FILES-FOR-SYSTEM-AND-OPERATION))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.asdf"))
(SYSTEM:%IN-PACKAGE "CL-USER")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1))
(SYSTEM::%DEFPACKAGE "UIOP/PACKAGE" 'COMMON-LISP:NIL 'COMMON-LISP:NIL 'COMMON-LISP:NIL 
(SYSTEM::ENSURE-AVAILABLE-SYMBOLS 'COMMON-LISP:NIL) '("COMMON-LISP") (SYSTEM::ENSURE-AVAILABLE-SYMBOLS 
'COMMON-LISP:NIL) 'COMMON-LISP:NIL '("FIND-PACKAGE*" "FIND-SYMBOL*" "SYMBOL-CALL" 
"INTERN*" "EXPORT*" "IMPORT*" "SHADOWING-IMPORT*" "SHADOW*" "MAKE-SYMBOL*" "UNINTERN*" 
"SYMBOL-SHADOWING-P" "HOME-PACKAGE-P" "SYMBOL-PACKAGE-NAME" "STANDARD-COMMON-LISP-SYMBOL-P" 
"REIFY-PACKAGE" "UNREIFY-PACKAGE" "REIFY-SYMBOL" "UNREIFY-SYMBOL" "NUKE-SYMBOL-IN-PACKAGE" 
"NUKE-SYMBOL" "REHOME-SYMBOL" "ENSURE-PACKAGE-UNUSED" "DELETE-PACKAGE*" "PACKAGE-NAMES" 
"PACKAGES-FROM-NAMES" "FRESH-PACKAGE-NAME" "RENAME-PACKAGE-AWAY" "PACKAGE-DEFINITION-FORM" 
"PARSE-DEFINE-PACKAGE-FORM" "ENSURE-PACKAGE" "DEFINE-PACKAGE") 'COMMON-LISP:NIL 'COMMON-LISP:NIL)
(SYSTEM:%IN-PACKAGE "UIOP/PACKAGE")
(SYSTEM:FSET 'FIND-PACKAGE* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 5) 5451 
'(PACKAGE-DESIGNATOR &OPTIONAL (ERROR T)) NIL)
(SYSTEM:FSET 'FIND-SYMBOL* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 6) 5451 
'(NAME PACKAGE-DESIGNATOR &OPTIONAL (ERROR T)) "Find a symbol in a package of given string'ified NAME;
unless CL:FIND-SYMBOL, work well with 'modern' case sensitive syntax
by letting you supply a symbol or keyword for the name;
also works well when the package is not present.
If optional ERROR argument is NIL, return NIL instead of an error
when the symbol is not found.")
(SYSTEM:FSET 'SYMBOL-CALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 7) 5451 
'(PACKAGE NAME &REST ARGS) "Call a function associated with symbol of given name in given package,
with given ARGS. Useful when the call is read before the package is loaded,
or when loading the package is optional.")
(SYSTEM:FSET 'INTERN* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 8) 5451 '(NAME 
PACKAGE-DESIGNATOR &OPTIONAL (ERROR T)) NIL)
(SYSTEM:FSET 'EXPORT* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 9) 5451 '(NAME 
PACKAGE-DESIGNATOR) NIL)
(SYSTEM:FSET 'IMPORT* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 10) 5451 '(SYMBOL 
PACKAGE-DESIGNATOR) NIL)
(SYSTEM:FSET 'SHADOWING-IMPORT* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 11) 
5451 '(SYMBOL PACKAGE-DESIGNATOR) NIL)
(SYSTEM:FSET 'SHADOW* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 12) 5451 '(NAME 
PACKAGE-DESIGNATOR) NIL)
(SYSTEM:FSET 'MAKE-SYMBOL* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 13) 5451 
'(NAME) NIL)
(SYSTEM:FSET 'UNINTERN* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 14) 5451 
'(NAME PACKAGE-DESIGNATOR &OPTIONAL (ERROR T)) NIL)
(SYSTEM:FSET 'SYMBOL-SHADOWING-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
15) 5451 '(SYMBOL PACKAGE) NIL)
(SYSTEM:FSET 'HOME-PACKAGE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16) 
5451 '(SYMBOL PACKAGE) NIL)
(SYSTEM:FSET 'SYMBOL-PACKAGE-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
17) 8584 '(SYMBOL) NIL)
(SYSTEM:FSET 'STANDARD-COMMON-LISP-SYMBOL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
18) 8584 '(SYMBOL) NIL)
(SYSTEM:FSET 'REIFY-PACKAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 19) 8584 
'(PACKAGE &OPTIONAL PACKAGE-CONTEXT) NIL)
(SYSTEM:FSET 'UNREIFY-PACKAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 20) 
8584 '(PACKAGE &OPTIONAL PACKAGE-CONTEXT) NIL)
(SYSTEM:FSET 'REIFY-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 21) 8584 
'(SYMBOL &OPTIONAL PACKAGE-CONTEXT) NIL)
(SYSTEM:FSET 'UNREIFY-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22) 
8584 '(SYMBOL &OPTIONAL PACKAGE-CONTEXT) NIL)
(DEFVAR *ALL-PACKAGE-HAPPINESS* 'NIL)
(DEFVAR *ALL-PACKAGE-FISHINESS* (LIST T))
(SYSTEM:FSET 'RECORD-FISHY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 23) 10024 
'(INFO) NIL)
(SYSTEM:FSET 'WHEN-PACKAGE-FISHINESS (SYSTEM:MAKE-MACRO 'WHEN-PACKAGE-FISHINESS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 24)) 10024 '(&BODY BODY))
(SYSTEM:FSET 'NOTE-PACKAGE-FISHINESS (SYSTEM:MAKE-MACRO 'NOTE-PACKAGE-FISHINESS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 25)) 10024 '(&REST INFO))
(SYSTEM:FSET 'SET-DUMMY-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 26) 
10472 '(SYMBOL REASON OTHER-SYMBOL) NIL)
(SYSTEM:FSET 'MAKE-DUMMY-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 27) 
10472 '(SYMBOL) NIL)
(SYSTEM:FSET 'DUMMY-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 28) 10472 
'(SYMBOL) NIL)
(SYSTEM:FSET 'GET-DUMMY-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 29) 
10472 '(SYMBOL) NIL)
(SYSTEM:FSET 'NUKE-SYMBOL-IN-PACKAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
30) 10472 '(SYMBOL PACKAGE-DESIGNATOR) NIL)
(SYSTEM:FSET 'NUKE-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 31) 10472 
'(SYMBOL &OPTIONAL (PACKAGES (LIST-ALL-PACKAGES))) NIL)
(SYSTEM:FSET 'REHOME-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 32) 10472 
'(SYMBOL PACKAGE-DESIGNATOR) "Changes the home package of a symbol, also leaving it present in its old home if any")
(SYSTEM:FSET 'ENSURE-PACKAGE-UNUSED (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
33) 10472 '(PACKAGE) NIL)
(SYSTEM:FSET 'DELETE-PACKAGE* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 34) 
10472 '(PACKAGE &KEY NUKE) NIL)
(SYSTEM:FSET 'PACKAGE-NAMES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 35) 10472 
'(PACKAGE) NIL)
(SYSTEM:FSET 'PACKAGES-FROM-NAMES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
36) 10472 '(NAMES) NIL)
(SYSTEM:FSET 'FRESH-PACKAGE-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
37) 10472 '(&KEY (PREFIX :%TO-BE-DELETED) SEPARATOR (INDEX (RANDOM MOST-POSITIVE-FIXNUM))) 
NIL)
(SYSTEM:FSET 'RENAME-PACKAGE-AWAY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
39) 10472 '(P &REST KEYS &KEY PREFIX &ALLOW-OTHER-KEYS) NIL)
(SYSTEM:FSET 'PACKAGE-DEFINITION-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
41) 17450 '(PACKAGE-DESIGNATOR &KEY (NICKNAMESP T) (USEP T) (SHADOWP T) (SHADOWING-IMPORT-P 
T) (EXPORTP T) (IMPORTP T) INTERNP (ERROR T)) NIL)
(SYSTEM:FSET 'ENSURE-SHADOWING-IMPORT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
46) 20481 '(NAME TO-PACKAGE FROM-PACKAGE SHADOWED IMPORTED) NIL)
(SYSTEM:FSET 'ENSURE-IMPORTED (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 47) 
20481 '(IMPORT-ME INTO-PACKAGE &OPTIONAL FROM-PACKAGE) NIL)
(SYSTEM:FSET 'ENSURE-IMPORT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 48) 20481 
'(NAME TO-PACKAGE FROM-PACKAGE SHADOWED IMPORTED) NIL)
(SYSTEM:FSET 'ENSURE-INHERITED (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 49) 
20481 '(NAME SYMBOL TO-PACKAGE FROM-PACKAGE MIXP SHADOWED IMPORTED INHERITED) NIL)
(SYSTEM:FSET 'ENSURE-MIX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 50) 20481 
'(NAME SYMBOL TO-PACKAGE FROM-PACKAGE SHADOWED IMPORTED INHERITED) NIL)
(SYSTEM:FSET 'RECYCLE-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 51) 
20481 '(NAME RECYCLE EXPORTED) NIL)
(SYSTEM:FSET 'SYMBOL-RECYCLED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 52) 
20481 '(SYM RECYCLE) NIL)
(SYSTEM:FSET 'ENSURE-SYMBOL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 53) 20481 
'(NAME PACKAGE INTERN RECYCLE SHADOWED IMPORTED INHERITED EXPORTED) NIL)
(PROCLAIM '(FTYPE (FUNCTION (T T T &OPTIONAL T) T) ENSURE-EXPORTED))
(SYSTEM:FSET 'ENSURE-EXPORTED-TO-USER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
54) 20481 '(NAME SYMBOL TO-PACKAGE &OPTIONAL RECYCLE) NIL)
(SYSTEM:FSET 'ENSURE-EXPORTED (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 55) 
20481 '(NAME SYMBOL FROM-PACKAGE &OPTIONAL RECYCLE) NIL)
(SYSTEM:FSET 'ENSURE-EXPORT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 56) 20481 
'(NAME FROM-PACKAGE &OPTIONAL RECYCLE) NIL)
(SYSTEM:FSET 'ENSURE-PACKAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 57) 
20481 '(NAME &KEY NICKNAMES DOCUMENTATION USE SHADOW SHADOWING-IMPORT-FROM IMPORT-FROM 
EXPORT INTERN RECYCLE MIX REEXPORT UNINTERN) NIL)
(SYSTEM:FSET 'PARSE-DEFINE-PACKAGE-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
59) 37582 '(PACKAGE CLAUSES) NIL)
(SYSTEM:FSET 'DEFINE-PACKAGE (SYSTEM:MAKE-MACRO 'DEFINE-PACKAGE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 60)) 39685 '(PACKAGE &REST CLAUSES))
(APPLY 'ENSURE-PACKAGE '(:ASDF/PACKAGE :NICKNAMES NIL :DOCUMENTATION NIL :USE (:CL 
:UIOP/PACKAGE) :SHADOW NIL :SHADOWING-IMPORT-FROM NIL :IMPORT-FROM NIL :EXPORT NIL 
:INTERN NIL :RECYCLE (:ASDF/PACKAGE) :MIX NIL :REEXPORT (:UIOP/PACKAGE) :UNINTERN 
NIL))
(APPLY 'ENSURE-PACKAGE '(:UIOP/COMMON-LISP :NICKNAMES (:UOIP/CL :ASDF/COMMON-LISP 
:ASDF/CL) :DOCUMENTATION NIL :USE (:COMMON-LISP :UIOP/PACKAGE) :SHADOW NIL :SHADOWING-IMPORT-FROM 
NIL :IMPORT-FROM NIL :EXPORT NIL :INTERN NIL :RECYCLE (:UIOP/COMMON-LISP :UOIP/CL 
:ASDF/COMMON-LISP :ASDF/CL :ASDF) :MIX NIL :REEXPORT (:COMMON-LISP) :UNINTERN NIL))
(SYSTEM:%IN-PACKAGE "UIOP/COMMON-LISP")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 61))
(SYSTEM:FSET 'LOOP* (SYSTEM:MAKE-MACRO 'LOOP* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
62)) 47715 '(&REST REST))
(SYSTEM:FSET 'FROB-SUBSTRINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 63) 
48065 '(STRING SUBSTRINGS &OPTIONAL FROB) "for each substring in SUBSTRINGS, find occurrences of it within STRING
that don't use parts of matched occurrences of previous strings, and
FROB them, that is to say, remove them if FROB is NIL,
replace by FROB if FROB is a STRING, or if FROB is a FUNCTION,
call FROB with the match and a function that emits a string in the output.
Return a string made of the parts not omitted or emitted by FROB.")
(SYSTEM:FSET 'COMPATFMT (SYSTEM:MAKE-MACRO 'COMPATFMT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 67)) 48065 '(FORMAT))
(APPLY 'ENSURE-PACKAGE '(:UIOP/UTILITY :NICKNAMES (:ASDF/UTILITY) :DOCUMENTATION 
NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE) :SHADOW NIL :SHADOWING-IMPORT-FROM NIL 
:IMPORT-FROM ((:UIOP/COMMON-LISP #10? #11? #12?)) :EXPORT (#13? #14? #15? #16? #17? 
#18? #19? #20? #21? #22? #23? #24? #25? #26? #27? #28? #29? #30? #31? #32? #33? #34? 
#35? #36? #37? #38? #39? #40? #41? #42? #43? #44? #45? #46? #47? #48? #49? #50? #51? 
#52? #53? #54? #55? #56? #57? #58? #59? #60? #61? #62? #63? #64? #65? #66? #67? #68? 
#69? #70? #71? #72? #73? #74? #75? #76? #77? #78? #79? #80? #81? #82?) :INTERN NIL 
:RECYCLE (:UIOP/UTILITY :ASDF/UTILITY :ASDF) :MIX NIL :REEXPORT NIL :UNINTERN NIL))
(SYSTEM:%IN-PACKAGE "UIOP/UTILITY")
(SYSTEM:FSET 'UNDEFINE-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 68) 
52607 '(FUNCTION-SPEC) COMMON-LISP:NIL)
(SYSTEM:FSET 'UNDEFINE-FUNCTIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
69) 52607 '(FUNCTION-SPEC-LIST) COMMON-LISP:NIL)
(SYSTEM:FSET 'DEFGENERIC* (SYSTEM:MAKE-MACRO 'DEFGENERIC* (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 70)) 52607 '(NAME FORMALS COMMON-LISP:&REST COMMON-LISP:REST))
(SYSTEM:FSET 'DEFUN* (SYSTEM:MAKE-MACRO 'DEFUN* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
71)) 52607 '(NAME FORMALS COMMON-LISP:&REST COMMON-LISP:REST))
(SYSTEM:FSET 'WITH-UPGRADABILITY (SYSTEM:MAKE-MACRO 'WITH-UPGRADABILITY (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 72)) 52607 '((COMMON-LISP:&OPTIONAL) COMMON-LISP:&BODY BODY))
(COMMON-LISP:DEFVAR *UIOP-DEBUG-UTILITY* '(COMMON-LISP:OR (COMMON-LISP:IGNORE-ERRORS 
(SYMBOL-CALL :ASDF :SYSTEM-RELATIVE-PATHNAME :UIOP "contrib/debug.lisp")) (SYMBOL-CALL 
:UIOP/PATHNAME :SUBPATHNAME (COMMON-LISP:USER-HOMEDIR-PATHNAME) "cl/asdf/uiop/contrib/debug.lisp")) 
"form that evaluates to the pathname to your favorite debugging utilities")
(SYSTEM:FSET 'UIOP-DEBUG (SYSTEM:MAKE-MACRO 'UIOP-DEBUG (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 73)) 55616 '(COMMON-LISP:&REST KEYS))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-UIOP-DEBUG-UTILITY))
(SYSTEM:FSET 'LOAD-UIOP-DEBUG-UTILITY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
74) 55616 '(COMMON-LISP:&KEY COMMON-LISP:PACKAGE UTILITY-FILE) COMMON-LISP:NIL)
(SYSTEM:FSET 'NEST (SYSTEM:MAKE-MACRO 'NEST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
77)) 56698 '(COMMON-LISP:&REST THINGS))
(SYSTEM:FSET 'IF-LET (SYSTEM:MAKE-MACRO 'IF-LET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
79)) 56698 '(BINDINGS COMMON-LISP:&BODY (THEN-FORM COMMON-LISP:&OPTIONAL ELSE-FORM)))
(SYSTEM:FSET 'WHILE-COLLECTING (SYSTEM:MAKE-MACRO 'WHILE-COLLECTING (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 80)) 57417 '((COMMON-LISP:&REST COLLECTORS) COMMON-LISP:&BODY 
BODY))
(SYSTEM:FSET 'APPENDF (SYSTEM:MAKE-MACRO 'APPENDF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
84)) 57417 '(#100? COMMON-LISP:&REST ARGS COMMON-LISP:&ENVIRONMENT #101?))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LENGTH=N-P))
(SYSTEM:FSET 'LENGTH=N-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 85) 57417 
'(X N) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-LIST))
(SYSTEM:FSET 'ENSURE-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 86) 57417 
'(X) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REMOVE-PLIST-KEY))
(SYSTEM:FSET 'REMOVE-PLIST-KEY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 87) 
58788 '(KEY PLIST) "Remove a single key from a plist")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REMOVE-PLIST-KEYS))
(SYSTEM:FSET 'REMOVE-PLIST-KEYS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 88) 
58788 '(KEYS PLIST) "Remove a list of keys from a plist")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EMPTYP))
(SYSTEM:FSET 'EMPTYP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 89) 59253 '(X) 
"Predicate that is true for an empty sequence")
(COMMON-LISP:DEFCONSTANT +NON-BASE-CHARS-EXIST-P+ (COMMON-LISP:NOT (COMMON-LISP:SUBTYPEP 
'COMMON-LISP:CHARACTER 'COMMON-LISP:BASE-CHAR)))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 90))
(COMMON-LISP:DEFPARAMETER +CHARACTER-TYPES+ #(COMMON-LISP:CHARACTER))
(COMMON-LISP:DEFPARAMETER +MAX-CHARACTER-TYPE-INDEX+ (COMMON-LISP:1- (COMMON-LISP:LENGTH 
+CHARACTER-TYPES+)))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHARACTER-TYPE-INDEX))
(SYSTEM:FSET 'CHARACTER-TYPE-INDEX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
91) 60040 '(X) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE BASE-STRING-P))
(SYSTEM:FSET 'BASE-STRING-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 92) 60625 
'(COMMON-LISP:STRING) "Does the STRING only contain BASE-CHARs?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STRINGS-COMMON-ELEMENT-TYPE))
(SYSTEM:FSET 'STRINGS-COMMON-ELEMENT-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
93) 60625 '(STRINGS) "What least subtype of CHARACTER can contain all the elements of all the STRINGS?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REDUCE/STRCAT))
(SYSTEM:FSET 'REDUCE/STRCAT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 94) 60625 
'(STRINGS COMMON-LISP:&KEY KEY START END) "Reduce a list as if by STRCAT, accepting KEY START and END keywords like REDUCE.
NIL is interpreted as an empty string. A character is interpreted as a string of length one.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STRCAT))
(SYSTEM:FSET 'STRCAT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 95) 60625 '(COMMON-LISP:&REST 
STRINGS) "Concatenate strings.
NIL is interpreted as an empty string, a character as a string of length one.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIRST-CHAR))
(SYSTEM:FSET 'FIRST-CHAR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 96) 60625 
'(S) "Return the first character of a non-empty string S, or NIL")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LAST-CHAR))
(SYSTEM:FSET 'LAST-CHAR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 97) 60625 
'(S) "Return the last character of a non-empty string S, or NIL")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SPLIT-STRING))
(SYSTEM:FSET 'SPLIT-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 98) 60625 
'(COMMON-LISP:STRING COMMON-LISP:&KEY COMMON-LISP:MAX (SEPARATOR '(#\  #\Tab))) "Split STRING into a list of components separated by
any of the characters in the sequence SEPARATOR.
If MAX is specified, then no more than max(1,MAX) components will be returned,
starting the separation from the end, e.g. when called with arguments
 \"a.b.c.d.e\" :max 3 :separator \".\" it will return (\"a.b.c\" \"d\" \"e\").")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STRING-PREFIX-P))
(SYSTEM:FSET 'STRING-PREFIX-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 101) 
60625 '(PREFIX COMMON-LISP:STRING) "Does STRING begin with PREFIX?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STRING-SUFFIX-P))
(SYSTEM:FSET 'STRING-SUFFIX-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 102) 
60625 '(COMMON-LISP:STRING SUFFIX) "Does STRING end with SUFFIX?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STRING-ENCLOSED-P))
(SYSTEM:FSET 'STRING-ENCLOSED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 103) 
60625 '(PREFIX COMMON-LISP:STRING SUFFIX) "Does STRING begin with PREFIX and end with SUFFIX?")
(COMMON-LISP:DEFVAR +CR+ (COMMON-LISP:COERCE #(#\Return) 'COMMON-LISP:STRING))
(COMMON-LISP:DEFVAR +LF+ (COMMON-LISP:COERCE #(#\Newline) 'COMMON-LISP:STRING))
(COMMON-LISP:DEFVAR +CRLF+ (COMMON-LISP:COERCE #(#\Return #\Newline) 'COMMON-LISP:STRING))
(SYSTEM:FSET 'STRIPLN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 104) 65009 
'(X) "Strip a string X from any ending CR, LF or CRLF.
Return two values, the stripped string and the ending that was stripped,
or the original value and NIL if no stripping took place.
Since our STRCAT accepts NIL as empty string designator,
the two results passed to STRCAT always reconstitute the original string")
(COMMON-LISP:DEFTYPE STAMP COMMON-LISP:NIL '(COMMON-LISP:OR COMMON-LISP:REAL COMMON-LISP:BOOLEAN))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STAMP<))
(SYSTEM:FSET 'STAMP< (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 106) 65769 '(X 
Y) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STAMPS<))
(SYSTEM:FSET 'STAMPS< (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 107) 65769 
'(COMMON-LISP:LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STAMP*<))
(SYSTEM:FSET 'STAMP*< (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 108) 65769 
'(COMMON-LISP:&REST COMMON-LISP:LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STAMP<=))
(SYSTEM:FSET 'STAMP<= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 109) 65769 
'(X Y) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EARLIER-STAMP))
(SYSTEM:FSET 'EARLIER-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 110) 
65769 '(X Y) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STAMPS-EARLIEST))
(SYSTEM:FSET 'STAMPS-EARLIEST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 111) 
65769 '(COMMON-LISP:LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EARLIEST-STAMP))
(SYSTEM:FSET 'EARLIEST-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 112) 
65769 '(COMMON-LISP:&REST COMMON-LISP:LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LATER-STAMP))
(SYSTEM:FSET 'LATER-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 113) 65769 
'(X Y) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STAMPS-LATEST))
(SYSTEM:FSET 'STAMPS-LATEST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 114) 
65769 '(COMMON-LISP:LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LATEST-STAMP))
(SYSTEM:FSET 'LATEST-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 115) 65769 
'(COMMON-LISP:&REST COMMON-LISP:LIST) COMMON-LISP:NIL)
(SYSTEM:FSET 'LATEST-STAMP-F (SYSTEM:MAKE-MACRO 'LATEST-STAMP-F (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 116)) 65769 '(#104? COMMON-LISP:&REST STAMPS COMMON-LISP:&ENVIRONMENT 
#105?))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-FUNCTION))
(SYSTEM:FSET 'ENSURE-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 117) 
66606 '(FUN COMMON-LISP:&KEY (COMMON-LISP:PACKAGE :CL)) "Coerce the object FUN into a function.

If FUN is a FUNCTION, return it.
If the FUN is a non-sequence literal constant, return constantly that,
i.e. for a boolean keyword character number or pathname.
Otherwise if FUN is a non-literally constant symbol, return its FDEFINITION.
If FUN is a CONS, return the function that applies its CAR
to the appended list of the rest of its CDR and the arguments,
unless the CAR is LAMBDA, in which case the expression is evaluated.
If FUN is a string, READ a form from it in the specified PACKAGE (default: CL)
and EVAL that in a (FUNCTION ...) context.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACCESS-AT))
(SYSTEM:FSET 'ACCESS-AT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 121) 66606 
'(OBJECT AT) "Given an OBJECT and an AT specifier, list of successive accessors,
call each accessor on the result of the previous calls.
An accessor may be an integer, meaning a call to ELT,
a keyword, meaning a call to GETF,
NIL, meaning identity,
a function or other symbol, meaning itself,
or a list of a function designator and arguments, interpreted as per ENSURE-FUNCTION.
As a degenerate case, the AT specifier may be an atom of a single such accessor
instead of a list.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACCESS-AT-COUNT))
(SYSTEM:FSET 'ACCESS-AT-COUNT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 123) 
66606 '(AT) "From an AT specification, extract a COUNT of maximum number
of sub-objects to read as per ACCESS-AT")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-FUNCTION))
(SYSTEM:FSET 'CALL-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 124) 
66606 '(FUNCTION-SPEC COMMON-LISP:&REST ARGUMENTS) "Call the function designated by FUNCTION-SPEC as per ENSURE-FUNCTION,
with the given ARGUMENTS")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-FUNCTIONS))
(SYSTEM:FSET 'CALL-FUNCTIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 125) 
66606 '(FUNCTION-SPECS) "For each function in the list FUNCTION-SPECS, in order, call the function as per CALL-FUNCTION")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-HOOK-FUNCTION))
(SYSTEM:FSET 'REGISTER-HOOK-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
126) 66606 '(COMMON-LISP:VARIABLE HOOK COMMON-LISP:&OPTIONAL CALL-NOW-P) "Push the HOOK function (a designator as per ENSURE-FUNCTION) onto the hook VARIABLE.
When CALL-NOW-P is true, also call the function immediately.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COERCE-CLASS))
(SYSTEM:FSET 'COERCE-CLASS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 127) 69834 
'(COMMON-LISP:CLASS COMMON-LISP:&KEY (COMMON-LISP:PACKAGE :CL) (SUPER COMMON-LISP:T) 
(COMMON-LISP:ERROR 'COMMON-LISP:ERROR)) "Coerce CLASS to a class that is subclass of SUPER if specified,
or invoke ERROR handler as per CALL-FUNCTION.

A keyword designates the name a symbol, which when found in either PACKAGE, designates a class.
-- for backward compatibility, *PACKAGE* is also accepted for now, but this may go in the future.
A string is read as a symbol while in PACKAGE, the symbol designates a class.

A class object designates itself.
NIL designates itself (no class).
A symbol otherwise designates a class by name.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-GETHASH))
(SYSTEM:FSET 'ENSURE-GETHASH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 128) 
71191 '(KEY TABLE DEFAULT) "Lookup the TABLE for a KEY as by GETHASH, but if not present,
call the (possibly constant) function designated by DEFAULT as per CALL-FUNCTION,
set the corresponding entry to the result in the table.
Return two values: the entry after its optional computation, and whether it was found")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LIST-TO-HASH-SET))
(SYSTEM:FSET 'LIST-TO-HASH-SET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 129) 
71191 '(COMMON-LISP:LIST COMMON-LISP:&AUX (H (COMMON-LISP:MAKE-HASH-TABLE :TEST 'COMMON-LISP:EQUAL))) 
"Convert a LIST into hash-table that has the same elements when viewed as a set,
up to the given equality TEST")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UNPARSE-VERSION))
(SYSTEM:FSET 'UNPARSE-VERSION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 130) 
71996 '(VERSION-LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-VERSION))
(SYSTEM:FSET 'PARSE-VERSION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 132) 
71996 '(VERSION-STRING COMMON-LISP:&OPTIONAL ON-ERROR) "Parse a VERSION-STRING as a series of natural integers separated by dots.
Return a (non-null) list of integers if the string is valid;
otherwise return NIL.

When invalid, ON-ERROR is called as per CALL-FUNCTION before to return NIL,
with format arguments explaining why the version is invalid.
ON-ERROR is also called if the version is not canonical
in that it doesn't print back to itself, but the list is returned anyway.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LEXICOGRAPHIC<))
(SYSTEM:FSET 'LEXICOGRAPHIC< (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 133) 
71996 '(COMMON-LISP:< X Y) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LEXICOGRAPHIC<=))
(SYSTEM:FSET 'LEXICOGRAPHIC<= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 134) 
71996 '(COMMON-LISP:< X Y) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VERSION<))
(SYSTEM:FSET 'VERSION< (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 135) 71996 
'(VERSION1 VERSION2) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VERSION<=))
(SYSTEM:FSET 'VERSION<= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 136) 71996 
'(VERSION1 VERSION2) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VERSION-COMPATIBLE-P))
(SYSTEM:FSET 'VERSION-COMPATIBLE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
137) 71996 '(PROVIDED-VERSION REQUIRED-VERSION) "Is the provided version a compatible substitution for the required-version?
If major versions differ, it's not compatible.
If they are equal, then any later version is compatible,
with later being determined by a lexicographical comparison of minor numbers.")
(COMMON-LISP:DEFPARAMETER +SIMPLE-CONDITION-FORMAT-CONTROL-SLOT+ 'SYSTEM::FORMAT-CONTROL 
"Name of the slot for FORMAT-CONTROL in simple-condition")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MATCH-CONDITION-P))
(SYSTEM:FSET 'MATCH-CONDITION-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 138) 
74599 '(X COMMON-LISP:CONDITION) "Compare received CONDITION to some pattern X:
a symbol naming a condition class,
a simple vector of length 2, arguments to find-symbol* with result as above,
or a string describing the format-control of a simple-condition.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MATCH-ANY-CONDITION-P))
(SYSTEM:FSET 'MATCH-ANY-CONDITION-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
141) 74599 '(COMMON-LISP:CONDITION CONDITIONS) "match CONDITION against any of the patterns of CONDITIONS supplied")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-MUFFLED-CONDITIONS))
(SYSTEM:FSET 'CALL-WITH-MUFFLED-CONDITIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
142) 74599 '(THUNK CONDITIONS) "calls the THUNK in a context where the CONDITIONS are muffled")
(SYSTEM:FSET 'WITH-MUFFLED-CONDITIONS (SYSTEM:MAKE-MACRO 'WITH-MUFFLED-CONDITIONS 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 144)) 74599 '((CONDITIONS) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/OS :NICKNAMES (:ASDF/OS) :DOCUMENTATION 
COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY) :SHADOW COMMON-LISP:NIL 
:SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#110? 
#111? #112? #113? #114? #115? #116? #117? #118? #119? #120? #121? #122? #123? #124? 
#125? #126? #127? #128? #129? #130?) :INTERN COMMON-LISP:NIL :RECYCLE (:UIOP/OS :ASDF/OS 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/OS")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FEATUREP))
(SYSTEM:FSET 'FEATUREP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 145) 77474 
'(X COMMON-LISP:&OPTIONAL (COMMON-LISP:*FEATURES* COMMON-LISP:*FEATURES*)) "Checks whether a feature expression X is true with respect to the *FEATURES* set,
as per the CLHS standard for #+ and #-. Beware that just like the CLHS,
we assume symbols from the KEYWORD package are used, but that unless you're using #+/#-
your reader will not have magically used the KEYWORD package, so you need specify
keywords explicitly.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OS-UNIX-P))
(SYSTEM:FSET 'OS-UNIX-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 146) 77474 
'COMMON-LISP:NIL "Is the underlying operating system some Unix variant?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OS-MACOSX-P))
(SYSTEM:FSET 'OS-MACOSX-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 147) 77474 
'COMMON-LISP:NIL "Is the underlying operating system MacOS X?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OS-WINDOWS-P))
(SYSTEM:FSET 'OS-WINDOWS-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 148) 77474 
'COMMON-LISP:NIL "Is the underlying operating system Microsoft Windows?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OS-GENERA-P))
(SYSTEM:FSET 'OS-GENERA-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 149) 77474 
'COMMON-LISP:NIL "Is the underlying operating system Genera (running on a Symbolics Lisp Machine)?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OS-OLDMAC-P))
(SYSTEM:FSET 'OS-OLDMAC-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 150) 77474 
'COMMON-LISP:NIL "Is the underlying operating system an (emulated?) MacOS 9 or earlier?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DETECT-OS))
(SYSTEM:FSET 'DETECT-OS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 151) 77474 
'COMMON-LISP:NIL "Detects the current operating system. Only needs be run at compile-time,
except on ABCL where it might change between FASL compilation and runtime.")
(DETECT-OS)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETENV))
(SYSTEM:FSET 'GETENV (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 152) 79962 '(X) 
"Query the environment, as in C getenv.
Beware: may return empty string if a variable is present but empty;
use getenvp to return NIL in such a case.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETENVP))
(SYSTEM:FSET 'GETENVP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 153) 79962 
'(X) "Predicate that is true if the named variable is present in the libc environment,
then returning the non-empty string value of the variable")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIRST-FEATURE))
(SYSTEM:FSET 'FIRST-FEATURE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 154) 
81632 '(FEATURE-SETS) "A helper for various feature detection functions")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE IMPLEMENTATION-TYPE))
(SYSTEM:FSET 'IMPLEMENTATION-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
155) 81632 'COMMON-LISP:NIL "The type of Lisp implementation used, as a short UIOP-standardized keyword")
(COMMON-LISP:DEFVAR *IMPLEMENTATION-TYPE* (IMPLEMENTATION-TYPE) "The type of Lisp implementation used, as a short UIOP-standardized keyword")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATING-SYSTEM))
(SYSTEM:FSET 'OPERATING-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 156) 
81632 'COMMON-LISP:NIL "The operating system of the current host")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ARCHITECTURE))
(SYSTEM:FSET 'ARCHITECTURE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 157) 81632 
'COMMON-LISP:NIL "The CPU architecture of the current host")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LISP-VERSION-STRING))
(SYSTEM:FSET 'LISP-VERSION-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
158) 81632 'COMMON-LISP:NIL "return a string that identifies the current Lisp implementation version")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE IMPLEMENTATION-IDENTIFIER))
(SYSTEM:FSET 'IMPLEMENTATION-IDENTIFIER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
160) 81632 'COMMON-LISP:NIL "Return a string that identifies the ABI of the current implementation,
suitable for use as a directory name to segregate Lisp FASLs, C dynamic libraries, etc.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE HOSTNAME))
(SYSTEM:FSET 'HOSTNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 163) 86575 
'COMMON-LISP:NIL "return the hostname of the current host")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETCWD))
(SYSTEM:FSET 'GETCWD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 164) 87042 'COMMON-LISP:NIL 
"Get the current working directory as per POSIX getcwd(3), as a pathname object")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHDIR))
(SYSTEM:FSET 'CHDIR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 165) 87042 '(X) 
"Change current directory, as per POSIX chdir(2), to a given pathname object")
(COMMON-LISP:DEFPARAMETER *LINK-INITIAL-DWORD* 76)
(COMMON-LISP:DEFPARAMETER *LINK-GUID* #(1 20 2 0 0 0 0 0 192 0 0 0 0 0 0 70))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-NULL-TERMINATED-STRING))
(SYSTEM:FSET 'READ-NULL-TERMINATED-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
166) 89580 '(S) "Read a null-terminated string from an octet stream S")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-LITTLE-ENDIAN))
(SYSTEM:FSET 'READ-LITTLE-ENDIAN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
167) 89580 '(S COMMON-LISP:&OPTIONAL (BYTES 4)) "Read a number in little-endian format from an byte (octet) stream S,
the number having BYTES octets (defaulting to 4).")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-FILE-LOCATION-INFO))
(SYSTEM:FSET 'PARSE-FILE-LOCATION-INFO (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
168) 89580 '(S) "helper to parse-windows-shortcut")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-WINDOWS-SHORTCUT))
(SYSTEM:FSET 'PARSE-WINDOWS-SHORTCUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
169) 89580 '(COMMON-LISP:PATHNAME) "From a .lnk windows shortcut, extract the pathname linked to")
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/PATHNAME :NICKNAMES (:ASDF/PATHNAME) :DOCUMENTATION 
COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY :UIOP/OS) :SHADOW 
COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#132? #133? #134? #135? #136? #137? #138? #139? #140? #141? #142? #143? 
#144? #145? #146? #147? #148? #149? #150? #151? #152? #153? #154? #155? #156? #157? 
#158? #159? #160? #161? #162? #163? #164? #165? #166? #167? #168? #169? #170? #171? 
#172? #173? #174? #175? #176? #177? #178? #179? #180? #181?) :INTERN COMMON-LISP:NIL 
:RECYCLE (:UIOP/PATHNAME :ASDF/PATHNAME :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/PATHNAME")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NORMALIZE-PATHNAME-DIRECTORY-COMPONENT))
(SYSTEM:FSET 'NORMALIZE-PATHNAME-DIRECTORY-COMPONENT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
171) 95254 '(COMMON-LISP:DIRECTORY) "Convert the DIRECTORY component from a format usable by the underlying
implementation's MAKE-PATHNAME and other primitives to a CLHS-standard format
that is a list and not a string.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT))
(SYSTEM:FSET 'DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 172) 95254 '(DIRECTORY-COMPONENT) "Convert the DIRECTORY-COMPONENT from a CLHS-standard format to a format usable
by the underlying implementation's MAKE-PATHNAME and other primitives")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MERGE-PATHNAME-DIRECTORY-COMPONENTS))
(SYSTEM:FSET 'MERGE-PATHNAME-DIRECTORY-COMPONENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
173) 95254 '(SPECIFIED DEFAULTS) "Helper for MERGE-PATHNAMES* that handles directory components")
(COMMON-LISP:DEFPARAMETER *UNSPECIFIC-PATHNAME-TYPE* :UNSPECIFIC "Unspecific type component to use with the underlying implementation's MAKE-PATHNAME")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-PATHNAME*))
(SYSTEM:FSET 'MAKE-PATHNAME* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 174) 
95254 '(COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (COMMON-LISP:DIRECTORY COMMON-LISP:NIL) 
HOST (DEVICE COMMON-LISP:NIL) NAME COMMON-LISP:TYPE VERSION DEFAULTS) "Takes arguments like CL:MAKE-PATHNAME in the CLHS, and
   tries hard to make a pathname that will actually behave as documented,
   despite the peculiarities of each implementation")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-PATHNAME-COMPONENT-LOGICAL))
(SYSTEM:FSET 'MAKE-PATHNAME-COMPONENT-LOGICAL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
175) 95254 '(X) "Make a pathname component suitable for use in a logical-pathname")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-PATHNAME-LOGICAL))
(SYSTEM:FSET 'MAKE-PATHNAME-LOGICAL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
176) 95254 '(COMMON-LISP:PATHNAME HOST) "Take a PATHNAME's directory, name, type and version components,
and make a new pathname with corresponding components and specified logical HOST")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MERGE-PATHNAMES*))
(SYSTEM:FSET 'MERGE-PATHNAMES* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 177) 
95254 '(SPECIFIED COMMON-LISP:&OPTIONAL (DEFAULTS COMMON-LISP:*DEFAULT-PATHNAME-DEFAULTS*)) 
"MERGE-PATHNAMES* is like MERGE-PATHNAMES except that
if the SPECIFIED pathname does not have an absolute directory,
then the HOST and DEVICE both come from the DEFAULTS, whereas
if the SPECIFIED pathname does have an absolute directory,
then the HOST and DEVICE both come from the SPECIFIED pathname.
This is what users want on a modern Unix or Windows operating system,
unlike the MERGE-PATHNAMES behavior.
Also, if either argument is NIL, then the other argument is returned unmodified;
this is unlike MERGE-PATHNAMES which always merges with a pathname,
by default *DEFAULT-PATHNAME-DEFAULTS*, which cannot be NIL.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOGICAL-PATHNAME-P))
(SYSTEM:FSET 'LOGICAL-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
179) 95254 '(X) "is X a logical-pathname?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PHYSICAL-PATHNAME-P))
(SYSTEM:FSET 'PHYSICAL-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
180) 95254 '(X) "is X a pathname that is not a logical-pathname?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PHYSICALIZE-PATHNAME))
(SYSTEM:FSET 'PHYSICALIZE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
181) 95254 '(X) "if X is a logical pathname, use translate-logical-pathname on it.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NIL-PATHNAME))
(SYSTEM:FSET 'NIL-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 182) 95254 
'(COMMON-LISP:&OPTIONAL (DEFAULTS COMMON-LISP:*DEFAULT-PATHNAME-DEFAULTS*)) "A pathname that is as neutral as possible for use as defaults
when merging, making or parsing pathnames")
(COMMON-LISP:DEFVAR *NIL-PATHNAME* (NIL-PATHNAME (PHYSICALIZE-PATHNAME (COMMON-LISP:USER-HOMEDIR-PATHNAME))) 
"A pathname that is as neutral as possible for use as defaults
when merging, making or parsing pathnames")
(SYSTEM:FSET 'WITH-PATHNAME-DEFAULTS (SYSTEM:MAKE-MACRO 'WITH-PATHNAME-DEFAULTS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 183)) 95254 '((COMMON-LISP:&OPTIONAL DEFAULTS) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PATHNAME-EQUAL))
(SYSTEM:FSET 'PATHNAME-EQUAL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 184) 
103802 '(P1 P2) "Are the two pathnames P1 and P2 reasonably equal in the paths they denote?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ABSOLUTE-PATHNAME-P))
(SYSTEM:FSET 'ABSOLUTE-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
186) 103802 '(PATHSPEC) "If PATHSPEC is a pathname or namestring object that parses as a pathname
possessing an :ABSOLUTE directory component, return the (parsed) pathname.
Otherwise return NIL")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RELATIVE-PATHNAME-P))
(SYSTEM:FSET 'RELATIVE-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
187) 103802 '(PATHSPEC) "If PATHSPEC is a pathname or namestring object that parses as a pathname
possessing a :RELATIVE or NIL directory component, return the (parsed) pathname.
Otherwise return NIL")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE HIDDEN-PATHNAME-P))
(SYSTEM:FSET 'HIDDEN-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 188) 
103802 '(COMMON-LISP:PATHNAME) "Return a boolean that is true if the pathname is hidden as per Unix style,
i.e. its name starts with a dot.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FILE-PATHNAME-P))
(SYSTEM:FSET 'FILE-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 189) 
103802 '(COMMON-LISP:PATHNAME) "Does PATHNAME represent a file, i.e. has a non-null NAME component?

Accepts NIL, a string (converted through PARSE-NAMESTRING) or a PATHNAME.

Note that this does _not_ check to see that PATHNAME points to an
actually-existing file.

Returns the (parsed) PATHNAME when true")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PATHNAME-DIRECTORY-PATHNAME))
(SYSTEM:FSET 'PATHNAME-DIRECTORY-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
190) 106710 '(COMMON-LISP:PATHNAME) "Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,
and NIL NAME, TYPE and VERSION components")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PATHNAME-PARENT-DIRECTORY-PATHNAME))
(SYSTEM:FSET 'PATHNAME-PARENT-DIRECTORY-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
191) 106710 '(COMMON-LISP:PATHNAME) "Returns a new pathname that corresponds to the parent of the current pathname's directory,
i.e. removing one level of depth in the DIRECTORY component. e.g. if pathname is
Unix pathname /foo/bar/baz/file.type then return /foo/bar/")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORY-PATHNAME-P))
(SYSTEM:FSET 'DIRECTORY-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
192) 106710 '(COMMON-LISP:PATHNAME) "Does PATHNAME represent a directory?

A directory-pathname is a pathname _without_ a filename. The three
ways that the filename components can be missing are for it to be NIL,
:UNSPECIFIC or the empty string.

Note that this does _not_ check to see that PATHNAME points to an
actually-existing directory.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-DIRECTORY-PATHNAME))
(SYSTEM:FSET 'ENSURE-DIRECTORY-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
194) 106710 '(PATHSPEC COMMON-LISP:&OPTIONAL (ON-ERROR 'COMMON-LISP:ERROR)) "Converts the non-wild pathname designator PATHSPEC to directory form.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS))
(SYSTEM:FSET 'SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 195) 109407 '(UNIX-NAMESTRING COMMON-LISP:&KEY ENSURE-DIRECTORY 
DOT-DOT) "Splits the path string UNIX-NAMESTRING, returning four values:
A flag that is either :absolute or :relative, indicating
   how the rest of the values are to be interpreted.
A directory path --- a list of strings and keywords, suitable for
   use with MAKE-PATHNAME when prepended with the flag value.
   Directory components with an empty name or the name . are removed.
   Any directory named .. is read as DOT-DOT, or :BACK if it's NIL (not :UP).
A last-component, either a file-namestring including type extension,
   or NIL in the case of a directory pathname.
A flag that is true iff the unix-style-pathname was just
   a file-namestring without / path specification.
ENSURE-DIRECTORY forces the namestring to be interpreted as a directory pathname:
the third return value will be NIL, and final component of the namestring
will be treated as part of the directory path.

An empty string is thus read as meaning a pathname object with all fields nil.

Note that : characters will NOT be interpreted as host specification.
Absolute pathnames are only appropriate on Unix-style systems.

The intention of this function is to support structured component names,
e.g., (:file \"foo/bar\"), which will be unpacked to relative pathnames.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SPLIT-NAME-TYPE))
(SYSTEM:FSET 'SPLIT-NAME-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 197) 
109407 '(FILENAME) "Split a filename into two values NAME and TYPE that are returned.
We assume filename has no directory component.
The last . if any separates name and type from from type,
except that if there is only one . and it is in first position,
the whole filename is the NAME with an empty type.
NAME is always a string.
For an empty type, *UNSPECIFIC-PATHNAME-TYPE* is returned.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-UNIX-NAMESTRING))
(SYSTEM:FSET 'PARSE-UNIX-NAMESTRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
198) 109407 '(NAME COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:TYPE DEFAULTS 
DOT-DOT ENSURE-DIRECTORY COMMON-LISP:&ALLOW-OTHER-KEYS) "Coerce NAME into a PATHNAME using standard Unix syntax.

Unix syntax is used whether or not the underlying system is Unix;
on such non-Unix systems it is only usable but for relative pathnames;
but especially to manipulate relative pathnames portably, it is of crucial
to possess a portable pathname syntax independent of the underlying OS.
This is what PARSE-UNIX-NAMESTRING provides, and why we use it in ASDF.

When given a PATHNAME object, just return it untouched.
When given NIL, just return NIL.
When given a non-null SYMBOL, first downcase its name and treat it as a string.
When given a STRING, portably decompose it into a pathname as below.

#\\/ separates directory components.

The last #\\/-separated substring is interpreted as follows:
1- If TYPE is :DIRECTORY or ENSURE-DIRECTORY is true,
 the string is made the last directory component, and NAME and TYPE are NIL.
 if the string is empty, it's the empty pathname with all slots NIL.
2- If TYPE is NIL, the substring is a file-namestring, and its NAME and TYPE
 are separated by SPLIT-NAME-TYPE.
3- If TYPE is a string, it is the given TYPE, and the whole string is the NAME.

Directory components with an empty name the name . are removed.
Any directory named .. is read as DOT-DOT,
which must be one of :BACK or :UP and defaults to :BACK.

HOST, DEVICE and VERSION components are taken from DEFAULTS,
which itself defaults to *NIL-PATHNAME*, also used if DEFAULTS is NIL.
No host or device can be specified in the string itself,
which makes it unsuitable for absolute pathnames outside Unix.

For relative pathnames, these components (and hence the defaults) won't matter
if you use MERGE-PATHNAMES* but will matter if you use MERGE-PATHNAMES,
which is an important reason to always use MERGE-PATHNAMES*.

Arbitrary keys are accepted, and the parse result is passed to ENSURE-PATHNAME
with those keys, removing TYPE DEFAULTS and DOT-DOT.
When you're manipulating pathnames that are supposed to make sense portably
even though the OS may not be Unixish, we recommend you use :WANT-RELATIVE T
to throw an error if the pathname is absolute")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UNIX-NAMESTRING))
(SYSTEM:FSET 'UNIX-NAMESTRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 199) 
109407 '(COMMON-LISP:PATHNAME) "Given a non-wild PATHNAME, return a Unix-style namestring for it.
If the PATHNAME is NIL or a STRING, return it unchanged.

This only considers the DIRECTORY, NAME and TYPE components of the pathname.
This is a portable solution for representing relative pathnames,
But unless you are running on a Unix system, it is not a general solution
to representing native pathnames.

An error is signaled if the argument is not NULL, a STRING or a PATHNAME,
or if it is a PATHNAME but some of its components are not recognized.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SUBPATHNAME))
(SYSTEM:FSET 'SUBPATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 203) 118134 
'(COMMON-LISP:PATHNAME SUBPATH COMMON-LISP:&KEY COMMON-LISP:TYPE) "This function takes a PATHNAME and a SUBPATH and a TYPE.
If SUBPATH is already a PATHNAME object (not namestring),
and is an absolute pathname at that, it is returned unchanged;
otherwise, SUBPATH is turned into a relative pathname with given TYPE
as per PARSE-UNIX-NAMESTRING with :WANT-RELATIVE T :TYPE TYPE,
then it is merged with the PATHNAME-DIRECTORY-PATHNAME of PATHNAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SUBPATHNAME*))
(SYSTEM:FSET 'SUBPATHNAME* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 204) 118134 
'(COMMON-LISP:PATHNAME SUBPATH COMMON-LISP:&KEY COMMON-LISP:TYPE) "returns NIL if the base pathname is NIL, otherwise like SUBPATHNAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PATHNAME-ROOT))
(SYSTEM:FSET 'PATHNAME-ROOT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 205) 
118134 '(COMMON-LISP:PATHNAME) "return the root directory for the host and device of given PATHNAME")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PATHNAME-HOST-PATHNAME))
(SYSTEM:FSET 'PATHNAME-HOST-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
206) 118134 '(COMMON-LISP:PATHNAME) "return a pathname with the same host as given PATHNAME, and all other fields NIL")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-ABSOLUTE-PATHNAME))
(SYSTEM:FSET 'ENSURE-ABSOLUTE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
207) 118134 '(PATH COMMON-LISP:&OPTIONAL DEFAULTS (ON-ERROR 'COMMON-LISP:ERROR)) 
"Given a pathname designator PATH, return an absolute pathname as specified by PATH
considering the DEFAULTS, or, if not possible, use CALL-FUNCTION on the specified ON-ERROR behavior,
with a format control-string and other arguments as arguments")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SUBPATHP))
(SYSTEM:FSET 'SUBPATHP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 208) 118134 
'(MAYBE-SUBPATH BASE-PATHNAME) "if MAYBE-SUBPATH is a pathname that is under BASE-PATHNAME, return a pathname object that
when used with MERGE-PATHNAMES* with defaults BASE-PATHNAME, returns MAYBE-SUBPATH.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENOUGH-PATHNAME))
(SYSTEM:FSET 'ENOUGH-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 209) 
118134 '(MAYBE-SUBPATH BASE-PATHNAME) "if MAYBE-SUBPATH is a pathname that is under BASE-PATHNAME, return a pathname object that
when used with MERGE-PATHNAMES* with defaults BASE-PATHNAME, returns MAYBE-SUBPATH.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-ENOUGH-PATHNAME))
(SYSTEM:FSET 'CALL-WITH-ENOUGH-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
210) 118134 '(MAYBE-SUBPATH DEFAULTS-PATHNAME THUNK) "In a context where *DEFAULT-PATHNAME-DEFAULTS* is bound to DEFAULTS-PATHNAME (if not null,
or else to its current value), call THUNK with ENOUGH-PATHNAME for MAYBE-SUBPATH
given DEFAULTS-PATHNAME as a base pathname.")
(SYSTEM:FSET 'WITH-ENOUGH-PATHNAME (SYSTEM:MAKE-MACRO 'WITH-ENOUGH-PATHNAME (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 211)) 118134 '((PATHNAME-VAR COMMON-LISP:&KEY (COMMON-LISP:PATHNAME 
PATHNAME-VAR) (DEFAULTS COMMON-LISP:*DEFAULT-PATHNAME-DEFAULTS*)) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:DEFPARAMETER *WILD* (COMMON-LISP:OR :WILD) "Wild component for use with MAKE-PATHNAME")
(COMMON-LISP:DEFPARAMETER *WILD-DIRECTORY-COMPONENT* (COMMON-LISP:OR :WILD) "Wild directory component for use with MAKE-PATHNAME")
(COMMON-LISP:DEFPARAMETER *WILD-INFERIORS-COMPONENT* (COMMON-LISP:OR :WILD-INFERIORS) 
"Wild-inferiors directory component for use with MAKE-PATHNAME")
(COMMON-LISP:DEFPARAMETER *WILD-FILE* (COMMON-LISP:MAKE-PATHNAME :DIRECTORY COMMON-LISP:NIL 
:NAME *WILD* :TYPE *WILD* :VERSION (COMMON-LISP:OR)) "A pathname object with wildcards for matching any file in a given directory")
(COMMON-LISP:DEFPARAMETER *WILD-DIRECTORY* (MAKE-PATHNAME* :DIRECTORY (SYSTEM::BACKQ-LIST 
':RELATIVE *WILD-DIRECTORY-COMPONENT*) :NAME COMMON-LISP:NIL :TYPE COMMON-LISP:NIL 
:VERSION COMMON-LISP:NIL) "A pathname object with wildcards for matching any subdirectory")
(COMMON-LISP:DEFPARAMETER *WILD-INFERIORS* (MAKE-PATHNAME* :DIRECTORY (SYSTEM::BACKQ-LIST 
':RELATIVE *WILD-INFERIORS-COMPONENT*) :NAME COMMON-LISP:NIL :TYPE COMMON-LISP:NIL 
:VERSION COMMON-LISP:NIL) "A pathname object with wildcards for matching any recursive subdirectory")
(COMMON-LISP:DEFPARAMETER *WILD-PATH* (MERGE-PATHNAMES* *WILD-FILE* *WILD-INFERIORS*) 
"A pathname object with wildcards for matching any file in any recursive subdirectory")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE WILDEN))
(SYSTEM:FSET 'WILDEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 212) 123229 
'(PATH) "From a pathname, return a wildcard pathname matching any file in any subdirectory of given pathname's directory")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RELATIVIZE-DIRECTORY-COMPONENT))
(SYSTEM:FSET 'RELATIVIZE-DIRECTORY-COMPONENT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
213) 124683 '(DIRECTORY-COMPONENT) "Given the DIRECTORY-COMPONENT of a pathname, return an otherwise similar relative directory component")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RELATIVIZE-PATHNAME-DIRECTORY))
(SYSTEM:FSET 'RELATIVIZE-PATHNAME-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
214) 124683 '(PATHSPEC) "Given a PATHNAME, return a relative pathname with otherwise the same components")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORY-SEPARATOR-FOR-HOST))
(SYSTEM:FSET 'DIRECTORY-SEPARATOR-FOR-HOST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
215) 124683 '(COMMON-LISP:&OPTIONAL (COMMON-LISP:PATHNAME COMMON-LISP:*DEFAULT-PATHNAME-DEFAULTS*)) 
"Given a PATHNAME, return the character used to delimit directory names on this host and device.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORIZE-PATHNAME-HOST-DEVICE))
(SYSTEM:FSET 'DIRECTORIZE-PATHNAME-HOST-DEVICE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
216) 124683 '(COMMON-LISP:PATHNAME) "Given a PATHNAME, return a pathname that has representations of its HOST and DEVICE components
added to its DIRECTORY component. This is useful for output translations.")
(UNDEFINE-FUNCTION 'TRANSLATE-PATHNAME*)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRANSLATE-PATHNAME*))
(SYSTEM:FSET 'TRANSLATE-PATHNAME* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
218) 124683 '(PATH ABSOLUTE-SOURCE DESTINATION COMMON-LISP:&OPTIONAL ROOT SOURCE) 
"A wrapper around TRANSLATE-PATHNAME to be used by the ASDF output-translations facility.
PATH is the pathname to be translated.
ABSOLUTE-SOURCE is an absolute pathname to use as source for translate-pathname,
DESTINATION is either a function, to be called with PATH and ABSOLUTE-SOURCE,
or a relative pathname, to be merged with ROOT and used as destination for translate-pathname
or an absolute pathname, to be used as destination for translate-pathname.
In that last case, if ROOT is non-NIL, PATH is first transformated by DIRECTORIZE-PATHNAME-HOST-DEVICE.")
(COMMON-LISP:DEFVAR *OUTPUT-TRANSLATION-FUNCTION* 'COMMON-LISP:IDENTITY "Hook for output translations.

This function needs to be idempotent, so that actions can work
whether their inputs were translated or not,
which they will be if we are composing operations. e.g. if some
create-lisp-op creates a lisp file from some higher-level input,
you need to still be able to use compile-op on that lisp file.")
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/FILESYSTEM :NICKNAMES (:ASDF/FILESYSTEM) 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY 
:UIOP/OS :UIOP/PATHNAME) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#186? #187? #188? #189? #190? #191? #192? #193? 
#194? #195? #196? #197? #198? #199? #200? #201? #202? #203? #204? #205? #206? #207? 
#208? #209? #210? #211? #212? #213? #214? #215? #216? #217?) :INTERN COMMON-LISP:NIL 
:RECYCLE (:UIOP/FILESYSTEM :ASDF/PATHNAME :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/FILESYSTEM")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NATIVE-NAMESTRING))
(SYSTEM:FSET 'NATIVE-NAMESTRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 219) 
131022 '(X) "From a non-wildcard CL pathname, a return namestring suitable for passing to the operating system")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-NATIVE-NAMESTRING))
(SYSTEM:FSET 'PARSE-NATIVE-NAMESTRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
220) 131022 '(COMMON-LISP:STRING COMMON-LISP:&REST CONSTRAINTS COMMON-LISP:&KEY ENSURE-DIRECTORY 
COMMON-LISP:&ALLOW-OTHER-KEYS) "From a native namestring suitable for use by the operating system, return
a CL pathname satisfying all the specified constraints as per ENSURE-PATHNAME")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRUENAME*))
(SYSTEM:FSET 'TRUENAME* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 221) 132537 
'(P) "Nicer variant of TRUENAME that plays well with NIL and avoids logical pathname contexts")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAFE-FILE-WRITE-DATE))
(SYSTEM:FSET 'SAFE-FILE-WRITE-DATE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
223) 132537 '(COMMON-LISP:PATHNAME) "Safe variant of FILE-WRITE-DATE that may return NIL rather than raise an error.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROBE-FILE*))
(SYSTEM:FSET 'PROBE-FILE* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 225) 132537 
'(P COMMON-LISP:&KEY COMMON-LISP:TRUENAME) "when given a pathname P (designated by a string as per PARSE-NAMESTRING),
probes the filesystem for a file or directory with given pathname.
If it exists, return its truename is ENSURE-PATHNAME is true,
or the original (parsed) pathname if it is false (the default).")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORY-EXISTS-P))
(SYSTEM:FSET 'DIRECTORY-EXISTS-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
228) 132537 '(X) "Is X the name of a directory that exists on the filesystem?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FILE-EXISTS-P))
(SYSTEM:FSET 'FILE-EXISTS-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 229) 
132537 '(X) "Is X the name of a file that exists on the filesystem?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORY*))
(SYSTEM:FSET 'DIRECTORY* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 230) 132537 
'(PATHNAME-SPEC COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Return a list of the entries in a directory by calling DIRECTORY.
Try to override the defaults to not resolving symlinks, if implementation allows.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FILTER-LOGICAL-DIRECTORY-RESULTS))
(SYSTEM:FSET 'FILTER-LOGICAL-DIRECTORY-RESULTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
231) 132537 '(COMMON-LISP:DIRECTORY ENTRIES MERGER) "Given ENTRIES in a DIRECTORY, remove if the directory is logical
the entries which are physical yet when transformed by MERGER have a different TRUENAME.
This function is used as a helper to DIRECTORY-FILES to avoid invalid entries when using logical-pathnames.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORY-FILES))
(SYSTEM:FSET 'DIRECTORY-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 233) 
132537 '(COMMON-LISP:DIRECTORY COMMON-LISP:&OPTIONAL (PATTERN *WILD-FILE*)) "Return a list of the files in a directory according to the PATTERN.
Subdirectories should NOT be returned.
  PATTERN defaults to a pattern carefully chosen based on the implementation;
override the default at your own risk.
  DIRECTORY-FILES tries NOT to resolve symlinks if the implementation
permits this.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SUBDIRECTORIES))
(SYSTEM:FSET 'SUBDIRECTORIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 236) 
132537 '(COMMON-LISP:DIRECTORY) "Given a DIRECTORY pathname designator, return a list of the subdirectories under it.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COLLECT-SUB*DIRECTORIES))
(SYSTEM:FSET 'COLLECT-SUB*DIRECTORIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
238) 132537 '(COMMON-LISP:DIRECTORY COLLECTP RECURSEP COLLECTOR) "Given a DIRECTORY, call-function the COLLECTOR function designator
on the directory if COLLECTP returns true when CALL-FUNCTION'ed with the directory,
and recurse each of its subdirectories on which the RECURSEP returns true when CALL-FUNCTION'ed with them.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRUENAMIZE))
(SYSTEM:FSET 'TRUENAMIZE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 239) 144058 
'(COMMON-LISP:PATHNAME) "Resolve as much of a pathname as possible")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-SYMLINKS))
(SYSTEM:FSET 'RESOLVE-SYMLINKS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 242) 
144058 '(PATH) "Do a best effort at resolving symlinks in PATH, returning a partially or totally resolved PATH.")
(COMMON-LISP:DEFVAR *RESOLVE-SYMLINKS* COMMON-LISP:T "Determine whether or not ASDF resolves symlinks when defining systems.
Defaults to T.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-SYMLINKS*))
(SYSTEM:FSET 'RESOLVE-SYMLINKS* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 243) 
144058 '(PATH) "RESOLVE-SYMLINKS in PATH iff *RESOLVE-SYMLINKS* is T (the default).")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-PATHNAME))
(SYSTEM:FSET 'ENSURE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 244) 
146243 '(COMMON-LISP:PATHNAME COMMON-LISP:&KEY ON-ERROR DEFAULTS COMMON-LISP:TYPE 
DOT-DOT COMMON-LISP:NAMESTRING WANT-PATHNAME WANT-LOGICAL WANT-PHYSICAL ENSURE-PHYSICAL 
WANT-RELATIVE WANT-ABSOLUTE ENSURE-ABSOLUTE ENSURE-SUBPATH WANT-NON-WILD WANT-WILD 
WILDEN WANT-FILE WANT-DIRECTORY ENSURE-DIRECTORY WANT-EXISTING COMMON-LISP:ENSURE-DIRECTORIES-EXIST 
COMMON-LISP:TRUENAME RESOLVE-SYMLINKS TRUENAMIZE COMMON-LISP:&AUX (P COMMON-LISP:PATHNAME)) 
"Coerces its argument into a PATHNAME,
optionally doing some transformations and checking specified constraints.

If the argument is NIL, then NIL is returned unless the WANT-PATHNAME constraint is specified.

If the argument is a STRING, it is first converted to a pathname via
PARSE-UNIX-NAMESTRING, PARSE-NAMESTRING or PARSE-NATIVE-NAMESTRING respectively
depending on the NAMESTRING argument being :UNIX, :LISP or :NATIVE respectively,
or else by using CALL-FUNCTION on the NAMESTRING argument;
if :UNIX is specified (or NIL, the default, which specifies the same thing),
then PARSE-UNIX-NAMESTRING it is called with the keywords
DEFAULTS TYPE DOT-DOT ENSURE-DIRECTORY WANT-RELATIVE, and
the result is optionally merged into the DEFAULTS if ENSURE-ABSOLUTE is true.

The pathname passed or resulting from parsing the string
is then subjected to all the checks and transformations below are run.

Each non-nil constraint argument can be one of the symbols T, ERROR, CERROR or IGNORE.
The boolean T is an alias for ERROR.
ERROR means that an error will be raised if the constraint is not satisfied.
CERROR means that an continuable error will be raised if the constraint is not satisfied.
IGNORE means just return NIL instead of the pathname.

The ON-ERROR argument, if not NIL, is a function designator (as per CALL-FUNCTION)
that will be called with the the following arguments:
a generic format string for ensure pathname, the pathname,
the keyword argument corresponding to the failed check or transformation,
a format string for the reason ENSURE-PATHNAME failed,
and a list with arguments to that format string.
If ON-ERROR is NIL, ERROR is used instead, which does the right thing.
You could also pass (CERROR \"CONTINUE DESPITE FAILED CHECK\").

The transformations and constraint checks are done in this order,
which is also the order in the lambda-list:

WANT-PATHNAME checks that pathname (after parsing if needed) is not null.
Otherwise, if the pathname is NIL, ensure-pathname returns NIL.
WANT-LOGICAL checks that pathname is a LOGICAL-PATHNAME
WANT-PHYSICAL checks that pathname is not a LOGICAL-PATHNAME
ENSURE-PHYSICAL ensures that pathname is physical via TRANSLATE-LOGICAL-PATHNAME
WANT-RELATIVE checks that pathname has a relative directory component
WANT-ABSOLUTE checks that pathname does have an absolute directory component
ENSURE-ABSOLUTE merges with the DEFAULTS, then checks again
that the result absolute is an absolute pathname indeed.
ENSURE-SUBPATH checks that the pathname is a subpath of the DEFAULTS.
WANT-FILE checks that pathname has a non-nil FILE component
WANT-DIRECTORY checks that pathname has nil FILE and TYPE components
ENSURE-DIRECTORY uses ENSURE-DIRECTORY-PATHNAME to interpret
any file and type components as being actually a last directory component.
WANT-NON-WILD checks that pathname is not a wild pathname
WANT-WILD checks that pathname is a wild pathname
WILDEN merges the pathname with **/*.*.* if it is not wild
WANT-EXISTING checks that a file (or directory) exists with that pathname.
ENSURE-DIRECTORIES-EXIST creates any parent directory with ENSURE-DIRECTORIES-EXIST.
TRUENAME replaces the pathname by its truename, or errors if not possible.
RESOLVE-SYMLINKS replaces the pathname by a variant with symlinks resolved by RESOLVE-SYMLINKS.
TRUENAMIZE uses TRUENAMIZE to resolve as many symlinks as possible.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GET-PATHNAME-DEFAULTS))
(SYSTEM:FSET 'GET-PATHNAME-DEFAULTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
246) 154093 '(COMMON-LISP:&OPTIONAL (DEFAULTS COMMON-LISP:*DEFAULT-PATHNAME-DEFAULTS*)) 
"Find the actual DEFAULTS to use for pathnames, including
resolving them with respect to GETCWD if the DEFAULTS were relative")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-CURRENT-DIRECTORY))
(SYSTEM:FSET 'CALL-WITH-CURRENT-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
247) 154093 '(DIR THUNK) "call the THUNK in a context where the current directory was changed to DIR, if not NIL.
Note that this operation is usually NOT thread-safe.")
(SYSTEM:FSET 'WITH-CURRENT-DIRECTORY (SYSTEM:MAKE-MACRO 'WITH-CURRENT-DIRECTORY (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 248)) 154093 '((COMMON-LISP:&OPTIONAL DIR) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INTER-DIRECTORY-SEPARATOR))
(SYSTEM:FSET 'INTER-DIRECTORY-SEPARATOR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
249) 155158 'COMMON-LISP:NIL "What character does the current OS conventionally uses to separate directories?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SPLIT-NATIVE-PATHNAMES-STRING))
(SYSTEM:FSET 'SPLIT-NATIVE-PATHNAMES-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
250) 155158 '(COMMON-LISP:STRING COMMON-LISP:&REST CONSTRAINTS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Given a string of pathnames specified in native OS syntax, separate them in a list,
check constraints and normalize each one as per ENSURE-PATHNAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETENV-PATHNAME))
(SYSTEM:FSET 'GETENV-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 251) 
155158 '(X COMMON-LISP:&REST CONSTRAINTS COMMON-LISP:&KEY ENSURE-DIRECTORY WANT-DIRECTORY 
ON-ERROR COMMON-LISP:&ALLOW-OTHER-KEYS) "Extract a pathname from a user-configured environment variable, as per native OS,
check constraints and normalize as per ENSURE-PATHNAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETENV-PATHNAMES))
(SYSTEM:FSET 'GETENV-PATHNAMES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 252) 
155158 '(X COMMON-LISP:&REST CONSTRAINTS COMMON-LISP:&KEY ON-ERROR COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Extract a list of pathname from a user-configured environment variable, as per native OS,
check constraints and normalize each one as per ENSURE-PATHNAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETENV-ABSOLUTE-DIRECTORY))
(SYSTEM:FSET 'GETENV-ABSOLUTE-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
253) 155158 '(X) "Extract an absolute directory pathname from a user-configured environment variable,
as per native OS")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GETENV-ABSOLUTE-DIRECTORIES))
(SYSTEM:FSET 'GETENV-ABSOLUTE-DIRECTORIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
254) 155158 '(X) "Extract a list of absolute directories from a user-configured environment variable,
as per native OS")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LISP-IMPLEMENTATION-DIRECTORY))
(SYSTEM:FSET 'LISP-IMPLEMENTATION-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
255) 155158 '(COMMON-LISP:&KEY COMMON-LISP:TRUENAME) "Where are the system files of the current installation of the CL implementation?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LISP-IMPLEMENTATION-PATHNAME-P))
(SYSTEM:FSET 'LISP-IMPLEMENTATION-PATHNAME-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
256) 155158 '(COMMON-LISP:PATHNAME) "Is the PATHNAME under the current installation of the CL implementation?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-ALL-DIRECTORIES-EXIST))
(SYSTEM:FSET 'ENSURE-ALL-DIRECTORIES-EXIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
257) 158475 '(PATHNAMES) "Ensure that for every pathname in PATHNAMES, we ensure its directories exist")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RENAME-FILE-OVERWRITING-TARGET))
(SYSTEM:FSET 'RENAME-FILE-OVERWRITING-TARGET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
258) 158475 '(SOURCE TARGET) "Rename a file, overwriting any previous file with the TARGET name,
in an atomic way if the implementation allows.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DELETE-FILE-IF-EXISTS))
(SYSTEM:FSET 'DELETE-FILE-IF-EXISTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
259) 158475 '(X) "Delete a file X if it already exists")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DELETE-EMPTY-DIRECTORY))
(SYSTEM:FSET 'DELETE-EMPTY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
261) 158475 '(DIRECTORY-PATHNAME) "Delete an empty directory")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DELETE-DIRECTORY-TREE))
(SYSTEM:FSET 'DELETE-DIRECTORY-TREE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
262) 158475 '(DIRECTORY-PATHNAME COMMON-LISP:&KEY (VALIDATE COMMON-LISP:NIL VALIDATEP) 
(IF-DOES-NOT-EXIST :ERROR)) "Delete a directory including all its recursive contents, aka rm -rf.

To reduce the risk of infortunate mistakes, DIRECTORY-PATHNAME must be
a physical non-wildcard directory pathname (not namestring).

If the directory does not exist, the IF-DOES-NOT-EXIST argument specifies what happens:
if it is :ERROR (the default), an error is signaled, whereas if it is :IGNORE, nothing is done.

Furthermore, before any deletion is attempted, the DIRECTORY-PATHNAME must pass
the validation function designated (as per ENSURE-FUNCTION) by the VALIDATE keyword argument
which in practice is thus compulsory, and validates by returning a non-NIL result.
If you're suicidal or extremely confident, just use :VALIDATE T.")
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/STREAM :NICKNAMES (:ASDF/STREAM) :DOCUMENTATION 
COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY :UIOP/OS :UIOP/PATHNAME 
:UIOP/FILESYSTEM) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#229? #230? #231? #232? #233? #234? #235? #236? 
#237? #238? #239? #240? #241? #242? #243? #244? #245? #246? #247? #248? #249? #250? 
#251? #252? #253? #254? #255? #256? #257? #258? #259? #260? #261? #262? #263? #264? 
#265? #266? #267? #268? #269? #270? #271? #272? #273? #274? #275? #276? #277? #278? 
#279? #280? #281? #282? #283? #284? #285? #286? #287? #288? #289? #290? #291?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:UIOP/STREAM :ASDF/STREAM :ASDF) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/STREAM")
(COMMON-LISP:DEFVAR *DEFAULT-STREAM-ELEMENT-TYPE* (COMMON-LISP:OR 'COMMON-LISP:CHARACTER 
:DEFAULT) "default element-type for open (depends on the current CL implementation)")
(COMMON-LISP:DEFVAR *STDIN* COMMON-LISP:*STANDARD-INPUT* "the original standard input stream at startup")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SETUP-STDIN))
(SYSTEM:FSET 'SETUP-STDIN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 264) 166085 
'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *STDOUT* COMMON-LISP:*STANDARD-OUTPUT* "the original standard output stream at startup")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SETUP-STDOUT))
(SYSTEM:FSET 'SETUP-STDOUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 265) 166085 
'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *STDERR* COMMON-LISP:*ERROR-OUTPUT* "the original error output stream at startup")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SETUP-STDERR))
(SYSTEM:FSET 'SETUP-STDERR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 266) 166085 
'COMMON-LISP:NIL COMMON-LISP:NIL)
(SETUP-STDIN)
(SETUP-STDOUT)
(SETUP-STDERR)
(COMMON-LISP:DEFPARAMETER *DEFAULT-ENCODING* (COMMON-LISP:OR (IF-LET (PREVIOUS (COMMON-LISP:AND 
(COMMON-LISP:BOUNDP '*DEFAULT-ENCODING*) (COMMON-LISP:SYMBOL-VALUE '*DEFAULT-ENCODING*))) 
(COMMON-LISP:UNLESS (COMMON-LISP:EQ PREVIOUS :DEFAULT) PREVIOUS)) :UTF-8) "Default encoding for source files.
The default value :utf-8 is the portable thing.
The legacy behavior was :default.
If you (asdf:load-system :asdf-encodings) then
you will have autodetection via *encoding-detection-hook* below,
reading emacs-style -*- coding: utf-8 -*- specifications,
and falling back to utf-8 or latin1 if nothing is specified.")
(COMMON-LISP:DEFPARAMETER *UTF-8-EXTERNAL-FORMAT* (COMMON-LISP:IF (FEATUREP :ASDF-UNICODE) 
(COMMON-LISP:OR :UTF-8) :DEFAULT) "Default :external-format argument to pass to CL:OPEN and also
CL:LOAD or CL:COMPILE-FILE to best process a UTF-8 encoded file.
On modern implementations, this will decode UTF-8 code points as CL characters.
On legacy implementations, it may fall back on some 8-bit encoding,
with non-ASCII code points being read as several CL characters;
hopefully, if done consistently, that won't affect program behavior too much.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ALWAYS-DEFAULT-ENCODING))
(SYSTEM:FSET 'ALWAYS-DEFAULT-ENCODING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
267) 167561 '(COMMON-LISP:PATHNAME) "Trivial function to use as *encoding-detection-hook*,
always 'detects' the *default-encoding*")
(COMMON-LISP:DEFVAR *ENCODING-DETECTION-HOOK* (COMMON-LISP:FUNCTION ALWAYS-DEFAULT-ENCODING) 
"Hook for an extension to define a function to automatically detect a file's encoding")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DETECT-ENCODING))
(SYSTEM:FSET 'DETECT-ENCODING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 268) 
167561 '(COMMON-LISP:PATHNAME) "Detects the encoding of a specified file, going through user-configurable hooks")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DEFAULT-ENCODING-EXTERNAL-FORMAT))
(SYSTEM:FSET 'DEFAULT-ENCODING-EXTERNAL-FORMAT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
269) 167561 '(ENCODING) "Default, ignorant, function to transform a character ENCODING as a
portable keyword to an implementation-dependent EXTERNAL-FORMAT specification.
Load system ASDF-ENCODINGS to hook in a better one.")
(COMMON-LISP:DEFVAR *ENCODING-EXTERNAL-FORMAT-HOOK* (COMMON-LISP:FUNCTION DEFAULT-ENCODING-EXTERNAL-FORMAT) 
"Hook for an extension (e.g. ASDF-ENCODINGS) to define a better mapping
from non-default encodings to and implementation-defined external-format's")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENCODING-EXTERNAL-FORMAT))
(SYSTEM:FSET 'ENCODING-EXTERNAL-FORMAT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
270) 167561 '(ENCODING) "Transform a portable ENCODING keyword to an implementation-dependent EXTERNAL-FORMAT,
going through all the proper hooks.")
(COMMON-LISP:DEFVAR *STANDARD-READTABLE* (COMMON-LISP:WITH-STANDARD-IO-SYNTAX COMMON-LISP:*READTABLE*) 
"The standard readtable, implementing the syntax specified by the CLHS.
It must never be modified, though only good implementations will even enforce that.")
(SYSTEM:FSET 'WITH-SAFE-IO-SYNTAX (SYSTEM:MAKE-MACRO 'WITH-SAFE-IO-SYNTAX (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 271)) 170652 '((COMMON-LISP:&KEY (COMMON-LISP:PACKAGE :CL)) 
COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-SAFE-IO-SYNTAX))
(SYSTEM:FSET 'CALL-WITH-SAFE-IO-SYNTAX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
272) 170652 '(THUNK COMMON-LISP:&KEY (COMMON-LISP:PACKAGE :CL)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAFE-READ-FROM-STRING))
(SYSTEM:FSET 'SAFE-READ-FROM-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
274) 170652 '(COMMON-LISP:STRING COMMON-LISP:&KEY (COMMON-LISP:PACKAGE :CL) (EOF-ERROR-P 
COMMON-LISP:T) EOF-VALUE (START 0) END PRESERVE-WHITESPACE) "Read from STRING using a safe syntax, as per WITH-SAFE-IO-SYNTAX")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-OUTPUT-FILE))
(SYSTEM:FSET 'CALL-WITH-OUTPUT-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
276) 171800 '(COMMON-LISP:PATHNAME THUNK COMMON-LISP:&KEY (ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) 
(EXTERNAL-FORMAT *UTF-8-EXTERNAL-FORMAT*) (IF-EXISTS :ERROR) (IF-DOES-NOT-EXIST :CREATE)) 
"Open FILE for input with given recognizes options, call THUNK with the resulting stream.
Other keys are accepted but discarded.")
(SYSTEM:FSET 'WITH-OUTPUT-FILE (SYSTEM:MAKE-MACRO 'WITH-OUTPUT-FILE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 277)) 171800 '((VAR COMMON-LISP:PATHNAME COMMON-LISP:&REST KEYS 
COMMON-LISP:&KEY ELEMENT-TYPE EXTERNAL-FORMAT IF-EXISTS IF-DOES-NOT-EXIST) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-OUTPUT))
(SYSTEM:FSET 'CALL-WITH-OUTPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 278) 
171800 '(OUTPUT COMMON-LISP:FUNCTION COMMON-LISP:&KEY KEYS) "Calls FUNCTION with an actual stream argument,
behaving like FORMAT with respect to how stream designators are interpreted:
If OUTPUT is a STREAM, use it as the stream.
If OUTPUT is NIL, use a STRING-OUTPUT-STREAM as the stream, and return the resulting string.
If OUTPUT is T, use *STANDARD-OUTPUT* as the stream.
If OUTPUT is a STRING with a fill-pointer, use it as a string-output-stream.
If OUTPUT is a PATHNAME, open the file and write to it, passing KEYS to WITH-OUTPUT-FILE
-- this latter as an extension since ASDF 3.1.
Otherwise, signal an error.")
(SYSTEM:FSET 'WITH-OUTPUT (SYSTEM:MAKE-MACRO 'WITH-OUTPUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 279)) 171800 '((OUTPUT-VAR COMMON-LISP:&OPTIONAL (VALUE OUTPUT-VAR)) 
COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OUTPUT-STRING))
(SYSTEM:FSET 'OUTPUT-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 280) 
171800 '(COMMON-LISP:STRING COMMON-LISP:&OPTIONAL OUTPUT) "If the desired OUTPUT is not NIL, print the string to the output; otherwise return the string")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-INPUT-FILE))
(SYSTEM:FSET 'CALL-WITH-INPUT-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
282) 174577 '(COMMON-LISP:PATHNAME THUNK COMMON-LISP:&KEY (ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) 
(EXTERNAL-FORMAT *UTF-8-EXTERNAL-FORMAT*) (IF-DOES-NOT-EXIST :ERROR)) "Open FILE for input with given recognizes options, call THUNK with the resulting stream.
Other keys are accepted but discarded.")
(SYSTEM:FSET 'WITH-INPUT-FILE (SYSTEM:MAKE-MACRO 'WITH-INPUT-FILE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 283)) 174577 '((VAR COMMON-LISP:PATHNAME COMMON-LISP:&REST KEYS 
COMMON-LISP:&KEY ELEMENT-TYPE EXTERNAL-FORMAT IF-DOES-NOT-EXIST) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-INPUT))
(SYSTEM:FSET 'CALL-WITH-INPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 284) 
174577 '(INPUT COMMON-LISP:FUNCTION COMMON-LISP:&KEY KEYS) "Calls FUNCTION with an actual stream argument, interpreting
stream designators like READ, but also coercing strings to STRING-INPUT-STREAM,
and PATHNAME to FILE-STREAM.
If INPUT is a STREAM, use it as the stream.
If INPUT is NIL, use a *STANDARD-INPUT* as the stream.
If INPUT is T, use *TERMINAL-IO* as the stream.
If INPUT is a STRING, use it as a string-input-stream.
If INPUT is a PATHNAME, open it, passing KEYS to WITH-INPUT-FILE
-- the latter is an extension since ASDF 3.1.
Otherwise, signal an error.")
(SYSTEM:FSET 'WITH-INPUT (SYSTEM:MAKE-MACRO 'WITH-INPUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 285)) 174577 '((INPUT-VAR COMMON-LISP:&OPTIONAL (VALUE INPUT-VAR)) 
COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NULL-DEVICE-PATHNAME))
(SYSTEM:FSET 'NULL-DEVICE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
286) 176831 'COMMON-LISP:NIL "Pathname to a bit bucket device that discards any information written to it
and always returns EOF when read from")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-NULL-INPUT))
(SYSTEM:FSET 'CALL-WITH-NULL-INPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
287) 176831 '(FUN COMMON-LISP:&REST KEYS COMMON-LISP:&KEY ELEMENT-TYPE EXTERNAL-FORMAT 
IF-DOES-NOT-EXIST) "Call FUN with an input stream from the null device; pass keyword arguments to OPEN.")
(SYSTEM:FSET 'WITH-NULL-INPUT (SYSTEM:MAKE-MACRO 'WITH-NULL-INPUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 288)) 176831 '((VAR COMMON-LISP:&REST KEYS COMMON-LISP:&KEY 
ELEMENT-TYPE EXTERNAL-FORMAT IF-DOES-NOT-EXIST) COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-NULL-OUTPUT))
(SYSTEM:FSET 'CALL-WITH-NULL-OUTPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
289) 176831 '(FUN COMMON-LISP:&KEY (ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) (EXTERNAL-FORMAT 
*UTF-8-EXTERNAL-FORMAT*) (IF-EXISTS :OVERWRITE) (IF-DOES-NOT-EXIST :ERROR)) "Call FUN with an output stream to the null device; pass keyword arguments to OPEN.")
(SYSTEM:FSET 'WITH-NULL-OUTPUT (SYSTEM:MAKE-MACRO 'WITH-NULL-OUTPUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 290)) 176831 '((VAR COMMON-LISP:&REST KEYS COMMON-LISP:&KEY 
ELEMENT-TYPE EXTERNAL-FORMAT IF-DOES-NOT-EXIST IF-EXISTS) COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FINISH-OUTPUTS))
(SYSTEM:FSET 'FINISH-OUTPUTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 291) 
178995 '(COMMON-LISP:&REST STREAMS) "Finish output on the main output streams as well as any specified one.
Useful for portably flushing I/O before user input or program exit.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FORMAT!))
(SYSTEM:FSET 'FORMAT! (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 293) 178995 
'(COMMON-LISP:STREAM COMMON-LISP:FORMAT COMMON-LISP:&REST ARGS) "Just like format, but call finish-outputs before and after the output.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAFE-FORMAT!))
(SYSTEM:FSET 'SAFE-FORMAT! (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 294) 178995 
'(COMMON-LISP:STREAM COMMON-LISP:FORMAT COMMON-LISP:&REST ARGS) "Variant of FORMAT that is safe against both
dangerous syntax configuration and errors while printing.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COPY-STREAM-TO-STREAM))
(SYSTEM:FSET 'COPY-STREAM-TO-STREAM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
297) 180043 '(INPUT OUTPUT COMMON-LISP:&KEY ELEMENT-TYPE BUFFER-SIZE LINEWISE PREFIX) 
"Copy the contents of the INPUT stream into the OUTPUT stream.
If LINEWISE is true, then read and copy the stream line by line, with an optional PREFIX.
Otherwise, using WRITE-SEQUENCE using a buffer of size BUFFER-SIZE.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CONCATENATE-FILES))
(SYSTEM:FSET 'CONCATENATE-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 298) 
180043 '(INPUTS OUTPUT) "create a new OUTPUT file the contents of which a the concatenate of the INPUTS files.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COPY-FILE))
(SYSTEM:FSET 'COPY-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 299) 180043 
'(INPUT OUTPUT) "Copy contents of the INPUT file to the OUTPUT file")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SLURP-STREAM-STRING))
(SYSTEM:FSET 'SLURP-STREAM-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
300) 180043 '(INPUT COMMON-LISP:&KEY (ELEMENT-TYPE 'COMMON-LISP:CHARACTER) STRIPPED) 
"Read the contents of the INPUT stream as a string")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SLURP-STREAM-LINES))
(SYSTEM:FSET 'SLURP-STREAM-LINES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
301) 180043 '(INPUT COMMON-LISP:&KEY COMMON-LISP:COUNT) "Read the contents of the INPUT stream as a list of lines, return those lines.

Note: relies on the Lisp's READ-LINE, but additionally removes any remaining CR
from the line-ending if the file or stream had CR+LF but Lisp only removed LF.

Read no more than COUNT lines.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SLURP-STREAM-LINE))
(SYSTEM:FSET 'SLURP-STREAM-LINE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 302) 
180043 '(INPUT COMMON-LISP:&KEY (AT 0)) "Read the contents of the INPUT stream as a list of lines,
then return the ACCESS-AT of that list of lines using the AT specifier.
PATH defaults to 0, i.e. return the first line.
PATH is typically an integer, or a list of an integer and a function.
If PATH is NIL, it will return all the lines in the file.

The stream will not be read beyond the Nth lines,
where N is the index specified by path
if path is either an integer or a list that starts with an integer.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SLURP-STREAM-FORMS))
(SYSTEM:FSET 'SLURP-STREAM-FORMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
303) 180043 '(INPUT COMMON-LISP:&KEY COMMON-LISP:COUNT) "Read the contents of the INPUT stream as a list of forms,
and return those forms.

If COUNT is null, read to the end of the stream;
if COUNT is an integer, stop after COUNT forms were read.

BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SLURP-STREAM-FORM))
(SYSTEM:FSET 'SLURP-STREAM-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 304) 
180043 '(INPUT COMMON-LISP:&KEY (AT 0)) "Read the contents of the INPUT stream as a list of forms,
then return the ACCESS-AT of these forms following the AT.
AT defaults to 0, i.e. return the first form.
AT is typically a list of integers.
If AT is NIL, it will return all the forms in the file.

The stream will not be read beyond the Nth form,
where N is the index specified by path,
if path is either an integer or a list that starts with an integer.

BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-FILE-STRING))
(SYSTEM:FSET 'READ-FILE-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 305) 
180043 '(FILE COMMON-LISP:&REST KEYS) "Open FILE with option KEYS, read its contents as a string")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-FILE-LINES))
(SYSTEM:FSET 'READ-FILE-LINES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 306) 
180043 '(FILE COMMON-LISP:&REST KEYS) "Open FILE with option KEYS, read its contents as a list of lines
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-FILE-LINE))
(SYSTEM:FSET 'READ-FILE-LINE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 307) 
180043 '(FILE COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (AT 0) COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Open input FILE with option KEYS (except AT),
and read its contents as per SLURP-STREAM-LINE with given AT specifier.
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-FILE-FORMS))
(SYSTEM:FSET 'READ-FILE-FORMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 309) 
180043 '(FILE COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:COUNT COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Open input FILE with option KEYS (except COUNT),
and read its contents as per SLURP-STREAM-FORMS with given COUNT.
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE READ-FILE-FORM))
(SYSTEM:FSET 'READ-FILE-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 311) 
180043 '(FILE COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (AT 0) COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Open input FILE with option KEYS (except AT),
and read its contents as per SLURP-STREAM-FORM with given AT specifier.
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAFE-READ-FILE-LINE))
(SYSTEM:FSET 'SAFE-READ-FILE-LINE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
313) 180043 '(COMMON-LISP:PATHNAME COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (COMMON-LISP:PACKAGE 
:CL) COMMON-LISP:&ALLOW-OTHER-KEYS) "Reads the specified line from the top of a file using a safe standardized syntax.
Extracts the line using READ-FILE-LINE,
within an WITH-SAFE-IO-SYNTAX using the specified PACKAGE.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAFE-READ-FILE-FORM))
(SYSTEM:FSET 'SAFE-READ-FILE-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
315) 180043 '(COMMON-LISP:PATHNAME COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (COMMON-LISP:PACKAGE 
:CL) COMMON-LISP:&ALLOW-OTHER-KEYS) "Reads the specified form from the top of a file using a safe standardized syntax.
Extracts the form using READ-FILE-FORM,
within an WITH-SAFE-IO-SYNTAX using the specified PACKAGE.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EVAL-INPUT))
(SYSTEM:FSET 'EVAL-INPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 317) 180043 
'(INPUT) "Portably read and evaluate forms from INPUT, return the last values.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EVAL-THUNK))
(SYSTEM:FSET 'EVAL-THUNK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 319) 180043 
'(THUNK) "Evaluate a THUNK of code:
If a function, FUNCALL it without arguments.
If a constant literal and not a sequence, return it.
If a cons or a symbol, EVAL it.
If a string, repeatedly read and evaluate from it, returning the last values.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STANDARD-EVAL-THUNK))
(SYSTEM:FSET 'STANDARD-EVAL-THUNK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
320) 180043 '(THUNK COMMON-LISP:&KEY (COMMON-LISP:PACKAGE :CL)) "Like EVAL-THUNK, but in a more standardized evaluation context.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PRINTLN))
(SYSTEM:FSET 'PRINTLN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 322) 188400 
'(X COMMON-LISP:&OPTIONAL (COMMON-LISP:STREAM COMMON-LISP:*STANDARD-OUTPUT*)) "Variant of PRINC that also calls TERPRI afterwards")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE WRITELN))
(SYSTEM:FSET 'WRITELN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 323) 188400 
'(X COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (COMMON-LISP:STREAM COMMON-LISP:*STANDARD-OUTPUT*) 
COMMON-LISP:&ALLOW-OTHER-KEYS) "Variant of WRITE that also calls TERPRI afterwards")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DEFAULT-TEMPORARY-DIRECTORY))
(SYSTEM:FSET 'DEFAULT-TEMPORARY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
324) 188825 'COMMON-LISP:NIL "Return a default directory to use for temporary files")
(COMMON-LISP:DEFVAR *TEMPORARY-DIRECTORY* COMMON-LISP:NIL "User-configurable location for temporary files")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TEMPORARY-DIRECTORY))
(SYSTEM:FSET 'TEMPORARY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
325) 188825 'COMMON-LISP:NIL "Return a directory to use for temporary files")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SETUP-TEMPORARY-DIRECTORY))
(SYSTEM:FSET 'SETUP-TEMPORARY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
326) 188825 'COMMON-LISP:NIL "Configure a default temporary directory to use.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-TEMPORARY-FILE))
(SYSTEM:FSET 'CALL-WITH-TEMPORARY-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
327) 188825 '(THUNK COMMON-LISP:&KEY (WANT-STREAM-P COMMON-LISP:T) (WANT-PATHNAME-P 
COMMON-LISP:T) (DIRECTION :IO) KEEP AFTER COMMON-LISP:DIRECTORY (COMMON-LISP:TYPE 
"tmp" COMMON-LISP:TYPEP) PREFIX (SUFFIX (COMMON-LISP:WHEN COMMON-LISP:TYPEP "-tmp")) 
(ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) (EXTERNAL-FORMAT *UTF-8-EXTERNAL-FORMAT*)) 
"Call a THUNK with stream and/or pathname arguments identifying a temporary file.

The temporary file's pathname will be based on concatenating
PREFIX (defaults to \"uiop\"), a random alphanumeric string,
and optional SUFFIX (defaults to \"-tmp\" if a type was provided)
and TYPE (defaults to \"tmp\", using a dot as separator if not NIL),
within DIRECTORY (defaulting to the TEMPORARY-DIRECTORY) if the PREFIX isn't absolute.

The file will be open with specified DIRECTION (defaults to :IO),
ELEMENT-TYPE (defaults to *DEFAULT-STREAM-ELEMENT-TYPE*) and
EXTERNAL-FORMAT (defaults to *UTF-8-EXTERNAL-FORMAT*).
If WANT-STREAM-P is true (the defaults to T), then THUNK will then be CALL-FUNCTION'ed
with the stream and the pathname (if WANT-PATHNAME-P is true, defaults to T),
and stream with be closed after the THUNK exits (either normally or abnormally).
If WANT-STREAM-P is false, then WANT-PATHAME-P must be true, and then
THUNK is only CALL-FUNCTION'ed after the stream is closed, with the pathname as argument.
Upon exit of THUNK, the AFTER thunk if defined is CALL-FUNCTION'ed with the pathname as argument.
If AFTER is defined, its results are returned, otherwise, the results of THUNK are returned.
Finally, the file will be deleted, unless the KEEP argument when CALL-FUNCTION'ed returns true.")
(SYSTEM:FSET 'WITH-TEMPORARY-FILE (SYSTEM:MAKE-MACRO 'WITH-TEMPORARY-FILE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 331)) 188825 '((COMMON-LISP:&KEY (COMMON-LISP:STREAM (COMMON-LISP:GENSYM 
"STREAM") COMMON-LISP:STREAMP) (COMMON-LISP:PATHNAME (COMMON-LISP:GENSYM "PATHNAME") 
COMMON-LISP:PATHNAMEP) COMMON-LISP:DIRECTORY PREFIX SUFFIX COMMON-LISP:TYPE KEEP 
DIRECTION ELEMENT-TYPE EXTERNAL-FORMAT) COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GET-TEMPORARY-FILE))
(SYSTEM:FSET 'GET-TEMPORARY-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
332) 188825 '(COMMON-LISP:&KEY COMMON-LISP:DIRECTORY PREFIX SUFFIX COMMON-LISP:TYPE) 
COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ADD-PATHNAME-SUFFIX))
(SYSTEM:FSET 'ADD-PATHNAME-SUFFIX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
334) 188825 '(COMMON-LISP:PATHNAME SUFFIX COMMON-LISP:&REST KEYS) "Add a SUFFIX to the name of a PATHNAME, return a new pathname.
Further KEYS can be passed to MAKE-PATHNAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TMPIZE-PATHNAME))
(SYSTEM:FSET 'TMPIZE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 335) 
188825 '(X) "Return a new pathname modified from X by adding a trivial deterministic suffix")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-STAGING-PATHNAME))
(SYSTEM:FSET 'CALL-WITH-STAGING-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
336) 188825 '(COMMON-LISP:PATHNAME FUN) "Calls FUN with a staging pathname, and atomically
renames the staging pathname to the PATHNAME in the end.
NB: this protects only against failure of the program, not against concurrent attempts.
For the latter case, we ought pick a random suffix and atomically open it.")
(SYSTEM:FSET 'WITH-STAGING-PATHNAME (SYSTEM:MAKE-MACRO 'WITH-STAGING-PATHNAME (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 337)) 188825 '((PATHNAME-VAR COMMON-LISP:&OPTIONAL (PATHNAME-VALUE 
PATHNAME-VAR)) COMMON-LISP:&BODY BODY))
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/IMAGE :NICKNAMES (:ASDF/IMAGE) :DOCUMENTATION 
COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY :UIOP/PATHNAME 
:UIOP/STREAM :UIOP/OS) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#316? #317? #318? #319? #320? #321? #322? #323? 
#324? #325? #326? #327? #328? #329? #330? #331? #332? #333? #334? #335? #336? #337? 
#338? #339? #340? #341? #342? #343? #344? #345? #346?) :INTERN COMMON-LISP:NIL :RECYCLE 
(:UIOP/IMAGE :ASDF/IMAGE :XCVB-DRIVER) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/IMAGE")
(COMMON-LISP:DEFVAR *LISP-INTERACTION* COMMON-LISP:T "Is this an interactive Lisp environment, or is it batch processing?")
(COMMON-LISP:DEFVAR *COMMAND-LINE-ARGUMENTS* COMMON-LISP:NIL "Command-line arguments")
(COMMON-LISP:DEFVAR *IMAGE-DUMPED-P* COMMON-LISP:NIL "Is this a dumped image? As a standalone executable?")
(COMMON-LISP:DEFVAR *IMAGE-RESTORE-HOOK* COMMON-LISP:NIL "Functions to call (in reverse order) when the image is restored")
(COMMON-LISP:DEFVAR *IMAGE-RESTORED-P* COMMON-LISP:NIL "Has the image been restored? A boolean, or :in-progress while restoring, :in-regress while dumping")
(COMMON-LISP:DEFVAR *IMAGE-PRELUDE* COMMON-LISP:NIL "a form to evaluate, or string containing forms to read and evaluate
when the image is restarted, but before the entry point is called.")
(COMMON-LISP:DEFVAR *IMAGE-ENTRY-POINT* COMMON-LISP:NIL "a function with which to restart the dumped image when execution is restored from it.")
(COMMON-LISP:DEFVAR *IMAGE-POSTLUDE* COMMON-LISP:NIL "a form to evaluate, or string containing forms to read and evaluate
before the image dump hooks are called and before the image is dumped.")
(COMMON-LISP:DEFVAR *IMAGE-DUMP-HOOK* COMMON-LISP:NIL "Functions to call (in order) when before an image is dumped")
(COMMON-LISP:DEFVAR *FATAL-CONDITIONS* '(COMMON-LISP:ERROR) "conditions that cause the Lisp image to enter the debugger if interactive,
or to die if not interactive")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE QUIT))
(SYSTEM:FSET 'QUIT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 338) 199831 '(COMMON-LISP:&OPTIONAL 
(CODE 0) (COMMON-LISP:FINISH-OUTPUT COMMON-LISP:T)) "Quits from the Lisp world, with the given exit status if provided.
This is designed to abstract away the implementation specific quit forms.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIE))
(SYSTEM:FSET 'DIE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 339) 199831 '(CODE 
COMMON-LISP:FORMAT COMMON-LISP:&REST ARGUMENTS) "Die in error with some error message")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RAW-PRINT-BACKTRACE))
(SYSTEM:FSET 'RAW-PRINT-BACKTRACE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
342) 199831 '(COMMON-LISP:&KEY (COMMON-LISP:STREAM COMMON-LISP:*DEBUG-IO*) COMMON-LISP:COUNT 
COMMON-LISP:CONDITION) "Print a backtrace, directly accessing the implementation")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PRINT-BACKTRACE))
(SYSTEM:FSET 'PRINT-BACKTRACE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 343) 
199831 '(COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:STREAM COMMON-LISP:COUNT 
COMMON-LISP:CONDITION) "Print a backtrace")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PRINT-CONDITION-BACKTRACE))
(SYSTEM:FSET 'PRINT-CONDITION-BACKTRACE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
346) 199831 '(COMMON-LISP:CONDITION COMMON-LISP:&KEY (COMMON-LISP:STREAM *STDERR*) 
COMMON-LISP:COUNT) "Print a condition after a backtrace triggered by that condition")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FATAL-CONDITION-P))
(SYSTEM:FSET 'FATAL-CONDITION-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 347) 
199831 '(COMMON-LISP:CONDITION) "Is the CONDITION fatal? It is if it matches any in *FATAL-CONDITIONS*")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE HANDLE-FATAL-CONDITION))
(SYSTEM:FSET 'HANDLE-FATAL-CONDITION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
348) 199831 '(COMMON-LISP:CONDITION) "Handle a fatal CONDITION:
depending on whether *LISP-INTERACTION* is set, enter debugger or die")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-FATAL-CONDITION-HANDLER))
(SYSTEM:FSET 'CALL-WITH-FATAL-CONDITION-HANDLER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
349) 199831 '(THUNK) "Call THUNK in a context where fatal conditions are appropriately handled")
(SYSTEM:FSET 'WITH-FATAL-CONDITION-HANDLER (SYSTEM:MAKE-MACRO 'WITH-FATAL-CONDITION-HANDLER 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 350)) 199831 '((COMMON-LISP:&OPTIONAL) 
COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SHELL-BOOLEAN-EXIT))
(SYSTEM:FSET 'SHELL-BOOLEAN-EXIT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
351) 199831 '(X) "Quit with a return code that is 0 iff argument X is true")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-IMAGE-RESTORE-HOOK))
(SYSTEM:FSET 'REGISTER-IMAGE-RESTORE-HOOK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
352) 205948 '(HOOK COMMON-LISP:&OPTIONAL (CALL-NOW-P COMMON-LISP:T)) "Regiter a hook function to be run when restoring a dumped image")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-IMAGE-DUMP-HOOK))
(SYSTEM:FSET 'REGISTER-IMAGE-DUMP-HOOK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
353) 205948 '(HOOK COMMON-LISP:&OPTIONAL (CALL-NOW-P COMMON-LISP:NIL)) "Register a the hook function to be run before to dump an image")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-IMAGE-RESTORE-HOOK))
(SYSTEM:FSET 'CALL-IMAGE-RESTORE-HOOK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
354) 205948 'COMMON-LISP:NIL "Call the hook functions registered to be run when restoring a dumped image")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-IMAGE-DUMP-HOOK))
(SYSTEM:FSET 'CALL-IMAGE-DUMP-HOOK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
355) 205948 'COMMON-LISP:NIL "Call the hook functions registered to be run before to dump an image")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RAW-COMMAND-LINE-ARGUMENTS))
(SYSTEM:FSET 'RAW-COMMAND-LINE-ARGUMENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
356) 206726 'COMMON-LISP:NIL "Find what the actual command line for this process was.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMMAND-LINE-ARGUMENTS))
(SYSTEM:FSET 'COMMAND-LINE-ARGUMENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
357) 206726 '(COMMON-LISP:&OPTIONAL (ARGUMENTS (RAW-COMMAND-LINE-ARGUMENTS))) "Extract user arguments from command-line invocation of current process.
Assume the calling conventions of a generated script that uses --
if we are not called from a directly executable image.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ARGV0))
(SYSTEM:FSET 'ARGV0 (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 358) 206726 'COMMON-LISP:NIL 
"On supported implementations (most that matter), or when invoked by a proper wrapper script,
return a string that for the name with which the program was invoked, i.e. argv[0] in C.
Otherwise, return NIL.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SETUP-COMMAND-LINE-ARGUMENTS))
(SYSTEM:FSET 'SETUP-COMMAND-LINE-ARGUMENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
359) 206726 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESTORE-IMAGE))
(SYSTEM:FSET 'RESTORE-IMAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 360) 
206726 '(COMMON-LISP:&KEY (LISP-INTERACTION *LISP-INTERACTION*) (RESTORE-HOOK *IMAGE-RESTORE-HOOK*) 
(PRELUDE *IMAGE-PRELUDE*) (ENTRY-POINT *IMAGE-ENTRY-POINT*) (IF-ALREADY-RESTORED 
'(COMMON-LISP:CERROR "RUN RESTORE-IMAGE ANYWAY"))) "From a freshly restarted Lisp image, restore the saved Lisp environment
by setting appropriate variables, running various hooks, and calling any specified entry point.

If the image has already been restored or is already being restored, as per *IMAGE-RESTORED-P*,
call the IF-ALREADY-RESTORED error handler (by default, a continuable error), and do return
immediately to the surrounding restore process if allowed to continue.

Then, comes the restore process itself:
First, call each function in the RESTORE-HOOK,
in the order they were registered with REGISTER-RESTORE-HOOK.
Second, evaluate the prelude, which is often Lisp text that is read,
as per EVAL-INPUT.
Third, call the ENTRY-POINT function, if any is specified, with no argument.

The restore process happens in a WITH-FATAL-CONDITION-HANDLER, so that if LISP-INTERACTION is NIL,
any unhandled error leads to a backtrace and an exit with an error status.
If LISP-INTERACTION is NIL, the process also exits when no error occurs:
if neither restart nor entry function is provided, the program will exit with status 0 (success);
if a function was provided, the program will exit after the function returns (if it returns),
with status 0 if and only if the primary return value of result is generalized boolean true,
and with status 1 if this value is NIL.

If LISP-INTERACTION is true, unhandled errors will take you to the debugger, and the result
of the function will be returned rather than interpreted as a boolean designating an exit code.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DUMP-IMAGE))
(SYSTEM:FSET 'DUMP-IMAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 362) 212178 
'(FILENAME COMMON-LISP:&KEY OUTPUT-NAME EXECUTABLE (POSTLUDE *IMAGE-POSTLUDE*) (DUMP-HOOK 
*IMAGE-DUMP-HOOK*)) "Dump an image of the current Lisp environment at pathname FILENAME, with various options.

First, finalize the image, by evaluating the POSTLUDE as per EVAL-INPUT, then calling each of
 the functions in DUMP-HOOK, in reverse order of registration by REGISTER-DUMP-HOOK.

If EXECUTABLE is true, create an standalone executable program that calls RESTORE-IMAGE on startup.

Pass various implementation-defined options, such as PREPEND-SYMBOLS and PURITY on CCL,
or COMPRESSION on SBCL, and APPLICATION-TYPE on SBCL/Windows.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CREATE-IMAGE))
(SYSTEM:FSET 'CREATE-IMAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 363) 212178 
'(DESTINATION LISP-OBJECT-FILES COMMON-LISP:&KEY KIND OUTPUT-NAME PROLOGUE-CODE EPILOGUE-CODE 
EXTRA-OBJECT-FILES (PRELUDE COMMON-LISP:NIL PRELUDEP) (POSTLUDE COMMON-LISP:NIL POSTLUDEP) 
(ENTRY-POINT COMMON-LISP:NIL ENTRY-POINT-P) BUILD-ARGS) "On ECL, create an executable at pathname DESTINATION from the specified OBJECT-FILES and options")
(COMMON-LISP:MAP COMMON-LISP:NIL 'REGISTER-IMAGE-RESTORE-HOOK '(SETUP-STDIN SETUP-STDOUT 
SETUP-STDERR SETUP-COMMAND-LINE-ARGUMENTS SETUP-TEMPORARY-DIRECTORY DETECT-OS))
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/RUN-PROGRAM :NICKNAMES (:ASDF/RUN-PROGRAM) 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY 
:UIOP/PATHNAME :UIOP/OS :UIOP/FILESYSTEM :UIOP/STREAM) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM 
COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#351? #352? #353? #354? #355? 
#356? #357? #358? #359? #360? #361? #362? #363? #364?) :INTERN COMMON-LISP:NIL :RECYCLE 
(:UIOP/RUN-PROGRAM :ASDF/RUN-PROGRAM :XCVB-DRIVER) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/RUN-PROGRAM")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REQUIRES-ESCAPING-P))
(SYSTEM:FSET 'REQUIRES-ESCAPING-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
364) 220306 '(TOKEN COMMON-LISP:&KEY GOOD-CHARS BAD-CHARS) "Does this token require escaping, given the specification of
either good chars that don't need escaping or bad chars that do need escaping,
as either a recognizing function or a sequence of characters.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-TOKEN))
(SYSTEM:FSET 'ESCAPE-TOKEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 367) 220306 
'(TOKEN COMMON-LISP:&KEY COMMON-LISP:STREAM COMMON-LISP:QUOTE GOOD-CHARS BAD-CHARS 
ESCAPER) "Call the ESCAPER function on TOKEN string if it needs escaping as per
REQUIRES-ESCAPING-P using GOOD-CHARS and BAD-CHARS, otherwise output TOKEN,
using STREAM as output (or returning result as a string if NIL)")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-WINDOWS-TOKEN-WITHIN-DOUBLE-QUOTES))
(SYSTEM:FSET 'ESCAPE-WINDOWS-TOKEN-WITHIN-DOUBLE-QUOTES (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 369) 220306 '(X COMMON-LISP:&OPTIONAL S) "Escape a string token X within double-quotes
for use within a MS Windows command-line, outputing to S.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-WINDOWS-TOKEN))
(SYSTEM:FSET 'ESCAPE-WINDOWS-TOKEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
373) 220306 '(TOKEN COMMON-LISP:&OPTIONAL S) "Escape a string TOKEN within double-quotes if needed
for use within a MS Windows command-line, outputing to S.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-SH-TOKEN-WITHIN-DOUBLE-QUOTES))
(SYSTEM:FSET 'ESCAPE-SH-TOKEN-WITHIN-DOUBLE-QUOTES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
374) 220306 '(X S COMMON-LISP:&KEY 'COMMON-LISP:T) "Escape a string TOKEN within double-quotes
for use within a POSIX Bourne shell, outputing to S;
omit the outer double-quotes if key argument :QUOTE is NIL")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EASY-SH-CHARACTER-P))
(SYSTEM:FSET 'EASY-SH-CHARACTER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
375) 220306 '(X) "Is X an \"easy\" character that does not require quoting by the shell?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-SH-TOKEN))
(SYSTEM:FSET 'ESCAPE-SH-TOKEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 376) 
220306 '(TOKEN COMMON-LISP:&OPTIONAL S) "Escape a string TOKEN within double-quotes if needed
for use within a POSIX Bourne shell, outputing to S.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-SHELL-TOKEN))
(SYSTEM:FSET 'ESCAPE-SHELL-TOKEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
377) 220306 '(TOKEN COMMON-LISP:&OPTIONAL S) "Escape a token for the current operating system shell")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-COMMAND))
(SYSTEM:FSET 'ESCAPE-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 378) 
220306 '(COMMAND COMMON-LISP:&OPTIONAL S (ESCAPER 'ESCAPE-SHELL-TOKEN)) "Given a COMMAND as a list of tokens, return a string of the
spaced, escaped tokens, using ESCAPER to escape.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-WINDOWS-COMMAND))
(SYSTEM:FSET 'ESCAPE-WINDOWS-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
380) 220306 '(COMMAND COMMON-LISP:&OPTIONAL S) "Escape a list of command-line arguments into a string suitable for parsing
by CommandLineToArgv in MS Windows")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-SH-COMMAND))
(SYSTEM:FSET 'ESCAPE-SH-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 381) 
220306 '(COMMAND COMMON-LISP:&OPTIONAL S) "Escape a list of command-line arguments into a string suitable for parsing
by /bin/sh in POSIX")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ESCAPE-SHELL-COMMAND))
(SYSTEM:FSET 'ESCAPE-SHELL-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
382) 220306 '(COMMAND COMMON-LISP:&OPTIONAL COMMON-LISP:STREAM) "Escape a command for the current operating system's shell")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-STREAM-PROCESSOR))
(SYSTEM:FSET 'CALL-STREAM-PROCESSOR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
383) 225417 '(FUN PROCESSOR COMMON-LISP:STREAM) "Given FUN (typically SLURP-INPUT-STREAM or VOMIT-OUTPUT-STREAM,
a PROCESSOR specification which is either an atom or a list specifying
a processor an keyword arguments, call the specified processor with
the given STREAM as input")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SLURP-INPUT-STREAM))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 384))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(COMMON-LISP:FUNCTION INPUT-STREAM 
COMMON-LISP:&KEY) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:FUNCTION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 385))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(COMMON-LISP:LIST INPUT-STREAM 
COMMON-LISP:&KEY) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:CONS 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 387))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(OUTPUT-STREAM INPUT-STREAM 
COMMON-LISP:&KEY LINEWISE PREFIX (ELEMENT-TYPE 'COMMON-LISP:CHARACTER) BUFFER-SIZE) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STREAM 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
389))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
STRIPPED) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST (COMMON-LISP:LIST 'COMMON-LISP:EQL 'COMMON-LISP:STRING) 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 391))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
STRIPPED) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST (COMMON-LISP:LIST 'COMMON-LISP:EQL :STRING) 'COMMON-LISP:T)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 393))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
COMMON-LISP:COUNT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST (COMMON-LISP:LIST 'COMMON-LISP:EQL :LINES) 'COMMON-LISP:T)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 395))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
(AT 0)) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST (COMMON-LISP:LIST 'COMMON-LISP:EQL :LINE) 'COMMON-LISP:T)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 397))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
COMMON-LISP:COUNT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST (COMMON-LISP:LIST 'COMMON-LISP:EQL :FORMS) 'COMMON-LISP:T)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 399))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
(AT 0)) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST (COMMON-LISP:LIST 'COMMON-LISP:EQL :FORM) 'COMMON-LISP:T)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 401))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&REST 
KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST (COMMON-LISP:LIST 
'COMMON-LISP:EQL COMMON-LISP:T) 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 403))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:NULL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
405))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(COMMON-LISP:PATHNAME INPUT 
COMMON-LISP:&KEY (ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) (EXTERNAL-FORMAT *UTF-8-EXTERNAL-FORMAT*) 
(IF-EXISTS :RENAME-AND-DELETE) (IF-DOES-NOT-EXIST :CREATE) BUFFER-SIZE LINEWISE) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:PATHNAME 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
407))
(MOP::ENSURE-METHOD 'SLURP-INPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
LINEWISE PREFIX (ELEMENT-TYPE 'COMMON-LISP:CHARACTER) BUFFER-SIZE) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 410))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VOMIT-OUTPUT-STREAM))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 412))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(COMMON-LISP:FUNCTION OUTPUT-STREAM 
COMMON-LISP:&KEY) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:FUNCTION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 413))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(COMMON-LISP:LIST OUTPUT-STREAM 
COMMON-LISP:&KEY) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:CONS 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 415))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(INPUT-STREAM OUTPUT-STREAM 
COMMON-LISP:&KEY LINEWISE PREFIX (ELEMENT-TYPE 'COMMON-LISP:CHARACTER) BUFFER-SIZE) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STREAM 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
417))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
COMMON-LISP:FRESH-LINE COMMON-LISP:TERPRI) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 419))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&REST 
KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST (COMMON-LISP:LIST 
'COMMON-LISP:EQL COMMON-LISP:T) 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 421))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:NULL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
423))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(COMMON-LISP:PATHNAME INPUT 
COMMON-LISP:&KEY (ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) (EXTERNAL-FORMAT *UTF-8-EXTERNAL-FORMAT*) 
(IF-EXISTS :RENAME-AND-DELETE) (IF-DOES-NOT-EXIST :CREATE) BUFFER-SIZE LINEWISE) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:PATHNAME 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
425))
(MOP::ENSURE-METHOD 'VOMIT-OUTPUT-STREAM :LAMBDA-LIST '(X COMMON-LISP:STREAM COMMON-LISP:&KEY 
LINEWISE PREFIX (ELEMENT-TYPE 'COMMON-LISP:CHARACTER) BUFFER-SIZE) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 428))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 430))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'SUBPROCESS-ERROR 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 434))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %NORMALIZE-COMMAND))
(SYSTEM:FSET '%NORMALIZE-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
440) 233888 '(COMMAND) "Given a COMMAND as a list or string, transform it in a format suitable
for the implementation's underlying run-program function")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %ACTIVE-IO-SPECIFIER-P))
(SYSTEM:FSET '%ACTIVE-IO-SPECIFIER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
441) 233888 '(SPECIFIER) "Determines whether a run-program I/O specifier requires Lisp-side processing
via SLURP-INPUT-STREAM or VOMIT-OUTPUT-STREAM (return T),
or whether it's already taken care of by the implementation's underlying run-program.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %NORMALIZE-IO-SPECIFIER))
(SYSTEM:FSET '%NORMALIZE-IO-SPECIFIER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
442) 233888 '(SPECIFIER COMMON-LISP:&OPTIONAL ROLE) "Normalizes a portable I/O specifier for %RUN-PROGRAM into an implementation-dependent
argument to pass to the internal RUN-PROGRAM")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %INTERACTIVEP))
(SYSTEM:FSET '%INTERACTIVEP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 443) 
233888 '(INPUT OUTPUT ERROR-OUTPUT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %RUN-PROGRAM))
(SYSTEM:FSET '%RUN-PROGRAM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 444) 233888 
'(COMMAND COMMON-LISP:&REST KEYS COMMON-LISP:&KEY INPUT (IF-INPUT-DOES-NOT-EXIST 
:ERROR) OUTPUT (IF-OUTPUT-EXISTS :OVERWRITE) ERROR-OUTPUT (IF-ERROR-OUTPUT-EXISTS 
:OVERWRITE) COMMON-LISP:DIRECTORY WAIT COMMON-LISP:&ALLOW-OTHER-KEYS) "A portable abstraction of a low-level call to the implementation's run-program or equivalent.
It spawns a subprocess that runs the specified COMMAND (a list of program and arguments).
INPUT, OUTPUT and ERROR-OUTPUT specify a portable IO specifer,
to be normalized by %NORMALIZE-IO-SPECIFIER.
It returns a process-info plist with possible keys:
     PROCESS, EXIT-CODE, INPUT-STREAM, OUTPUT-STREAM, BIDIR-STREAM, ERROR-STREAM.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %PROCESS-INFO-PID))
(SYSTEM:FSET '%PROCESS-INFO-PID (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 445) 
233888 '(PROCESS-INFO) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %WAIT-PROCESS-RESULT))
(SYSTEM:FSET '%WAIT-PROCESS-RESULT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
446) 233888 '(PROCESS-INFO) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %CHECK-RESULT))
(SYSTEM:FSET '%CHECK-RESULT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 447) 
233888 '(EXIT-CODE COMMON-LISP:&KEY COMMAND PROCESS IGNORE-ERROR-STATUS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %CALL-WITH-PROGRAM-IO))
(SYSTEM:FSET '%CALL-WITH-PROGRAM-IO (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
448) 233888 '(GF TVAL STREAM-EASY-P FUN DIRECTION SPEC ACTIVEP RETURNER COMMON-LISP:&KEY 
ELEMENT-TYPE EXTERNAL-FORMAT COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(SYSTEM:FSET 'PLACE-SETTER (SYSTEM:MAKE-MACRO 'PLACE-SETTER (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 455)) 233888 '(PLACE))
(SYSTEM:FSET 'WITH-PROGRAM-INPUT (SYSTEM:MAKE-MACRO 'WITH-PROGRAM-INPUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 456)) 233888 '(((REDUCED-INPUT-VAR COMMON-LISP:&OPTIONAL (INPUT-ACTIVITY-VAR 
(COMMON-LISP:GENSYM) IAVP)) INPUT-FORM COMMON-LISP:&KEY COMMON-LISP:SETF STREAM-EASY-P 
ACTIVE KEYS) COMMON-LISP:&BODY BODY))
(SYSTEM:FSET 'WITH-PROGRAM-OUTPUT (SYSTEM:MAKE-MACRO 'WITH-PROGRAM-OUTPUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 457)) 233888 '(((REDUCED-OUTPUT-VAR COMMON-LISP:&OPTIONAL (OUTPUT-ACTIVITY-VAR 
(COMMON-LISP:GENSYM) OAVP)) OUTPUT-FORM COMMON-LISP:&KEY COMMON-LISP:SETF STREAM-EASY-P 
ACTIVE KEYS) COMMON-LISP:&BODY BODY))
(SYSTEM:FSET 'WITH-PROGRAM-ERROR-OUTPUT (SYSTEM:MAKE-MACRO 'WITH-PROGRAM-ERROR-OUTPUT 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 458)) 233888 '(((REDUCED-ERROR-OUTPUT-VAR 
COMMON-LISP:&OPTIONAL (ERROR-OUTPUT-ACTIVITY-VAR (COMMON-LISP:GENSYM) EOAVP)) ERROR-OUTPUT-FORM 
COMMON-LISP:&KEY COMMON-LISP:SETF STREAM-EASY-P ACTIVE KEYS) COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %USE-RUN-PROGRAM))
(SYSTEM:FSET '%USE-RUN-PROGRAM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 459) 
233888 '(COMMAND COMMON-LISP:&REST KEYS COMMON-LISP:&KEY INPUT OUTPUT ERROR-OUTPUT 
IGNORE-ERROR-STATUS COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %NORMALIZE-SYSTEM-COMMAND))
(SYSTEM:FSET '%NORMALIZE-SYSTEM-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
469) 233888 '(COMMAND) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %REDIRECTED-SYSTEM-COMMAND))
(SYSTEM:FSET '%REDIRECTED-SYSTEM-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
470) 233888 '(COMMAND IN OUT ERR COMMON-LISP:DIRECTORY) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %SYSTEM))
(SYSTEM:FSET '%SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 472) 233888 
'(COMMAND COMMON-LISP:&REST KEYS COMMON-LISP:&KEY INPUT OUTPUT ERROR-OUTPUT COMMON-LISP:DIRECTORY 
COMMON-LISP:&ALLOW-OTHER-KEYS) "A portable abstraction of a low-level call to libc's system().")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %USE-SYSTEM))
(SYSTEM:FSET '%USE-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 474) 233888 
'(COMMAND COMMON-LISP:&REST KEYS COMMON-LISP:&KEY INPUT OUTPUT ERROR-OUTPUT IGNORE-ERROR-STATUS 
COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RUN-PROGRAM))
(SYSTEM:FSET 'RUN-PROGRAM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 480) 233888 
'(COMMAND COMMON-LISP:&REST KEYS COMMON-LISP:&KEY IGNORE-ERROR-STATUS FORCE-SHELL 
(INPUT COMMON-LISP:NIL INPUTP) (IF-INPUT-DOES-NOT-EXIST :ERROR) OUTPUT (IF-OUTPUT-EXISTS 
:OVERWRITE) (ERROR-OUTPUT COMMON-LISP:NIL ERROR-OUTPUT-P) (IF-ERROR-OUTPUT-EXISTS 
:OVERWRITE) (ELEMENT-TYPE *DEFAULT-STREAM-ELEMENT-TYPE*) (EXTERNAL-FORMAT *UTF-8-EXTERNAL-FORMAT*) 
COMMON-LISP:&ALLOW-OTHER-KEYS) "Run program specified by COMMAND,
either a list of strings specifying a program and list of arguments,
or a string specifying a shell command (/bin/sh on Unix, CMD.EXE on Windows).

Always call a shell (rather than directly execute the command when possible)
if FORCE-SHELL is specified.

Signal a continuable SUBPROCESS-ERROR if the process wasn't successful (exit-code 0),
unless IGNORE-ERROR-STATUS is specified.

If OUTPUT is a pathname, a string designating a pathname, or NIL designating the null device,
the file at that path is used as output.
If it's :INTERACTIVE, output is inherited from the current process;
beware that this may be different from your *STANDARD-OUTPUT*,
and under SLIME will be on your *inferior-lisp* buffer.
If it's T, output goes to your current *STANDARD-OUTPUT* stream.
Otherwise, OUTPUT should be a value that is a suitable first argument to
SLURP-INPUT-STREAM (qv.), or a list of such a value and keyword arguments.
In this case, RUN-PROGRAM will create a temporary stream for the program output;
the program output, in that stream, will be processed by a call to SLURP-INPUT-STREAM,
using OUTPUT as the first argument (or the first element of OUTPUT, and the rest as keywords).
The primary value resulting from that call (or NIL if no call was needed)
will be the first value returned by RUN-PROGRAM.
E.g., using :OUTPUT :STRING will have it return the entire output stream as a string.
And using :OUTPUT '(:STRING :STRIPPED T) will have it return the same string
stripped of any ending newline.

ERROR-OUTPUT is similar to OUTPUT, except that the resulting value is returned
as the second value of RUN-PROGRAM. T designates the *ERROR-OUTPUT*.
Also :OUTPUT means redirecting the error output to the output stream,
in which case NIL is returned.

INPUT is similar to OUTPUT, except that VOMIT-OUTPUT-STREAM is used,
no value is returned, and T designates the *STANDARD-INPUT*.

Use ELEMENT-TYPE and EXTERNAL-FORMAT are passed on
to your Lisp implementation, when applicable, for creation of the output stream.

One and only one of the stream slurping or vomiting may or may not happen
in parallel in parallel with the subprocess,
depending on options and implementation,
and with priority being given to output processing.
Other streams are completely produced or consumed
before or after the subprocess is spawned, using temporary files.

RUN-PROGRAM returns 3 values:
0- the result of the OUTPUT slurping if any, or NIL
1- the result of the ERROR-OUTPUT slurping if any, or NIL
2- either 0 if the subprocess exited with success status,
or an indication of failure via the EXIT-CODE of the process")
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/LISP-BUILD :NICKNAMES (:ASDF/LISP-BUILD) 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE :UIOP/UTILITY 
:UIOP/OS :UIOP/PATHNAME :UIOP/FILESYSTEM :UIOP/STREAM :UIOP/IMAGE) :SHADOW COMMON-LISP:NIL 
:SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#375? 
#376? #377? #378? #379? #380? #381? #382? #383? #384? #385? #386? #387? #388? #389? 
#390? #391? #392? #393? #394? #395? #396? #397? #398? #399? #400? #401? #402? #403? 
#404? #405? #406? #407? #408? #409? #410? #411? #412? #413? #414? #415? #416? #417? 
#418? #419? #420? #421? #422?) :INTERN (#423? #424? #425? #426? #427? #428?) :RECYCLE 
(:UIOP/LISP-BUILD :ASDF/LISP-BUILD :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/LISP-BUILD")
(COMMON-LISP:DEFVAR *COMPILE-FILE-WARNINGS-BEHAVIOUR* (COMMON-LISP:OR :WARN) "How should ASDF react if it encounters a warning when compiling a file?
Valid values are :error, :warn, and :ignore.")
(COMMON-LISP:DEFVAR *COMPILE-FILE-FAILURE-BEHAVIOUR* (COMMON-LISP:OR :WARN) "How should ASDF react if it encounters a failure (per the ANSI spec of COMPILE-FILE)
when compiling a file, which includes any non-style-warning warning.
Valid values are :error, :warn, and :ignore.
Note that ASDF ALWAYS raises an error if it fails to create an output file when compiling.")
(COMMON-LISP:DEFVAR *BASE-BUILD-DIRECTORY* COMMON-LISP:NIL "When set to a non-null value, it should be an absolute directory pathname,
which will serve as the *DEFAULT-PATHNAME-DEFAULTS* around a COMPILE-FILE,
what more while the input-file is shortened if possible to ENOUGH-PATHNAME relative to it.
This can help you produce more deterministic output for FASLs.")
(COMMON-LISP:DEFVAR *OPTIMIZATION-SETTINGS* COMMON-LISP:NIL "Optimization settings to be used by PROCLAIM-OPTIMIZATION-SETTINGS")
(COMMON-LISP:DEFVAR *PREVIOUS-OPTIMIZATION-SETTINGS* COMMON-LISP:NIL "Optimization settings saved by PROCLAIM-OPTIMIZATION-SETTINGS")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GET-OPTIMIZATION-SETTINGS))
(SYSTEM:FSET 'GET-OPTIMIZATION-SETTINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
482) 266934 'COMMON-LISP:NIL "Get current compiler optimization settings, ready to PROCLAIM again")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROCLAIM-OPTIMIZATION-SETTINGS))
(SYSTEM:FSET 'PROCLAIM-OPTIMIZATION-SETTINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
483) 266934 'COMMON-LISP:NIL "Proclaim the optimization settings in *OPTIMIZATION-SETTINGS*")
(COMMON-LISP:DEFVAR *USUAL-UNINTERESTING-CONDITIONS* (COMMON-LISP:APPEND '("No generic function ~S present when encountering macroexpansion of defmethod. Assuming it will be an instance of standard-generic-function.")) 
"A suggested value to which to set or bind *uninteresting-conditions*.")
(COMMON-LISP:DEFVAR *UNINTERESTING-CONDITIONS* 'COMMON-LISP:NIL "Conditions that may be skipped while compiling or loading Lisp code.")
(COMMON-LISP:DEFVAR *UNINTERESTING-COMPILER-CONDITIONS* 'COMMON-LISP:NIL "Additional conditions that may be skipped while compiling Lisp code.")
(COMMON-LISP:DEFVAR *UNINTERESTING-LOADER-CONDITIONS* (COMMON-LISP:APPEND '("Overwriting already existing readtable ~S." 
#(#429? :ASDF-FINALIZERS))) "Additional conditions that may be skipped while loading Lisp code.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-MUFFLED-COMPILER-CONDITIONS))
(SYSTEM:FSET 'CALL-WITH-MUFFLED-COMPILER-CONDITIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
484) 271070 '(THUNK) "Call given THUNK in a context where uninteresting conditions and compiler conditions are muffled")
(SYSTEM:FSET 'WITH-MUFFLED-COMPILER-CONDITIONS (SYSTEM:MAKE-MACRO 'WITH-MUFFLED-COMPILER-CONDITIONS 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 485)) 271070 '((COMMON-LISP:&OPTIONAL) 
COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-MUFFLED-LOADER-CONDITIONS))
(SYSTEM:FSET 'CALL-WITH-MUFFLED-LOADER-CONDITIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
486) 271070 '(THUNK) "Call given THUNK in a context where uninteresting conditions and loader conditions are muffled")
(SYSTEM:FSET 'WITH-MUFFLED-LOADER-CONDITIONS (SYSTEM:MAKE-MACRO 'WITH-MUFFLED-LOADER-CONDITIONS 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 487)) 271070 '((COMMON-LISP:&OPTIONAL) 
COMMON-LISP:&BODY BODY))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 488))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMPILE-CONDITION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 492))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 497))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 498))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 499))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 500))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 501))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHECK-LISP-COMPILE-WARNINGS))
(SYSTEM:FSET 'CHECK-LISP-COMPILE-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
502) 272090 '(WARNINGS-P FAILURE-P COMMON-LISP:&OPTIONAL CONTEXT-FORMAT CONTEXT-ARGUMENTS) 
"Given the warnings or failures as resulted from COMPILE-FILE or checking deferred warnings,
raise an error or warning as appropriate")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHECK-LISP-COMPILE-RESULTS))
(SYSTEM:FSET 'CHECK-LISP-COMPILE-RESULTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
503) 272090 '(OUTPUT WARNINGS-P FAILURE-P COMMON-LISP:&OPTIONAL CONTEXT-FORMAT CONTEXT-ARGUMENTS) 
"Given the results of COMPILE-FILE, raise an error or warning as appropriate")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REIFY-SIMPLE-SEXP))
(SYSTEM:FSET 'REIFY-SIMPLE-SEXP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 504) 
275003 '(SEXP) "Given a simple SEXP, return a representation of it as a portable SEXP.
Simple means made of symbols, numbers, characters, simple-strings, pathnames, cons cells.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UNREIFY-SIMPLE-SEXP))
(SYSTEM:FSET 'UNREIFY-SIMPLE-SEXP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
505) 275003 '(SEXP) "Given the portable output of REIFY-SIMPLE-SEXP, return the simple SEXP it represents")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REIFY-DEFERRED-WARNINGS))
(SYSTEM:FSET 'REIFY-DEFERRED-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
506) 275003 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UNREIFY-DEFERRED-WARNINGS))
(SYSTEM:FSET 'UNREIFY-DEFERRED-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
507) 275003 '(REIFIED-DEFERRED-WARNINGS) "given a S-expression created by REIFY-DEFERRED-WARNINGS, reinstantiate the corresponding
deferred warnings as to be handled at the end of the current WITH-COMPILATION-UNIT.
Handle any warning that has been resolved already,
such as an undefined function that has been defined since.
One of three functions required for deferred-warnings support in ASDF.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESET-DEFERRED-WARNINGS))
(SYSTEM:FSET 'RESET-DEFERRED-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
508) 275003 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAVE-DEFERRED-WARNINGS))
(SYSTEM:FSET 'SAVE-DEFERRED-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
509) 275003 '(WARNINGS-FILE) "Save forward reference conditions so they may be issued at a latter time,
possibly in a different process.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE WARNINGS-FILE-TYPE))
(SYSTEM:FSET 'WARNINGS-FILE-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
511) 275003 '(COMMON-LISP:&OPTIONAL IMPLEMENTATION-TYPE) "The pathname type for warnings files on given IMPLEMENTATION-TYPE,
where NIL designates the current one")
(COMMON-LISP:DEFVAR *WARNINGS-FILE-TYPE* COMMON-LISP:NIL "Pathname type for warnings files, or NIL if disabled")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENABLE-DEFERRED-WARNINGS-CHECK))
(SYSTEM:FSET 'ENABLE-DEFERRED-WARNINGS-CHECK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
512) 275003 'COMMON-LISP:NIL "Enable the saving of deferred warnings")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DISABLE-DEFERRED-WARNINGS-CHECK))
(SYSTEM:FSET 'DISABLE-DEFERRED-WARNINGS-CHECK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
513) 275003 'COMMON-LISP:NIL "Disable the saving of deferred warnings")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE WARNINGS-FILE-P))
(SYSTEM:FSET 'WARNINGS-FILE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 514) 
275003 '(FILE COMMON-LISP:&OPTIONAL IMPLEMENTATION-TYPE) "Is FILE a saved warnings file for the given IMPLEMENTATION-TYPE?
If that given type is NIL, use the currently configured *WARNINGS-FILE-TYPE* instead.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHECK-DEFERRED-WARNINGS))
(SYSTEM:FSET 'CHECK-DEFERRED-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
515) 275003 '(FILES COMMON-LISP:&OPTIONAL CONTEXT-FORMAT CONTEXT-ARGUMENTS) "Given a list of FILES containing deferred warnings saved by CALL-WITH-SAVED-DEFERRED-WARNINGS,
re-intern and raise any warnings that are still meaningful.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-SAVED-DEFERRED-WARNINGS))
(SYSTEM:FSET 'CALL-WITH-SAVED-DEFERRED-WARNINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
519) 275003 '(THUNK WARNINGS-FILE COMMON-LISP:&KEY SOURCE-NAMESTRING) "If WARNINGS-FILE is not nil, record the deferred-warnings around a call to THUNK
and save those warnings to the given file for latter use,
possibly in a different process. Otherwise just call THUNK.")
(SYSTEM:FSET 'WITH-SAVED-DEFERRED-WARNINGS (SYSTEM:MAKE-MACRO 'WITH-SAVED-DEFERRED-WARNINGS 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 521)) 275003 '((WARNINGS-FILE COMMON-LISP:&KEY 
SOURCE-NAMESTRING) COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CURRENT-LISP-FILE-PATHNAME))
(SYSTEM:FSET 'CURRENT-LISP-FILE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
522) 292652 'COMMON-LISP:NIL "Portably return the PATHNAME of the current Lisp source file being compiled or loaded")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-PATHNAME))
(SYSTEM:FSET 'LOAD-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 523) 
292652 'COMMON-LISP:NIL "Portably return the LOAD-PATHNAME of the current source file or fasl")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LISPIZE-PATHNAME))
(SYSTEM:FSET 'LISPIZE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 524) 
292652 '(INPUT-FILE) "From a INPUT-FILE pathname, return a corresponding .lisp source pathname")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPILE-FILE-TYPE))
(SYSTEM:FSET 'COMPILE-FILE-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 525) 
292652 '(COMMON-LISP:&REST KEYS) "pathname TYPE for lisp FASt Loading files")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-AROUND-HOOK))
(SYSTEM:FSET 'CALL-AROUND-HOOK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 526) 
292652 '(HOOK COMMON-LISP:FUNCTION) "Call a HOOK around the execution of FUNCTION")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPILE-FILE-PATHNAME*))
(SYSTEM:FSET 'COMPILE-FILE-PATHNAME* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
527) 292652 '(INPUT-FILE COMMON-LISP:&REST KEYS COMMON-LISP:&KEY OUTPUT-FILE COMMON-LISP:&ALLOW-OTHER-KEYS) 
"Variant of COMPILE-FILE-PATHNAME that works well with COMPILE-FILE*")
(COMMON-LISP:DEFVAR *COMPILE-CHECK* COMMON-LISP:NIL "A hook for user-defined compile-time invariants")
(UNDEFINE-FUNCTION 'COMPILE-FILE*)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPILE-FILE*))
(SYSTEM:FSET 'COMPILE-FILE* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 528) 
292652 '(INPUT-FILE COMMON-LISP:&REST KEYS COMMON-LISP:&KEY (COMPILE-CHECK *COMPILE-CHECK*) 
OUTPUT-FILE WARNINGS-FILE COMMON-LISP:&ALLOW-OTHER-KEYS) "This function provides a portable wrapper around COMPILE-FILE.
It ensures that the OUTPUT-FILE value is only returned and
the file only actually created if the compilation was successful,
even though your implementation may not do that, and including
an optional call to an user-provided consistency check function COMPILE-CHECK;
it will call this function if not NIL at the end of the compilation
with the arguments sent to COMPILE-FILE*, except with :OUTPUT-FILE TMP-FILE
where TMP-FILE is the name of a temporary output-file.
It also checks two flags (with legacy british spelling from ASDF1),
*COMPILE-FILE-FAILURE-BEHAVIOUR* and *COMPILE-FILE-WARNINGS-BEHAVIOUR*
with appropriate implementation-dependent defaults,
and if a failure (respectively warnings) are reported by COMPILE-FILE
with consider it an error unless the respective behaviour flag
is one of :SUCCESS :WARN :IGNORE.
If WARNINGS-FILE is defined, deferred warnings are saved to that file.
On ECL or MKCL, it creates both the linkable object and loadable fasl files.
On implementations that erroneously do not recognize standard keyword arguments,
it will filter them appropriately.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD*))
(SYSTEM:FSET 'LOAD* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 533) 292652 '(X 
COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) "Portable wrapper around LOAD that properly handles loading from a stream.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-FROM-STRING))
(SYSTEM:FSET 'LOAD-FROM-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 535) 
292652 '(COMMON-LISP:STRING) "Portably read and evaluate forms from a STRING.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMBINE-FASLS))
(SYSTEM:FSET 'COMBINE-FASLS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 536) 
300951 '(INPUTS OUTPUT) "Combine a list of FASLs INPUTS into a single FASL OUTPUT")
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/CONFIGURATION :NICKNAMES (:ASDF/CONFIGURATION) 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/UTILITY :UIOP/OS :UIOP/PATHNAME 
:UIOP/FILESYSTEM :UIOP/STREAM :UIOP/IMAGE :UIOP/LISP-BUILD) :SHADOW COMMON-LISP:NIL 
:SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#437? 
#438? #439? #440? #441? #442? #443? #444? #445? #446? #447? #448? #449? #450? #451? 
#452? #453? #454? #455? #456? #457? #458? #459? #460?) :INTERN COMMON-LISP:NIL :RECYCLE 
(:UIOP/CONFIGURATION :ASDF/CONFIGURATION :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/CONFIGURATION")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 537))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'INVALID-CONFIGURATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 539))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GET-FOLDER-PATH))
(SYSTEM:FSET 'GET-FOLDER-PATH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 544) 
303567 '(FOLDER) "Semi-portable implementation of a subset of LispWorks' sys:get-folder-path,
this function tries to locate the Windows FOLDER for one of
:LOCAL-APPDATA, :APPDATA or :COMMON-APPDATA.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE USER-CONFIGURATION-DIRECTORIES))
(SYSTEM:FSET 'USER-CONFIGURATION-DIRECTORIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
545) 303567 'COMMON-LISP:NIL "Determine user configuration directories")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-CONFIGURATION-DIRECTORIES))
(SYSTEM:FSET 'SYSTEM-CONFIGURATION-DIRECTORIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
546) 303567 'COMMON-LISP:NIL "Determine system user configuration directories")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE IN-FIRST-DIRECTORY))
(SYSTEM:FSET 'IN-FIRST-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
547) 303567 '(DIRS X COMMON-LISP:&KEY (DIRECTION :INPUT)) "Determine system user configuration directories")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE IN-USER-CONFIGURATION-DIRECTORY))
(SYSTEM:FSET 'IN-USER-CONFIGURATION-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
548) 303567 '(X COMMON-LISP:&KEY (DIRECTION :INPUT)) "return pathname under user configuration directory, subpathname X")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE IN-SYSTEM-CONFIGURATION-DIRECTORY))
(SYSTEM:FSET 'IN-SYSTEM-CONFIGURATION-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
549) 303567 '(X COMMON-LISP:&KEY (DIRECTION :INPUT)) "return pathname under system configuration directory, subpathname X")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CONFIGURATION-INHERITANCE-DIRECTIVE-P))
(SYSTEM:FSET 'CONFIGURATION-INHERITANCE-DIRECTIVE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
550) 303567 '(X) "Is X a configuration inheritance directive?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REPORT-INVALID-FORM))
(SYSTEM:FSET 'REPORT-INVALID-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
551) 303567 '(REPORTER COMMON-LISP:&REST ARGS) "Report an invalid form according to REPORTER and various ARGS")
(COMMON-LISP:DEFVAR *IGNORED-CONFIGURATION-FORM* COMMON-LISP:NIL "Have configuration forms been ignored while parsing the configuration?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-CONFIGURATION-FORM))
(SYSTEM:FSET 'VALIDATE-CONFIGURATION-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
552) 303567 '(FORM TAG DIRECTIVE-VALIDATOR COMMON-LISP:&KEY LOCATION INVALID-FORM-REPORTER) 
"Validate a configuration FORM")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-CONFIGURATION-FILE))
(SYSTEM:FSET 'VALIDATE-CONFIGURATION-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
553) 303567 '(FILE VALIDATOR COMMON-LISP:&KEY DESCRIPTION) "Validate a configuration file for conformance of its form with the validator function")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-CONFIGURATION-DIRECTORY))
(SYSTEM:FSET 'VALIDATE-CONFIGURATION-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
554) 303567 '(COMMON-LISP:DIRECTORY TAG VALIDATOR COMMON-LISP:&KEY INVALID-FORM-REPORTER) 
"Map the VALIDATOR across the .conf files in DIRECTORY, the TAG will
be applied to the results to yield a configuration form.  Current
values of TAG include :source-registry and :output-translations.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-RELATIVE-LOCATION))
(SYSTEM:FSET 'RESOLVE-RELATIVE-LOCATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
556) 303567 '(X COMMON-LISP:&KEY ENSURE-DIRECTORY WILDEN) "Given a designator X for an relative location, resolve it to a pathname")
(COMMON-LISP:DEFVAR *HERE-DIRECTORY* COMMON-LISP:NIL "This special variable is bound to the currect directory during calls to
PROCESS-SOURCE-REGISTRY in order that we be able to interpret the :here
directive.")
(COMMON-LISP:DEFVAR *USER-CACHE* COMMON-LISP:NIL "A specification as per RESOLVE-LOCATION of where the user keeps his FASL cache")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPUTE-USER-CACHE))
(SYSTEM:FSET 'COMPUTE-USER-CACHE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
557) 303567 'COMMON-LISP:NIL "Compute the location of the default user-cache for translate-output objects")
(REGISTER-IMAGE-RESTORE-HOOK 'COMPUTE-USER-CACHE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-ABSOLUTE-LOCATION))
(SYSTEM:FSET 'RESOLVE-ABSOLUTE-LOCATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
559) 303567 '(X COMMON-LISP:&KEY ENSURE-DIRECTORY WILDEN) "Given a designator X for an absolute location, resolve it to a pathname")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:FTYPE (COMMON-LISP:FUNCTION (COMMON-LISP:T COMMON-LISP:&KEY 
(:DIRECTORY COMMON-LISP:BOOLEAN) (:WILDEN COMMON-LISP:BOOLEAN) (:ENSURE-DIRECTORY 
COMMON-LISP:BOOLEAN)) COMMON-LISP:T) RESOLVE-LOCATION))
(UNDEFINE-FUNCTION 'RESOLVE-LOCATION)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-LOCATION))
(SYSTEM:FSET 'RESOLVE-LOCATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 560) 
303567 '(X COMMON-LISP:&KEY ENSURE-DIRECTORY WILDEN COMMON-LISP:DIRECTORY) "Resolve location designator X into a PATHNAME")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOCATION-DESIGNATOR-P))
(SYSTEM:FSET 'LOCATION-DESIGNATOR-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
561) 303567 '(X) "Is X a designator for a location?")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOCATION-FUNCTION-P))
(SYSTEM:FSET 'LOCATION-FUNCTION-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
564) 303567 '(X) "Is X the specification of a location function?")
(COMMON-LISP:DEFVAR *CLEAR-CONFIGURATION-HOOK* 'COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-CLEAR-CONFIGURATION-HOOK))
(SYSTEM:FSET 'REGISTER-CLEAR-CONFIGURATION-HOOK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
565) 303567 '(HOOK-FUNCTION COMMON-LISP:&OPTIONAL CALL-NOW-P) "Register a function to be called when clearing configuration")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEAR-CONFIGURATION))
(SYSTEM:FSET 'CLEAR-CONFIGURATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
566) 303567 'COMMON-LISP:NIL "Call the functions in *CLEAR-CONFIGURATION-HOOK*")
(REGISTER-IMAGE-DUMP-HOOK 'CLEAR-CONFIGURATION)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UPGRADE-CONFIGURATION))
(SYSTEM:FSET 'UPGRADE-CONFIGURATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
567) 303567 'COMMON-LISP:NIL "If a previous version of ASDF failed to read some configuration, try again now.")
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:UIOP/BACKWARD-DRIVER :NICKNAMES 
(:ASDF/BACKWARD-DRIVER) :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP/PACKAGE 
:UIOP/UTILITY :UIOP/PATHNAME :UIOP/STREAM :UIOP/OS :UIOP/IMAGE :UIOP/RUN-PROGRAM 
:UIOP/LISP-BUILD :UIOP/CONFIGURATION) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM 
COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#462? #463?) :INTERN COMMON-LISP:NIL 
:RECYCLE (:UIOP/BACKWARD-DRIVER :ASDF/BACKWARD-DRIVER :ASDF) :MIX COMMON-LISP:NIL 
:REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "UIOP/BACKWARD-DRIVER")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COERCE-PATHNAME))
(SYSTEM:FSET 'COERCE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 568) 
318637 '(NAME COMMON-LISP:&KEY COMMON-LISP:TYPE DEFAULTS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-NAME-TO-PATHNAME-COMPONENTS))
(SYSTEM:FSET 'COMPONENT-NAME-TO-PATHNAME-COMPONENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
569) 318637 '(UNIX-STYLE-NAMESTRING COMMON-LISP:&KEY FORCE-DIRECTORY FORCE-RELATIVE) 
COMMON-LISP:NIL)
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:UIOP/DRIVER :NICKNAMES (:UIOP :ASDF/DRIVER 
:ASDF-DRIVER :ASDF-UTILS) :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP 
:UIOP/PACKAGE :UIOP/UTILITY :UIOP/OS :UIOP/PATHNAME :UIOP/STREAM :UIOP/FILESYSTEM 
:UIOP/IMAGE :UIOP/RUN-PROGRAM :UIOP/LISP-BUILD :UIOP/CONFIGURATION :UIOP/BACKWARD-DRIVER) 
:SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT COMMON-LISP:NIL :INTERN COMMON-LISP:NIL :RECYCLE (:UIOP/DRIVER :UIOP :ASDF/DRIVER 
:ASDF-DRIVER :ASDF-UTILS) :MIX COMMON-LISP:NIL :REEXPORT (:UIOP/PACKAGE :UIOP/UTILITY 
:UIOP/OS :UIOP/PATHNAME :UIOP/STREAM :UIOP/FILESYSTEM :UIOP/IMAGE :UIOP/RUN-PROGRAM 
:UIOP/LISP-BUILD :UIOP/CONFIGURATION :UIOP/BACKWARD-DRIVER) :UNINTERN COMMON-LISP:NIL))
(COMMON-LISP:APPLY 'ENSURE-PACKAGE '(:ASDF/UPGRADE :NICKNAMES COMMON-LISP:NIL :DOCUMENTATION 
COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM 
COMMON-LISP:NIL :IMPORT-FROM ((:UIOP/PACKAGE #464? #465?)) :EXPORT (#466? #467? #468? 
#469? #470? #471? #472? #473? #474? #475? #476? #477? #478? #479?) :INTERN COMMON-LISP:NIL 
:RECYCLE (:ASDF/UPGRADE :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN 
COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/UPGRADE")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ASDF-VERSION))
(SYSTEM:FSET 'ASDF-VERSION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 570) 321432 
'COMMON-LISP:NIL "Exported interface to the version of ASDF currently installed. A string.
You can compare this string with e.g.: (ASDF:VERSION-SATISFIES (ASDF:ASDF-VERSION) \"3.4.5.67\").")
(COMMON-LISP:DEFVAR *PREVIOUS-ASDF-VERSIONS* (UIOP/UTILITY:IF-LET (PREVIOUS (ASDF-VERSION)) 
(COMMON-LISP:LIST PREVIOUS)))
(COMMON-LISP:DEFVAR *ASDF-VERSION* COMMON-LISP:NIL)
(COMMON-LISP:DEFPARAMETER *OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION* "2.33")
(COMMON-LISP:DEFVAR *VERBOSE-OUT* COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ASDF-MESSAGE))
(SYSTEM:FSET 'ASDF-MESSAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 572) 321432 
'(FORMAT-STRING COMMON-LISP:&REST FORMAT-ARGS) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *POST-UPGRADE-CLEANUP-HOOK* COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *POST-UPGRADE-RESTART-HOOK* COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UPGRADING-P))
(SYSTEM:FSET 'UPGRADING-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 573) 321432 
'(COMMON-LISP:&OPTIONAL (OLDEST-COMPATIBLE-VERSION *OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*)) 
COMMON-LISP:NIL)
(SYSTEM:FSET 'DEFPARAMETER* (SYSTEM:MAKE-MACRO 'DEFPARAMETER* (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 574)) 321432 '(VAR VALUE COMMON-LISP:&OPTIONAL DOCSTRING (VERSION 
*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*)))
(SYSTEM:FSET 'WHEN-UPGRADING (SYSTEM:MAKE-MACRO 'WHEN-UPGRADING (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 576)) 321432 '((COMMON-LISP:&KEY (VERSION *OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*) 
(UPGRADING-P (SYSTEM::BACKQ-LIST 'UPGRADING-P VERSION)) COMMON-LISP:WHEN) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 577))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 578))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ASDF-UPGRADE-ERROR))
(SYSTEM:FSET 'ASDF-UPGRADE-ERROR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
579) 327114 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEANUP-UPGRADED-ASDF))
(SYSTEM:FSET 'CLEANUP-UPGRADED-ASDF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
580) 327114 '(COMMON-LISP:&OPTIONAL (OLD-VERSION (COMMON-LISP:FIRST *PREVIOUS-ASDF-VERSIONS*))) 
COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UPGRADE-ASDF))
(SYSTEM:FSET 'UPGRADE-ASDF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 581) 327114 
'COMMON-LISP:NIL "Try to upgrade of ASDF. If a different version was used, return T.
   We need do that before we operate on anything that may possibly depend on ASDF.")
(UIOP/UTILITY:REGISTER-HOOK-FUNCTION '*POST-UPGRADE-CLEANUP-HOOK* 'UIOP/CONFIGURATION:UPGRADE-CONFIGURATION)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/COMPONENT :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE) :SHADOW 
COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#513? #514? #515? #516? #517? #518? #519? #520? #521? #522? #523? #524? 
#525? #526? #527? #528? #529? #530? #531? #532? #533? #534? #535? #536? #537? #538? 
#539? #540? #541? #542? #543? #544? #545? #546? #547? #548? #549? #550? #551? #552? 
#553? #554? #555? #556? #557? #558? #559? #560? #561? #562? #563? #564? #565? #566? 
#567? #568? #569? #570? #571? #572? #573? #574? #575? #576? #577? #578? #579? #580?) 
:INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/COMPONENT :ASDF/DEFSYSTEM :ASDF/FIND-SYSTEM 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/COMPONENT")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-NAME))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 582))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-SYSTEM))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 583))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-PATHNAME))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 584))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'COMPONENT-RELATIVE-PATHNAME)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-RELATIVE-PATHNAME))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 585))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-EXTERNAL-FORMAT))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 586))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-ENCODING))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 587))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VERSION-SATISFIES))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 588))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-VERSION))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 589))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE (COMMON-LISP:SETF COMPONENT-VERSION)))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 590))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-PARENT))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 591))
(MOP::ENSURE-METHOD 'COMPONENT-PARENT :LAMBDA-LIST '(COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:NULL)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 592) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 593))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'SOURCE-FILE-TYPE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SOURCE-FILE-TYPE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 594))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 595))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 596))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'DUPLICATE-NAMES 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 597))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 602))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-FIND-PATH))
(SYSTEM:FSET 'COMPONENT-FIND-PATH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
615) 333430 '(COMPONENT) "Return a path from a root system to the COMPONENT.
The return value is a list of component NAMES; a list of strings.")
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(C COMMON-LISP:STREAM) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMPONENT 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
616) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 619))
(MOP::ENSURE-METHOD 'COMPONENT-SYSTEM :LAMBDA-LIST '(COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 622) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 623))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 624))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 625))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 626))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 628))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 630))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 632))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 634))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 635))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 637))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPUTE-CHILDREN-BY-NAME))
(SYSTEM:FSET 'COMPUTE-CHILDREN-BY-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
640) 339342 '(PARENT COMMON-LISP:&KEY ONLY-IF-NEEDED-P) COMMON-LISP:NIL)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 641))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'COMPONENT-PARENT-PATHNAME)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-PARENT-PATHNAME))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 642))
(MOP::ENSURE-METHOD 'COMPONENT-PARENT-PATHNAME :LAMBDA-LIST '(COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 643) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 644))
(MOP::ENSURE-METHOD 'COMPONENT-PATHNAME :LAMBDA-LIST '(COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 645) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 646))
(MOP::ENSURE-METHOD 'COMPONENT-RELATIVE-PATHNAME :LAMBDA-LIST '(COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 647) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 648))
(MOP::ENSURE-METHOD 'SOURCE-FILE-TYPE :LAMBDA-LIST '(COMPONENT SYSTEM) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'PARENT-COMPONENT 'PARENT-COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
649) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 650))
(MOP::ENSURE-METHOD 'SOURCE-FILE-TYPE :LAMBDA-LIST '(COMPONENT SYSTEM) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'FILE-COMPONENT 'PARENT-COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
651) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 652))
(MOP::ENSURE-METHOD 'COMPONENT-ENCODING :LAMBDA-LIST '(C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 653) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 654))
(MOP::ENSURE-METHOD 'COMPONENT-EXTERNAL-FORMAT :LAMBDA-LIST '(C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 655) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 656))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE AROUND-COMPILE-HOOK))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 657))
(MOP::ENSURE-METHOD 'AROUND-COMPILE-HOOK :LAMBDA-LIST '(C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 658) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 659))
(MOP::ENSURE-METHOD 'VERSION-SATISFIES :LAMBDA-LIST '(C VERSION) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 660) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 661))
(MOP::ENSURE-METHOD 'VERSION-SATISFIES :LAMBDA-LIST '(CVER VERSION) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 662) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 663))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SUB-COMPONENTS))
(SYSTEM:FSET 'SUB-COMPONENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 664) 
342981 '(COMPONENT COMMON-LISP:&KEY (COMMON-LISP:TYPE COMMON-LISP:T)) COMMON-LISP:NIL)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/SYSTEM :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/COMPONENT) 
:SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#581? #582? #583? #584? #585? #586? #587? #588? #589? #590? #591? #592? 
#593? #594? #595? #596? #597? #598? #599? #600? #601? #602? #603? #604? #605? #606? 
#607? #608? #609? #610? #611?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF :ASDF/SYSTEM) 
:MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/SYSTEM")
(UIOP/UTILITY:UNDEFINE-FUNCTION 'FIND-SYSTEM)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIND-SYSTEM))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 667))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'SYSTEM-SOURCE-FILE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-SOURCE-FILE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 668))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-BUILD-PATHNAME))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 669))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-ENTRY-POINT))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 670))
(MOP::ENSURE-METHOD 'COMPONENT-ENTRY-POINT :LAMBDA-LIST '(C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 671) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 672))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 673))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 674))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESET-SYSTEM))
(SYSTEM:FSET 'RESET-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 690) 344786 
'(SYSTEM COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'SYSTEM-SOURCE-FILE :LAMBDA-LIST '(SYSTEM-NAME) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 691) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 692))
(MOP::ENSURE-METHOD 'SYSTEM-SOURCE-FILE :LAMBDA-LIST '(SYSTEM-NAME) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 693) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 694))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-SOURCE-DIRECTORY))
(SYSTEM:FSET 'SYSTEM-SOURCE-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
695) 347243 '(SYSTEM-DESIGNATOR) "Return a pathname object corresponding to the directory
in which the system specification (.asd file) is located.")
(UIOP/UTILITY:UNDEFINE-FUNCTION 'SYSTEM-RELATIVE-PATHNAME)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-RELATIVE-PATHNAME))
(SYSTEM:FSET 'SYSTEM-RELATIVE-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
696) 347243 '(SYSTEM NAME COMMON-LISP:&KEY COMMON-LISP:TYPE) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-PATHNAME :LAMBDA-LIST '(SYSTEM) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 697))
(MOP::ENSURE-METHOD 'COMPONENT-RELATIVE-PATHNAME :LAMBDA-LIST '(SYSTEM) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 701) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 702))
(MOP::ENSURE-METHOD 'COMPONENT-PARENT-PATHNAME :LAMBDA-LIST '(SYSTEM) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 703) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 704))
(MOP::ENSURE-METHOD 'COMPONENT-BUILD-PATHNAME :LAMBDA-LIST '(C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 705) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 706))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/CACHE :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE) :SHADOW 
COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#612? #613? #614? #615? #616? #617? #618? #619? #620? #621? #622?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:ASDF/CACHE) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/CACHE")
(COMMON-LISP:DEFVAR *ASDF-CACHE* COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SET-ASDF-CACHE-ENTRY))
(SYSTEM:FSET 'SET-ASDF-CACHE-ENTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
707) 349228 '(KEY VALUE-LIST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UNSET-ASDF-CACHE-ENTRY))
(SYSTEM:FSET 'UNSET-ASDF-CACHE-ENTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
708) 349228 '(KEY) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CONSULT-ASDF-CACHE))
(SYSTEM:FSET 'CONSULT-ASDF-CACHE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
709) 349228 '(KEY COMMON-LISP:&OPTIONAL THUNK) COMMON-LISP:NIL)
(SYSTEM:FSET 'DO-ASDF-CACHE (SYSTEM:MAKE-MACRO 'DO-ASDF-CACHE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 710)) 349228 '(KEY COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-ASDF-CACHE))
(SYSTEM:FSET 'CALL-WITH-ASDF-CACHE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
711) 349228 '(THUNK COMMON-LISP:&KEY OVERRIDE KEY) COMMON-LISP:NIL)
(SYSTEM:FSET 'WITH-ASDF-CACHE (SYSTEM:MAKE-MACRO 'WITH-ASDF-CACHE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 713)) 349228 '((COMMON-LISP:&KEY KEY OVERRIDE) COMMON-LISP:&BODY 
BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NORMALIZE-NAMESTRING))
(SYSTEM:FSET 'NORMALIZE-NAMESTRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
714) 349228 '(COMMON-LISP:PATHNAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPUTE-FILE-STAMP))
(SYSTEM:FSET 'COMPUTE-FILE-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
715) 349228 '(NORMALIZED-NAMESTRING) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-FILE-STAMP))
(SYSTEM:FSET 'REGISTER-FILE-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
716) 349228 '(FILE COMMON-LISP:&OPTIONAL (STAMP COMMON-LISP:NIL STAMPP)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE GET-FILE-STAMP))
(SYSTEM:FSET 'GET-FILE-STAMP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 717) 
349228 '(FILE) COMMON-LISP:NIL)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/FIND-SYSTEM :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/CACHE 
:ASDF/COMPONENT :ASDF/SYSTEM) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#627? #628? #629? #630? #631? #632? #633? #634? 
#635? #636? #637? #638? #639? #640? #641? #642? #643? #644? #645? #646? #647? #648? 
#649? #650? #651? #652? #653? #654? #655? #656? #657? #658? #659? #660? #661? #662? 
#663? #664? #665? #666? #667?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/FIND-SYSTEM 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/FIND-SYSTEM")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:FTYPE (COMMON-LISP:FUNCTION (COMMON-LISP:&OPTIONAL 
COMMON-LISP:T) COMMON-LISP:T) INITIALIZE-SOURCE-REGISTRY))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 719))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 722))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'FORMATTED-SYSTEM-DEFINITION-ERROR 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 723))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 728))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'LOAD-SYSTEM-DEFINITION-ERROR 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 729))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-ERROR))
(SYSTEM:FSET 'SYSDEF-ERROR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 734) 352885 
'(COMMON-LISP:FORMAT COMMON-LISP:&REST ARGUMENTS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COERCE-NAME))
(SYSTEM:FSET 'COERCE-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 735) 352885 
'(NAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PRIMARY-SYSTEM-NAME))
(SYSTEM:FSET 'PRIMARY-SYSTEM-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
736) 352885 '(NAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COERCE-FILENAME))
(SYSTEM:FSET 'COERCE-FILENAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 737) 
352885 '(NAME) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *DEFINED-SYSTEMS* (COMMON-LISP:MAKE-HASH-TABLE :TEST 'COMMON-LISP:EQUAL) 
"This is a hash table whose keys are strings, being the
names of the systems, and whose values are pairs, the first
element of which is a universal-time indicating when the
system definition was last updated, and the second element
of which is a system object.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-REGISTERED-P))
(SYSTEM:FSET 'SYSTEM-REGISTERED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
738) 352885 '(NAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTERED-SYSTEMS))
(SYSTEM:FSET 'REGISTERED-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
739) 352885 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-SYSTEM))
(SYSTEM:FSET 'REGISTER-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 740) 
352885 '(SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEAR-DEFINED-SYSTEM))
(SYSTEM:FSET 'CLEAR-DEFINED-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
742) 352885 '(SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEAR-DEFINED-SYSTEMS))
(SYSTEM:FSET 'CLEAR-DEFINED-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
743) 352885 'COMMON-LISP:NIL COMMON-LISP:NIL)
(UIOP/UTILITY:REGISTER-HOOK-FUNCTION '*POST-UPGRADE-CLEANUP-HOOK* 'CLEAR-DEFINED-SYSTEMS 
COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEAR-SYSTEM))
(SYSTEM:FSET 'CLEAR-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 744) 352885 
'(NAME) "Clear the entry for a system in the database of systems previously loaded.
Note that this does NOT in any way cause the code of the system to be unloaded.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAP-SYSTEMS))
(SYSTEM:FSET 'MAP-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 745) 352885 
'(FN) "Apply FN to each defined system.

FN should be a function of one argument. It will be
called with an object of type asdf:system.")
(COMMON-LISP:DEFVAR *SYSTEM-DEFINITION-SEARCH-FUNCTIONS* 'COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS))
(SYSTEM:FSET 'CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 746) 357090 'COMMON-LISP:NIL COMMON-LISP:NIL)
(CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SEARCH-FOR-SYSTEM-DEFINITION))
(SYSTEM:FSET 'SEARCH-FOR-SYSTEM-DEFINITION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
749) 357090 '(SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *CENTRAL-REGISTRY* COMMON-LISP:NIL "A list of 'system directory designators' ASDF uses to find systems.

A 'system directory designator' is a pathname or an expression
which evaluates to a pathname. For example:

    (setf asdf:*central-registry*
          (list '*default-pathname-defaults*
                #p\"/home/me/cl/systems/\"
                #p\"/usr/share/common-lisp/systems/\"))

This is for backward compatibility.
Going forward, we recommend new users should be using the source-registry.
")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROBE-ASD))
(SYSTEM:FSET 'PROBE-ASD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 751) 357090 
'(NAME DEFAULTS COMMON-LISP:&KEY COMMON-LISP:TRUENAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-CENTRAL-REGISTRY-SEARCH))
(SYSTEM:FSET 'SYSDEF-CENTRAL-REGISTRY-SEARCH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
753) 357090 '(SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *PRELOADED-SYSTEMS* (COMMON-LISP:MAKE-HASH-TABLE :TEST 'COMMON-LISP:EQUAL))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-PRELOADED-SYSTEM))
(SYSTEM:FSET 'MAKE-PRELOADED-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
761) 357090 '(NAME KEYS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-PRELOADED-SYSTEM-SEARCH))
(SYSTEM:FSET 'SYSDEF-PRELOADED-SYSTEM-SEARCH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
762) 357090 '(REQUESTED) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-PRELOADED-SYSTEM))
(SYSTEM:FSET 'REGISTER-PRELOADED-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
763) 357090 '(SYSTEM-NAME COMMON-LISP:&REST KEYS) COMMON-LISP:NIL)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 764))
(MOP::ENSURE-METHOD 'FIND-SYSTEM :LAMBDA-LIST '(NAME COMMON-LISP:&OPTIONAL (ERROR-P 
COMMON-LISP:T)) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:NULL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
765))
(MOP::ENSURE-METHOD 'FIND-SYSTEM :LAMBDA-LIST '(NAME COMMON-LISP:&OPTIONAL (ERROR-P 
COMMON-LISP:T)) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
767))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIND-SYSTEM-IF-BEING-DEFINED))
(SYSTEM:FSET 'FIND-SYSTEM-IF-BEING-DEFINED (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
769) 357090 '(NAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-ASD))
(SYSTEM:FSET 'LOAD-ASD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 770) 357090 
'(COMMON-LISP:PATHNAME COMMON-LISP:&KEY NAME (EXTERNAL-FORMAT (UIOP/STREAM:ENCODING-EXTERNAL-FORMAT 
(UIOP/STREAM:DETECT-ENCODING COMMON-LISP:PATHNAME))) COMMON-LISP:&AUX (COMMON-LISP:READTABLE 
COMMON-LISP:*READTABLE*) (PRINT-PPRINT-DISPATCH COMMON-LISP:*PRINT-PPRINT-DISPATCH*)) 
COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *OLD-ASDF-SYSTEMS* (COMMON-LISP:MAKE-HASH-TABLE :TEST 'COMMON-LISP:EQUAL))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHECK-NOT-OLD-ASDF-SYSTEM))
(SYSTEM:FSET 'CHECK-NOT-OLD-ASDF-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
774) 357090 '(NAME COMMON-LISP:PATHNAME) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *IMMUTABLE-SYSTEMS* COMMON-LISP:NIL "An hash-set (equal hash-table mapping keys to T) of systems that are immutable,
i.e. already loaded in memory and not to be refreshed from the filesystem.
They will be treated specially by find-system, and passed as :force-not argument to make-plan.

If you deliver an image with many systems precompiled, *and* do not want to check the filesystem
for them every time a user loads an extension, what more risk a problematic upgrade or catastrophic
downgrade, before you dump an image, use:
   (setf asdf::*immutable-systems* (uiop:list-to-hash-set (asdf:already-loaded-systems)))")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-IMMUTABLE-SYSTEM-SEARCH))
(SYSTEM:FSET 'SYSDEF-IMMUTABLE-SYSTEM-SEARCH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
776) 357090 '(REQUESTED) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOCATE-SYSTEM))
(SYSTEM:FSET 'LOCATE-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 777) 
357090 '(NAME) "Given a system NAME designator, try to locate where to load the system from.
Returns five values: FOUNDP FOUND-SYSTEM PATHNAME PREVIOUS PREVIOUS-TIME
FOUNDP is true when a system was found,
either a new unregistered one or a previously registered one.
FOUND-SYSTEM when not null is a SYSTEM object that may be REGISTER-SYSTEM'ed as is
PATHNAME when not null is a path from where to load the system,
either associated with FOUND-SYSTEM, or with the PREVIOUS system.
PREVIOUS when not null is a previously loaded SYSTEM object of same name.
PREVIOUS-TIME when not null is the time at which the PREVIOUS system was loaded.")
(MOP::ENSURE-METHOD 'FIND-SYSTEM :LAMBDA-LIST '(NAME COMMON-LISP:&OPTIONAL (ERROR-P 
COMMON-LISP:T)) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:STRING)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
779))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/FIND-COMPONENT :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE 
:ASDF/CACHE :ASDF/COMPONENT :ASDF/SYSTEM :ASDF/FIND-SYSTEM) :SHADOW COMMON-LISP:NIL 
:SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#672? 
#673? #674? #675? #676? #677? #678? #679? #680? #681? #682? #683? #684?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:ASDF/FIND-COMPONENT :ASDF) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/FIND-COMPONENT")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 785))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 787))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(C S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'MISSING-DEPENDENCY 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 788))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 792))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(C S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'MISSING-COMPONENT 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 793) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 794))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(C S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'MISSING-COMPONENT-OF-VERSION 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 795) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 796))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'FIND-COMPONENT)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIND-COMPONENT))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 797))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-DEPENDENCY-COMBINATION))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 798))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(BASE PATH) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 799) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 800))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(BASE PATH) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 801) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 802))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(BASE PATH) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:CONS 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 803) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 804))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(PARENT NAME) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PARENT-COMPONENT 
'COMMON-LISP:STRING)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 805) 
:FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 806))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(BASE NAME) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:SYMBOL)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 807) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 808))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(C NAME) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT 'COMMON-LISP:CONS)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 809) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 810))
(MOP::ENSURE-METHOD 'FIND-COMPONENT :LAMBDA-LIST '(BASE ACTUAL) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 811) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 812))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-DEPENDENCY-NAME))
(SYSTEM:FSET 'RESOLVE-DEPENDENCY-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
813) 376003 '(COMPONENT NAME COMMON-LISP:&OPTIONAL VERSION) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESOLVE-DEPENDENCY-SPEC))
(SYSTEM:FSET 'RESOLVE-DEPENDENCY-SPEC (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
818) 376003 '(COMPONENT DEP-SPEC) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'RESOLVE-DEPENDENCY-COMBINATION :LAMBDA-LIST '(COMPONENT COMBINATOR 
ARGUMENTS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 819))
(MOP::ENSURE-METHOD 'RESOLVE-DEPENDENCY-COMBINATION :LAMBDA-LIST '(COMPONENT COMBINATOR 
ARGUMENTS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T (COMMON-LISP:LIST 'COMMON-LISP:EQL :FEATURE) 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 820))
(MOP::ENSURE-METHOD 'RESOLVE-DEPENDENCY-COMBINATION :LAMBDA-LIST '(COMPONENT COMBINATOR 
ARGUMENTS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T (COMMON-LISP:LIST 'COMMON-LISP:EQL :VERSION) 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 821))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/OPERATION :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/FIND-SYSTEM) 
:SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#686? #687? #688? #689? #690? #691? #692?) :INTERN COMMON-LISP:NIL :RECYCLE 
(:ASDF/OPERATION :ASDF/ACTION :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/OPERATION")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 822))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 823))
(MOP::ENSURE-METHOD 'COMMON-LISP:INITIALIZE-INSTANCE :LAMBDA-LIST '(O COMMON-LISP:&REST 
INITARGS COMMON-LISP:&KEY FORCE FORCE-NOT SYSTEM VERBOSE COMMON-LISP:&ALLOW-OTHER-KEYS) 
:QUALIFIERS '(:AFTER) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 825))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(O COMMON-LISP:STREAM) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
827) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 831))
(SYSTEM:FSET '%COMPUTE-OPERATIONS-VALUE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
835) 380953 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *OPERATIONS* (%COMPUTE-OPERATIONS-VALUE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 836))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-OPERATION))
(SYSTEM:FSET 'MAKE-OPERATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 837) 
380953 '(OPERATION-CLASS COMMON-LISP:&REST INITARGS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIND-OPERATION))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 838))
(MOP::ENSURE-METHOD 'FIND-OPERATION :LAMBDA-LIST '(CONTEXT SPEC) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'OPERATION)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 839) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 840))
(MOP::ENSURE-METHOD 'FIND-OPERATION :LAMBDA-LIST '(CONTEXT SPEC) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:SYMBOL)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 841) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 842))
(MOP::ENSURE-METHOD 'FIND-OPERATION :LAMBDA-LIST '(CONTEXT SPEC) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:STRING)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 843) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 844))
(MOP::ENSURE-METHOD 'OPERATION-ORIGINAL-INITARGS :LAMBDA-LIST '(CONTEXT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:SYMBOL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 845) 
:FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 846))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/ACTION :NICKNAMES (:ASDF-ACTION) 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/COMPONENT 
:ASDF/SYSTEM #695? :ASDF/FIND-SYSTEM :ASDF/FIND-COMPONENT :ASDF/OPERATION) :SHADOW 
COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#696? #697? #698? #699? #700? #701? #702? #703? #704? #705? #706? #707? 
#708? #709? #710? #711? #712? #713? #714? #715? #716? #717? #718? #719? #720? #721? 
#722? #723? #724? #725? #726? #727? #728?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/ACTION 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/ACTION")
(COMMON-LISP:DEFTYPE ACTION COMMON-LISP:NIL '(COMMON-LISP:CONS OPERATION COMPONENT))
(COMMON-LISP:DEFTYPE OPERATION-DESIGNATOR COMMON-LISP:NIL '(COMMON-LISP:OR OPERATION 
COMMON-LISP:NULL COMMON-LISP:SYMBOL COMMON-LISP:CLASS))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRAVERSE-ACTIONS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 847))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRAVERSE-SUB-ACTIONS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 848))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REQUIRED-COMPONENTS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 849))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-PATH))
(SYSTEM:FSET 'ACTION-PATH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 850) 383757 
'(ACTION) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FIND-ACTION))
(SYSTEM:FSET 'FIND-ACTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 851) 383757 
'(PATH) COMMON-LISP:NIL)
(SYSTEM:FSET 'DEFINE-CONVENIENCE-ACTION-METHODS (SYSTEM:MAKE-MACRO 'DEFINE-CONVENIENCE-ACTION-METHODS 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 852)) 384098 '(COMMON-LISP:FUNCTION 
FORMALS COMMON-LISP:&KEY IF-NO-OPERATION IF-NO-COMPONENT OPERATION-INITARGS))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-DESCRIPTION))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 854))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
855) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 856))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'EXPLAIN)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE EXPLAIN))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 857))
(MOP::ENSURE-METHOD 'EXPLAIN :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 858) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 859))
(MOP::ENSURE-METHOD 'EXPLAIN :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 860) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 861))
(MOP::ENSURE-METHOD 'EXPLAIN :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 862) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 863))
(MOP::ENSURE-METHOD 'EXPLAIN :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 864) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 865))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FORMAT-ACTION))
(SYSTEM:FSET 'FORMAT-ACTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 866) 
386360 '(COMMON-LISP:STREAM ACTION COMMON-LISP:&OPTIONAL COLON-P AT-SIGN-P) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'COMPONENT-DEPENDS-ON)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-DEPENDS-ON))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 867))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STRING 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
868) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 869))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:SYMBOL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
870) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 871))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
872) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 873))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS '(:AROUND) 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 874))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 879))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DOWNWARD-OPERATION-DEPENDS-ON))
(SYSTEM:FSET 'DOWNWARD-OPERATION-DEPENDS-ON (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
881) 388635 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'DOWNWARD-OPERATION 
'PARENT-COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 882))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 886))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE UPWARD-OPERATION-DEPENDS-ON))
(SYSTEM:FSET 'UPWARD-OPERATION-DEPENDS-ON (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
888) 388635 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'UPWARD-OPERATION 
'CHILD-COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 889))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 893))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SIDEWAY-OPERATION-DEPENDS-ON))
(SYSTEM:FSET 'SIDEWAY-OPERATION-DEPENDS-ON (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
895) 388635 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'SIDEWAY-OPERATION 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 896))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 900))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SELFWARD-OPERATION-DEPENDS-ON))
(SYSTEM:FSET 'SELFWARD-OPERATION-DEPENDS-ON (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
901) 388635 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'SELFWARD-OPERATION 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 902))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 906))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 907))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 908))
(MOP::ENSURE-METHOD 'COMMON-LISP:INITIALIZE-INSTANCE :LAMBDA-LIST '(O COMMON-LISP:&KEY) 
:QUALIFIERS '(:BEFORE) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 909))
(MOP::ENSURE-METHOD 'COMMON-LISP:INITIALIZE-INSTANCE :LAMBDA-LIST '(O COMMON-LISP:&KEY) 
:QUALIFIERS '(:BEFORE) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'NON-PROPAGATING-OPERATION)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
911))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 913) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 914))
(MOP::ENSURE-METHOD 'DOWNWARD-OPERATION :LAMBDA-LIST '(O) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 915) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 916))
(MOP::ENSURE-METHOD 'SIDEWAY-OPERATION :LAMBDA-LIST '(O) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 917) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 918))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'OUTPUT-FILES)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OUTPUT-FILES))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 919))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'INPUT-FILES)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INPUT-FILES))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 920))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'OPERATION-DONE-P)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATION-DONE-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 921))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STRING 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
922) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 923))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:SYMBOL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
924) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 925))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
926) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 927))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STRING 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
928) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 929))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:SYMBOL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
930) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 931))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
932) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 933))
(MOP::ENSURE-METHOD 'OPERATION-DONE-P :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STRING 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
934) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 935))
(MOP::ENSURE-METHOD 'OPERATION-DONE-P :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:SYMBOL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
936) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 937))
(MOP::ENSURE-METHOD 'OPERATION-DONE-P :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
938) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 939))
(MOP::ENSURE-METHOD 'OPERATION-DONE-P :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 940) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 941))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'(:AROUND) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 
'COMMON-LISP:T)) :DOCUMENTATION "Translate output files, unless asked not to. Memoize the result." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 942))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 947) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 948))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OUTPUT-FILE))
(SYSTEM:FSET 'OUTPUT-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 949) 395874 
'(OPERATION COMPONENT) "The unique output file of performing OPERATION on COMPONENT")
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'(:AROUND) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 
'COMMON-LISP:T)) :DOCUMENTATION "memoize input files." :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 950))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 955) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 956))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'SELFWARD-OPERATION 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 957))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-OPERATION-TIME))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 961))
(MOP::ENSURE-METHOD 'COMPONENT-OPERATION-TIME :LAMBDA-LIST '(OPERATION COMPONENT) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:STRING 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
962) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 963))
(MOP::ENSURE-METHOD 'COMPONENT-OPERATION-TIME :LAMBDA-LIST '(OPERATION COMPONENT) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:SYMBOL 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
964) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 965))
(MOP::ENSURE-METHOD 'COMPONENT-OPERATION-TIME :LAMBDA-LIST '(OPERATION COMPONENT) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'OPERATION 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
966) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 967))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MARK-OPERATION-DONE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 968))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPUTE-ACTION-STAMP))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 969))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 970))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(STATUS COMMON-LISP:STREAM) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'ACTION-STATUS 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
971) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 974))
(MOP::ENSURE-METHOD 'COMPONENT-OPERATION-TIME :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 977) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 978))
(MOP::ENSURE-METHOD 'MARK-OPERATION-DONE :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 979) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 980))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'PERFORM-WITH-RESTARTS)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM-WITH-RESTARTS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 981))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'PERFORM)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 982))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 983) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 984))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 985) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 986))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 987) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 988))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS '(:BEFORE) :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 989) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 990))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS '(:AFTER) :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 991) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 992))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'PARENT-COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 993) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 994))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'SOURCE-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 995) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 996))
(MOP::ENSURE-METHOD 'PERFORM-WITH-RESTARTS :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
997) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 998))
(MOP::ENSURE-METHOD 'PERFORM-WITH-RESTARTS :LAMBDA-LIST '(OPERATION COMPONENT) :QUALIFIERS 
'(:AROUND) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 999))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/LISP-ACTION :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/CACHE 
:ASDF/COMPONENT :ASDF/SYSTEM :ASDF/FIND-COMPONENT :ASDF/FIND-SYSTEM :ASDF/OPERATION 
:ASDF/ACTION) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM 
COMMON-LISP:NIL :EXPORT (#733? #734? #735? #736? #737? #738? #739? #740? #741? #742? 
#743? #744? #745? #746? #747? #748? #749? #750? #751? #752?) :INTERN (#753? #754?) 
:RECYCLE (:ASDF/LISP-ACTION :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/LISP-ACTION")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1009))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1011))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1013))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1015))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1016))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1019))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1021))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1023))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1025))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1027))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1029))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-OP 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1031) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1032))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-OP 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1033) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1034))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1035) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1036))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1037) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1038))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'PARENT-COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1039) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1040))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WITH-AROUND-COMPILE-HOOK))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1041))
(MOP::ENSURE-METHOD 'CALL-WITH-AROUND-COMPILE-HOOK :LAMBDA-LIST '(C COMMON-LISP:FUNCTION) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMPONENT 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1042) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1043))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM-LISP-COMPILATION))
(SYSTEM:FSET 'PERFORM-LISP-COMPILATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1044) 405490 '(O C) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REPORT-FILE-P))
(SYSTEM:FSET 'REPORT-FILE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1046) 
405490 '(F) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM-LISP-WARNINGS-CHECK))
(SYSTEM:FSET 'PERFORM-LISP-WARNINGS-CHECK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1047) 405490 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'CL-SOURCE-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1049) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1050))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LISP-COMPILATION-OUTPUT-FILES))
(SYSTEM:FSET 'LISP-COMPILATION-OUTPUT-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1051) 405490 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'CL-SOURCE-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1052) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1053))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'STATIC-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1054) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1055))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1056) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1057))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1058) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1059))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1060) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1061))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'CL-SOURCE-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1062) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1063))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'PARENT-COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1064) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1065))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1066) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1067))
(MOP::ENSURE-METHOD 'PERFORM-WITH-RESTARTS :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'CL-SOURCE-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1068))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM-LISP-LOAD-FASL))
(SYSTEM:FSET 'PERFORM-LISP-LOAD-FASL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1076) 410131 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'CL-SOURCE-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1077) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1078))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'STATIC-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1079) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1080))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-SOURCE-OP 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1081) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1082))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-SOURCE-OP 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1083) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1084))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-SOURCE-OP 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1085) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1086))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-SOURCE-OP 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1087) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1088))
(MOP::ENSURE-METHOD 'ACTION-DESCRIPTION :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-SOURCE-OP 'PARENT-COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1089) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1090))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM-LISP-LOAD-SOURCE))
(SYSTEM:FSET 'PERFORM-LISP-LOAD-SOURCE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1091) 411596 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-SOURCE-OP 'CL-SOURCE-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1093) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1094))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-SOURCE-OP 'STATIC-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1095) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1096))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'TEST-OP 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1097) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1098))
(MOP::ENSURE-METHOD 'OPERATION-DONE-P :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'TEST-OP 'SYSTEM)) 
:DOCUMENTATION "Testing a system is _never_ done." :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1099) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1100))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/PLAN :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/COMPONENT 
:ASDF/OPERATION :ASDF/SYSTEM :ASDF/CACHE :ASDF/FIND-SYSTEM :ASDF/FIND-COMPONENT :ASDF/OPERATION 
:ASDF/ACTION :ASDF/LISP-ACTION) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#756? #757? #758? #759? #760? #761? #762? #763? 
#764? #765? #766? #767? #768? #769? #770? #771? #772? #773? #774? #775? #776? #777? 
#778? #779? #780? #781? #782? #783? #784? #785? #786? #787? #788? #789? #790? #791? 
#792? #793? #794? #795? #796? #797? #798? #799? #800? #801? #802? #803? #804? #805? 
#806? #807? #808?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/PLAN :ASDF) :MIX COMMON-LISP:NIL 
:REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/PLAN")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1101))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1102))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PLAN-ACTION-STATUS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1112))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE (COMMON-LISP:SETF PLAN-ACTION-STATUS)))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1113))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1114))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(STATUS COMMON-LISP:STREAM) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'PLANNED-ACTION-STATUS 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1115) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1118))
(MOP::ENSURE-METHOD 'ACTION-PLANNED-P :LAMBDA-LIST '(ACTION-STATUS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1121) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1122))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NODE-FOR))
(SYSTEM:FSET 'NODE-FOR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1123) 414871 
'(O C) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-ALREADY-DONE-P))
(SYSTEM:FSET 'ACTION-ALREADY-DONE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1124) 414871 '(PLAN OPERATION COMPONENT) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'PLAN-ACTION-STATUS :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:NULL 
'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1125))
(MOP::ENSURE-METHOD '(COMMON-LISP:SETF PLAN-ACTION-STATUS) :LAMBDA-LIST '(NEW-STATUS 
PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:NULL 'OPERATION 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1126))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-FORCED-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1128))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-FORCED-NOT-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1129))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NORMALIZE-FORCED-SYSTEMS))
(SYSTEM:FSET 'NORMALIZE-FORCED-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1130) 416981 '(X SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NORMALIZE-FORCED-NOT-SYSTEMS))
(SYSTEM:FSET 'NORMALIZE-FORCED-NOT-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1131) 416981 '(X SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-OVERRIDE-P))
(SYSTEM:FSET 'ACTION-OVERRIDE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1134) 
416981 '(PLAN OPERATION COMPONENT OVERRIDE-ACCESSOR) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'ACTION-FORCED-P :LAMBDA-LIST '(PLAN OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1135))
(MOP::ENSURE-METHOD 'ACTION-FORCED-NOT-P :LAMBDA-LIST '(PLAN OPERATION COMPONENT) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1136))
(MOP::ENSURE-METHOD 'ACTION-FORCED-P :LAMBDA-LIST '(PLAN OPERATION COMPONENT) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:NULL 'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1137))
(MOP::ENSURE-METHOD 'ACTION-FORCED-NOT-P :LAMBDA-LIST '(PLAN OPERATION COMPONENT) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:NULL 'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1138))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ACTION-VALID-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1139))
(MOP::ENSURE-METHOD 'ACTION-VALID-P :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'OPERATION 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1140))
(MOP::ENSURE-METHOD 'ACTION-VALID-P :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:NULL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1141))
(MOP::ENSURE-METHOD 'ACTION-VALID-P :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:T 
'COMMON-LISP:NULL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1142))
(MOP::ENSURE-METHOD 'ACTION-VALID-P :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:NULL 
'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1143))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NEEDED-IN-IMAGE-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1144))
(MOP::ENSURE-METHOD 'NEEDED-IN-IMAGE-P :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1145) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1146))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'MAP-DIRECT-DEPENDENCIES)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAP-DIRECT-DEPENDENCIES))
(SYSTEM:FSET 'MAP-DIRECT-DEPENDENCIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1147) 420336 '(PLAN OPERATION COMPONENT FUN) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'REDUCE-DIRECT-DEPENDENCIES)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REDUCE-DIRECT-DEPENDENCIES))
(SYSTEM:FSET 'REDUCE-DIRECT-DEPENDENCIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1148) 420336 '(PLAN OPERATION COMPONENT COMBINATOR SEED) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'DIRECT-DEPENDENCIES)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECT-DEPENDENCIES))
(SYSTEM:FSET 'DIRECT-DEPENDENCIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1150) 420336 '(PLAN OPERATION COMPONENT) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPUTE-ACTION-STAMP :LAMBDA-LIST '(PLAN O C COMMON-LISP:&KEY 
JUST-DONE) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T 'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1151))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PLAN-RECORD-DEPENDENCY))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1154))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CALL-WHILE-VISITING-ACTION))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1155))
(MOP::ENSURE-METHOD 'COMMON-LISP:INITIALIZE-INSTANCE :LAMBDA-LIST '(PLAN COMMON-LISP:&KEY 
FORCE FORCE-NOT SYSTEM COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS '(:AFTER) :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PLAN-TRAVERSAL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1156))
(MOP::ENSURE-METHOD '(COMMON-LISP:SETF PLAN-ACTION-STATUS) :LAMBDA-LIST '(NEW-STATUS 
PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T 'PLAN-TRAVERSAL 'OPERATION 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1158))
(MOP::ENSURE-METHOD 'PLAN-ACTION-STATUS :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PLAN-TRAVERSAL 'OPERATION 
'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1160))
(MOP::ENSURE-METHOD 'ACTION-VALID-P :LAMBDA-LIST '(PLAN O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PLAN-TRAVERSAL 'OPERATION 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1161))
(MOP::ENSURE-METHOD 'CALL-WHILE-VISITING-ACTION :LAMBDA-LIST '(PLAN OPERATION COMPONENT 
FUN) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'PLAN-TRAVERSAL 'COMMON-LISP:T 'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1165))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1167))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'CIRCULAR-DEPENDENCY 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1168))
(SYSTEM:FSET 'WHILE-VISITING-ACTION (SYSTEM:MAKE-MACRO 'WHILE-VISITING-ACTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1173)) 427934 '((P O C) COMMON-LISP:&BODY BODY))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRAVERSE-ACTION))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1174))
(MOP::ENSURE-METHOD 'TRAVERSE-ACTION :LAMBDA-LIST '(PLAN OPERATION COMPONENT NEEDED-IN-IMAGE-P) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'COMMON-LISP:T 'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1175))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1180))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PLAN-ACTIONS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1182))
(MOP::ENSURE-METHOD 'PLAN-ACTIONS :LAMBDA-LIST '(PLAN) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:LIST)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1183) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1184))
(MOP::ENSURE-METHOD 'PLAN-ACTIONS :LAMBDA-LIST '(PLAN) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'SEQUENTIAL-PLAN)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1185) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1186))
(MOP::ENSURE-METHOD 'PLAN-RECORD-DEPENDENCY :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'SEQUENTIAL-PLAN 'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1187))
(MOP::ENSURE-METHOD '(COMMON-LISP:SETF PLAN-ACTION-STATUS) :LAMBDA-LIST '(NEW-STATUS 
P O C) :QUALIFIERS '(:AFTER) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'SEQUENTIAL-PLAN 'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1188))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-PLAN))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1190))
(MOP::ENSURE-METHOD 'MAKE-PLAN :LAMBDA-LIST '(PLAN-CLASS OPERATION COMPONENT COMMON-LISP:&REST 
#811? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1191))
(MOP::ENSURE-METHOD 'MAKE-PLAN :LAMBDA-LIST '(PLAN-CLASS OPERATION COMPONENT COMMON-LISP:&REST 
#811? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1193))
(MOP::ENSURE-METHOD 'MAKE-PLAN :LAMBDA-LIST '(PLAN-CLASS OPERATION COMPONENT COMMON-LISP:&REST 
#811? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'OPERATION 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1195))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PERFORM-PLAN))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1197))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PLAN-OPERATES-ON-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1198))
(COMMON-LISP:DEFVAR *DEFAULT-PLAN-CLASS* 'SEQUENTIAL-PLAN)
(MOP::ENSURE-METHOD 'MAKE-PLAN :LAMBDA-LIST '(PLAN-CLASS O C COMMON-LISP:&REST KEYS 
COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1199))
(MOP::ENSURE-METHOD 'PERFORM-PLAN :LAMBDA-LIST '(PLAN COMMON-LISP:&KEY) :QUALIFIERS 
'(:AROUND) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1201))
(MOP::ENSURE-METHOD 'PERFORM-PLAN :LAMBDA-LIST '(PLAN COMMON-LISP:&REST KEYS COMMON-LISP:&KEY 
COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1206))
(MOP::ENSURE-METHOD 'PERFORM-PLAN :LAMBDA-LIST '(STEPS COMMON-LISP:&KEY FORCE COMMON-LISP:&ALLOW-OTHER-KEYS) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:LIST)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1208))
(MOP::ENSURE-METHOD 'PLAN-OPERATES-ON-P :LAMBDA-LIST '(PLAN COMPONENT-PATH) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'PLAN-TRAVERSAL 'COMMON-LISP:LIST)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1210) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1211))
(MOP::ENSURE-METHOD 'PLAN-OPERATES-ON-P :LAMBDA-LIST '(PLAN COMPONENT-PATH) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:LIST 'COMMON-LISP:LIST)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1212) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1213))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1214))
(MOP::ENSURE-METHOD 'COMMON-LISP:INITIALIZE-INSTANCE :LAMBDA-LIST '(PLAN COMMON-LISP:&KEY 
FORCE FORCE-NOT OTHER-SYSTEMS) :QUALIFIERS '(:AFTER) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'FILTERED-SEQUENTIAL-PLAN)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1219))
(MOP::ENSURE-METHOD 'ACTION-VALID-P :LAMBDA-LIST '(PLAN O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'FILTERED-SEQUENTIAL-PLAN 
'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1221))
(MOP::ENSURE-METHOD 'TRAVERSE-ACTIONS :LAMBDA-LIST '(ACTIONS COMMON-LISP:&REST KEYS 
COMMON-LISP:&KEY PLAN-CLASS COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1225))
(MOP::ENSURE-METHOD 'TRAVERSE-SUB-ACTIONS :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#812? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1227))
(MOP::ENSURE-METHOD 'TRAVERSE-SUB-ACTIONS :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#812? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1229))
(MOP::ENSURE-METHOD 'TRAVERSE-SUB-ACTIONS :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#812? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1231))
(MOP::ENSURE-METHOD 'TRAVERSE-SUB-ACTIONS :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1233))
(MOP::ENSURE-METHOD 'PLAN-ACTIONS :LAMBDA-LIST '(PLAN) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'FILTERED-SEQUENTIAL-PLAN)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1235))
(MOP::ENSURE-METHOD 'REQUIRED-COMPONENTS :LAMBDA-LIST '(SYSTEM COMMON-LISP:&REST 
KEYS COMMON-LISP:&KEY (GOAL-OPERATION 'LOAD-OP) COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 
'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1239))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/OPERATE :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/CACHE 
:ASDF/COMPONENT :ASDF/SYSTEM :ASDF/OPERATION :ASDF/ACTION :ASDF/FIND-SYSTEM :ASDF/FIND-COMPONENT 
:ASDF/LISP-ACTION :ASDF/PLAN) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#813? #814? #815? #816? #817? #818? #819? #820? 
#821? #822? #823? #824? #825? #826? #827?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/OPERATE 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/OPERATE")
(UIOP/UTILITY:UNDEFINE-FUNCTION 'OPERATE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1241))
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#828? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1242))
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#828? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1244))
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#828? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1246))
(COMMON-LISP:DEFVAR *SYSTEMS-BEING-OPERATED* COMMON-LISP:NIL "A boolean indicating that some systems are being operated on")
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
KEYS COMMON-LISP:&KEY VERBOSE (ON-WARNINGS UIOP/LISP-BUILD:*COMPILE-FILE-WARNINGS-BEHAVIOUR*) 
(ON-FAILURE UIOP/LISP-BUILD:*COMPILE-FILE-FAILURE-BEHAVIOUR*) COMMON-LISP:&ALLOW-OTHER-KEYS) 
:QUALIFIERS '(:AROUND) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1248))
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&KEY 
VERSION COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS '(:BEFORE) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'OPERATION 'COMPONENT)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1254))
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
KEYS COMMON-LISP:&KEY PLAN-CLASS COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1256))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OOS))
(SYSTEM:FSET 'OOS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1258) 438447 '(OPERATION 
COMPONENT COMMON-LISP:&REST ARGS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) 
COMMON-LISP:NIL)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1259))
(COMMON-LISP:DEFVAR *LOAD-SYSTEM-OPERATION* 'LOAD-OP "Operation used by ASDF:LOAD-SYSTEM. By default, ASDF:LOAD-OP.
You may override it with e.g. ASDF:LOAD-FASL-OP from asdf-bundle
or ASDF:LOAD-SOURCE-OP if your fasl loading is somehow broken.

The default operation may change in the future if we implement a
component-directed strategy for how to load or compile systems.")
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREPARE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1261) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1262))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1263))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BUILD-OP 'COMPONENT)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1264) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1265))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE))
(SYSTEM:FSET 'MAKE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1266) 443014 '(SYSTEM 
COMMON-LISP:&REST KEYS) "The recommended way to interact with ASDF3.1 is via (ASDF:MAKE :FOO).
It will build system FOO using the operation BUILD-OP,
the meaning of which is configurable by the system, and
defaults to *LOAD-SYSTEM-OPERATION*, usually LOAD-OP,
to load it in current image.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-SYSTEM))
(SYSTEM:FSET 'LOAD-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1267) 443014 
'(SYSTEM COMMON-LISP:&REST KEYS COMMON-LISP:&KEY FORCE FORCE-NOT VERBOSE VERSION 
COMMON-LISP:&ALLOW-OTHER-KEYS) "Shorthand for `(operate 'asdf:load-op system)`. See OPERATE for details.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-SYSTEMS*))
(SYSTEM:FSET 'LOAD-SYSTEMS* (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1268) 
443014 '(SYSTEMS COMMON-LISP:&REST KEYS) "Loading multiple systems at once.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-SYSTEMS))
(SYSTEM:FSET 'LOAD-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1269) 
443014 '(COMMON-LISP:&REST SYSTEMS) "Loading multiple systems at once.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPILE-SYSTEM))
(SYSTEM:FSET 'COMPILE-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1270) 
443014 '(SYSTEM COMMON-LISP:&REST ARGS COMMON-LISP:&KEY FORCE FORCE-NOT VERBOSE VERSION 
COMMON-LISP:&ALLOW-OTHER-KEYS) "Shorthand for `(asdf:operate 'asdf:compile-op system)`. See OPERATE for details.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TEST-SYSTEM))
(SYSTEM:FSET 'TEST-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1271) 443014 
'(SYSTEM COMMON-LISP:&REST ARGS COMMON-LISP:&KEY FORCE FORCE-NOT VERBOSE VERSION 
COMMON-LISP:&ALLOW-OTHER-KEYS) "Shorthand for `(asdf:operate 'asdf:test-op system)`. See OPERATE for details.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-LOADED-P))
(SYSTEM:FSET 'COMPONENT-LOADED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1272) 445810 '(C) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ALREADY-LOADED-SYSTEMS))
(SYSTEM:FSET 'ALREADY-LOADED-SYSTEMS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1273) 445810 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REQUIRE-SYSTEM))
(SYSTEM:FSET 'REQUIRE-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1274) 
445810 '(S COMMON-LISP:&REST KEYS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) 
COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *MODULES-BEING-REQUIRED* COMMON-LISP:NIL)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1275))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPILE-OP 'REQUIRE-SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1277) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1278))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'REQUIRE-SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1279) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1280))
(MOP::ENSURE-METHOD 'RESOLVE-DEPENDENCY-COMBINATION :LAMBDA-LIST '(COMPONENT COMBINATOR 
ARGUMENTS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T (COMMON-LISP:LIST 'COMMON-LISP:EQL :REQUIRE) 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1281))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MODULE-PROVIDE-ASDF))
(SYSTEM:FSET 'MODULE-PROVIDE-ASDF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1282) 445810 '(NAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RESTART-UPGRADED-ASDF))
(SYSTEM:FSET 'RESTART-UPGRADED-ASDF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1284) 448580 'COMMON-LISP:NIL COMMON-LISP:NIL)
(UIOP/UTILITY:REGISTER-HOOK-FUNCTION '*POST-UPGRADE-RESTART-HOOK* 'RESTART-UPGRADED-ASDF)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/OUTPUT-TRANSLATIONS :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE) 
:SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#829? #830? #831? #832? #833? #834? #835? #836? #837? #838? #839? #840? 
#841? #842? #843? #844? #845? #846? #847? #848? #849? #850? #851? #852?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:ASDF/OUTPUT-TRANSLATIONS :ASDF) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/OUTPUT-TRANSLATIONS")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1285))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1286))
(COMMON-LISP:DEFVAR *OUTPUT-TRANSLATIONS* COMMON-LISP:NIL "Either NIL (for uninitialized), or a list of one element,
said element itself being a sorted list of mappings.
Each mapping is a pair of a source pathname and destination pathname,
and the order is by decreasing length of namestring of the source pathname.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1288) 450268 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SET-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'SET-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1289) 450268 '(NEW-VALUE) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION '(COMMON-LISP:SETF OUTPUT-TRANSLATIONS))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE (COMMON-LISP:SETF OUTPUT-TRANSLATIONS)))
(SYSTEM:FSET '(COMMON-LISP:SETF OUTPUT-TRANSLATIONS) (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1291) 450268 '(NEW-VALUE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OUTPUT-TRANSLATIONS-INITIALIZED-P))
(SYSTEM:FSET 'OUTPUT-TRANSLATIONS-INITIALIZED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1292) 450268 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEAR-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'CLEAR-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1293) 450268 'COMMON-LISP:NIL "Undoes any initialization of the output translations.")
(UIOP/CONFIGURATION:REGISTER-CLEAR-CONFIGURATION-HOOK 'CLEAR-OUTPUT-TRANSLATIONS)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE))
(SYSTEM:FSET 'VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1294) 450268 '(DIRECTIVE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-OUTPUT-TRANSLATIONS-FORM))
(SYSTEM:FSET 'VALIDATE-OUTPUT-TRANSLATIONS-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1295) 450268 '(FORM COMMON-LISP:&KEY LOCATION) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-OUTPUT-TRANSLATIONS-FILE))
(SYSTEM:FSET 'VALIDATE-OUTPUT-TRANSLATIONS-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1296) 450268 '(FILE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY))
(SYSTEM:FSET 'VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1297) 450268 '(COMMON-LISP:DIRECTORY) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-OUTPUT-TRANSLATIONS-STRING))
(SYSTEM:FSET 'PARSE-OUTPUT-TRANSLATIONS-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1298) 450268 '(COMMON-LISP:STRING COMMON-LISP:&KEY LOCATION) COMMON-LISP:NIL)
(SYSTEM:FSET '%COMPUTE-DEFAULT-OUTPUT-TRANSLATIONS-VALUE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1299) 450268 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *DEFAULT-OUTPUT-TRANSLATIONS* (%COMPUTE-DEFAULT-OUTPUT-TRANSLATIONS-VALUE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1300))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE WRAPPING-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'WRAPPING-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1301) 450268 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFPARAMETER *OUTPUT-TRANSLATIONS-FILE* (UIOP/PATHNAME:PARSE-UNIX-NAMESTRING 
"asdf-output-translations.conf"))
(COMMON-LISP:DEFPARAMETER *OUTPUT-TRANSLATIONS-DIRECTORY* (UIOP/PATHNAME:PARSE-UNIX-NAMESTRING 
"asdf-output-translations.conf.d/"))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE USER-OUTPUT-TRANSLATIONS-PATHNAME))
(SYSTEM:FSET 'USER-OUTPUT-TRANSLATIONS-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1302) 450268 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME))
(SYSTEM:FSET 'SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1303) 450268 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME))
(SYSTEM:FSET 'USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1304) 450268 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME))
(SYSTEM:FSET 'SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1305) 450268 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENVIRONMENT-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'ENVIRONMENT-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1306) 450268 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROCESS-OUTPUT-TRANSLATIONS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1307))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INHERIT-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'INHERIT-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1308) 450268 '(INHERIT COMMON-LISP:&KEY COLLECT) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE))
(SYSTEM:FSET 'PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1309) 450268 '(DIRECTIVE COMMON-LISP:&KEY INHERIT COLLECT) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'PROCESS-OUTPUT-TRANSLATIONS :LAMBDA-LIST '(X COMMON-LISP:&KEY 
(INHERIT *DEFAULT-OUTPUT-TRANSLATIONS*) COLLECT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1310))
(MOP::ENSURE-METHOD 'PROCESS-OUTPUT-TRANSLATIONS :LAMBDA-LIST '(COMMON-LISP:PATHNAME 
COMMON-LISP:&KEY INHERIT COLLECT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:PATHNAME)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1312))
(MOP::ENSURE-METHOD 'PROCESS-OUTPUT-TRANSLATIONS :LAMBDA-LIST '(COMMON-LISP:STRING 
COMMON-LISP:&KEY INHERIT COLLECT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:STRING)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1314))
(MOP::ENSURE-METHOD 'PROCESS-OUTPUT-TRANSLATIONS :LAMBDA-LIST '(X COMMON-LISP:&KEY 
INHERIT COLLECT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:NULL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1316))
(MOP::ENSURE-METHOD 'PROCESS-OUTPUT-TRANSLATIONS :LAMBDA-LIST '(FORM COMMON-LISP:&KEY 
INHERIT COLLECT) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:CONS)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1318))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPUTE-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'COMPUTE-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1320) 450268 '(COMMON-LISP:&OPTIONAL PARAMETER) "read the configuration, return it")
(COMMON-LISP:DEFVAR *OUTPUT-TRANSLATIONS-PARAMETER* COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INITIALIZE-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'INITIALIZE-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1322) 450268 '(COMMON-LISP:&OPTIONAL (PARAMETER *OUTPUT-TRANSLATIONS-PARAMETER*)) 
"read the configuration, initialize the internal configuration variable,
return the configuration")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DISABLE-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'DISABLE-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1323) 450268 'COMMON-LISP:NIL "Initialize output translations in a way that maps every file to itself,
effectively disabling the output translation facility.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'ENSURE-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1324) 450268 'COMMON-LISP:NIL COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'APPLY-OUTPUT-TRANSLATIONS)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE APPLY-OUTPUT-TRANSLATIONS))
(SYSTEM:FSET 'APPLY-OUTPUT-TRANSLATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1325) 450268 '(PATH) COMMON-LISP:NIL)
(COMMON-LISP:SETQ UIOP/PATHNAME:*OUTPUT-TRANSLATION-FUNCTION* 'APPLY-OUTPUT-TRANSLATIONS)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRANSLATE-JAR-PATHNAME))
(SYSTEM:FSET 'TRANSLATE-JAR-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1326) 450268 '(SOURCE WILDCARD) COMMON-LISP:NIL)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/SOURCE-REGISTRY :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE 
:ASDF/FIND-SYSTEM) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL 
:IMPORT-FROM COMMON-LISP:NIL :EXPORT (#853? #854? #855? #856? #857? #858? #859? #860? 
#861? #862? #863? #864? #865? #866? #867? #868? #869? #870? #871? #872? #873? #874? 
#875? #876? #877? #878? #879? #880? #881? #882? #883? #884? #885?) :INTERN COMMON-LISP:NIL 
:RECYCLE (:ASDF/SOURCE-REGISTRY :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/SOURCE-REGISTRY")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1329))
(COMMON-LISP:DEFVAR *DEFAULT-SOURCE-REGISTRY-EXCLUSIONS* '(".bzr" ".cdv" ".git" ".hg" 
".pc" ".svn" "CVS" "RCS" "SCCS" "_darcs" "_sgbak" "autom4te.cache" "cover_db" "_build" 
"debian"))
(COMMON-LISP:DEFVAR *SOURCE-REGISTRY-EXCLUSIONS* *DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*)
(COMMON-LISP:DEFVAR *SOURCE-REGISTRY* COMMON-LISP:NIL "Either NIL (for uninitialized), or an equal hash-table, mapping
system names to pathnames of .asd files")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SOURCE-REGISTRY-INITIALIZED-P))
(SYSTEM:FSET 'SOURCE-REGISTRY-INITIALIZED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1331) 465398 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLEAR-SOURCE-REGISTRY))
(SYSTEM:FSET 'CLEAR-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1332) 465398 'COMMON-LISP:NIL "Undoes any initialization of the source registry.")
(UIOP/CONFIGURATION:REGISTER-CLEAR-CONFIGURATION-HOOK 'CLEAR-SOURCE-REGISTRY)
(COMMON-LISP:DEFPARAMETER *WILD-ASD* (UIOP/PATHNAME:MAKE-PATHNAME* :DIRECTORY COMMON-LISP:NIL 
:NAME UIOP/PATHNAME:*WILD* :TYPE "asd" :VERSION :NEWEST))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECTORY-ASD-FILES))
(SYSTEM:FSET 'DIRECTORY-ASD-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1333) 465398 '(COMMON-LISP:DIRECTORY) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COLLECT-ASDS-IN-DIRECTORY))
(SYSTEM:FSET 'COLLECT-ASDS-IN-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1334) 465398 '(COMMON-LISP:DIRECTORY COLLECT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COLLECT-SUB*DIRECTORIES-ASD-FILES))
(SYSTEM:FSET 'COLLECT-SUB*DIRECTORIES-ASD-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1335) 465398 '(COMMON-LISP:DIRECTORY COMMON-LISP:&KEY (EXCLUDE *DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*) 
COLLECT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-SOURCE-REGISTRY-DIRECTIVE))
(SYSTEM:FSET 'VALIDATE-SOURCE-REGISTRY-DIRECTIVE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1338) 465398 '(DIRECTIVE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-SOURCE-REGISTRY-FORM))
(SYSTEM:FSET 'VALIDATE-SOURCE-REGISTRY-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1339) 465398 '(FORM COMMON-LISP:&KEY LOCATION) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-SOURCE-REGISTRY-FILE))
(SYSTEM:FSET 'VALIDATE-SOURCE-REGISTRY-FILE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1340) 465398 '(FILE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE VALIDATE-SOURCE-REGISTRY-DIRECTORY))
(SYSTEM:FSET 'VALIDATE-SOURCE-REGISTRY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1341) 465398 '(COMMON-LISP:DIRECTORY) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-SOURCE-REGISTRY-STRING))
(SYSTEM:FSET 'PARSE-SOURCE-REGISTRY-STRING (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1342) 465398 '(COMMON-LISP:STRING COMMON-LISP:&KEY LOCATION) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-ASD-DIRECTORY))
(SYSTEM:FSET 'REGISTER-ASD-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1344) 465398 '(COMMON-LISP:DIRECTORY COMMON-LISP:&KEY RECURSE EXCLUDE COLLECT) COMMON-LISP:NIL)
(SYSTEM:FSET '%COMPUTE-DEFAULT-SOURCE-REGISTRIES-VALUE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1345) 465398 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *DEFAULT-SOURCE-REGISTRIES* (%COMPUTE-DEFAULT-SOURCE-REGISTRIES-VALUE) 
"List of default source registries")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1346))
(COMMON-LISP:DEFPARAMETER *SOURCE-REGISTRY-FILE* (UIOP/PATHNAME:PARSE-UNIX-NAMESTRING 
"source-registry.conf"))
(COMMON-LISP:DEFPARAMETER *SOURCE-REGISTRY-DIRECTORY* (UIOP/PATHNAME:PARSE-UNIX-NAMESTRING 
"source-registry.conf.d/"))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE WRAPPING-SOURCE-REGISTRY))
(SYSTEM:FSET 'WRAPPING-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1347) 465398 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DEFAULT-USER-SOURCE-REGISTRY))
(SYSTEM:FSET 'DEFAULT-USER-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1348) 465398 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DEFAULT-SYSTEM-SOURCE-REGISTRY))
(SYSTEM:FSET 'DEFAULT-SYSTEM-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1349) 465398 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE USER-SOURCE-REGISTRY))
(SYSTEM:FSET 'USER-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1350) 465398 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-SOURCE-REGISTRY))
(SYSTEM:FSET 'SYSTEM-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1351) 465398 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE USER-SOURCE-REGISTRY-DIRECTORY))
(SYSTEM:FSET 'USER-SOURCE-REGISTRY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1352) 465398 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-SOURCE-REGISTRY-DIRECTORY))
(SYSTEM:FSET 'SYSTEM-SOURCE-REGISTRY-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1353) 465398 '(COMMON-LISP:&KEY (DIRECTION :INPUT)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENVIRONMENT-SOURCE-REGISTRY))
(SYSTEM:FSET 'ENVIRONMENT-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1354) 465398 'COMMON-LISP:NIL COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'PROCESS-SOURCE-REGISTRY)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROCESS-SOURCE-REGISTRY))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1355))
(UIOP/UTILITY:UNDEFINE-FUNCTION 'INHERIT-SOURCE-REGISTRY)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INHERIT-SOURCE-REGISTRY))
(SYSTEM:FSET 'INHERIT-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1356) 465398 '(INHERIT COMMON-LISP:&KEY REGISTER) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'PROCESS-SOURCE-REGISTRY-DIRECTIVE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PROCESS-SOURCE-REGISTRY-DIRECTIVE))
(SYSTEM:FSET 'PROCESS-SOURCE-REGISTRY-DIRECTIVE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1357) 465398 '(DIRECTIVE COMMON-LISP:&KEY INHERIT REGISTER) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'PROCESS-SOURCE-REGISTRY :LAMBDA-LIST '(X COMMON-LISP:&KEY INHERIT 
REGISTER) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:SYMBOL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1358))
(MOP::ENSURE-METHOD 'PROCESS-SOURCE-REGISTRY :LAMBDA-LIST '(COMMON-LISP:PATHNAME 
COMMON-LISP:&KEY INHERIT REGISTER) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:PATHNAME)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1360))
(MOP::ENSURE-METHOD 'PROCESS-SOURCE-REGISTRY :LAMBDA-LIST '(COMMON-LISP:STRING COMMON-LISP:&KEY 
INHERIT REGISTER) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:STRING)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1362))
(MOP::ENSURE-METHOD 'PROCESS-SOURCE-REGISTRY :LAMBDA-LIST '(X COMMON-LISP:&KEY INHERIT 
REGISTER) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:NULL)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1364))
(MOP::ENSURE-METHOD 'PROCESS-SOURCE-REGISTRY :LAMBDA-LIST '(FORM COMMON-LISP:&KEY 
INHERIT REGISTER) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:CONS)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1366))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FLATTEN-SOURCE-REGISTRY))
(SYSTEM:FSET 'FLATTEN-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1368) 465398 '(COMMON-LISP:&OPTIONAL PARAMETER) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPUTE-SOURCE-REGISTRY))
(SYSTEM:FSET 'COMPUTE-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1371) 465398 '(COMMON-LISP:&OPTIONAL PARAMETER (REGISTRY *SOURCE-REGISTRY*)) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *SOURCE-REGISTRY-PARAMETER* COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INITIALIZE-SOURCE-REGISTRY))
(SYSTEM:FSET 'INITIALIZE-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1373) 465398 '(COMMON-LISP:&OPTIONAL (PARAMETER *SOURCE-REGISTRY-PARAMETER*)) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENSURE-SOURCE-REGISTRY))
(SYSTEM:FSET 'ENSURE-SOURCE-REGISTRY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1374) 465398 '(COMMON-LISP:&OPTIONAL PARAMETER) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-SOURCE-REGISTRY-SEARCH))
(SYSTEM:FSET 'SYSDEF-SOURCE-REGISTRY-SEARCH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1375) 465398 '(SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/BACKWARD-INTERNALS :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE 
:ASDF/SYSTEM :ASDF/COMPONENT :ASDF/OPERATION :ASDF/FIND-SYSTEM :ASDF/ACTION :ASDF/LISP-ACTION) 
:SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#886? #887? #888? #889? #890? #891?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/BACKWARD-INTERNALS 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/BACKWARD-INTERNALS")
(SYSTEM:FSET '%COMPUTE-+ASDF-METHODS+-VALUE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1376) 480049 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR +ASDF-METHODS+ (%COMPUTE-+ASDF-METHODS+-VALUE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1377))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %REMOVE-COMPONENT-INLINE-METHODS))
(SYSTEM:FSET '%REMOVE-COMPONENT-INLINE-METHODS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1378) 480049 '(COMPONENT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %DEFINE-COMPONENT-INLINE-METHODS))
(SYSTEM:FSET '%DEFINE-COMPONENT-INLINE-METHODS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1380) 480049 '(RET COMMON-LISP:REST) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE %REFRESH-COMPONENT-INLINE-METHODS))
(SYSTEM:FSET '%REFRESH-COMPONENT-INLINE-METHODS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1381) 480049 '(COMPONENT COMMON-LISP:REST) COMMON-LISP:NIL)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1382))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE LOAD-SYSDEF))
(SYSTEM:FSET 'LOAD-SYSDEF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1383) 481718 
'(NAME COMMON-LISP:PATHNAME) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-TEMPORARY-PACKAGE))
(SYSTEM:FSET 'MAKE-TEMPORARY-PACKAGE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1384) 481718 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/PARSE-DEFSYSTEM :NICKNAMES 
(:ASDF/DEFSYSTEM) :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :ASDF/DRIVER 
:ASDF/UPGRADE :ASDF/CACHE :ASDF/COMPONENT :ASDF/SYSTEM :ASDF/FIND-SYSTEM :ASDF/FIND-COMPONENT 
:ASDF/LISP-ACTION :ASDF/OPERATE :ASDF/BACKWARD-INTERNALS) :SHADOW COMMON-LISP:NIL 
:SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM ((:ASDF/SYSTEM #892? #893?)) 
:EXPORT (#894? #895? #896? #897? #898? #899? #900? #901? #902? #903?) :INTERN COMMON-LISP:NIL 
:RECYCLE (:ASDF/PARSE-DEFSYSTEM :ASDF/DEFSYSTEM :ASDF) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/PARSE-DEFSYSTEM")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DETERMINE-SYSTEM-DIRECTORY))
(SYSTEM:FSET 'DETERMINE-SYSTEM-DIRECTORY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1385) 483093 '(COMMON-LISP:PATHNAME) COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *DEFAULT-COMPONENT-CLASS* 'CL-SOURCE-FILE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CLASS-FOR-TYPE))
(SYSTEM:FSET 'CLASS-FOR-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1387) 
484334 '(PARENT COMMON-LISP:TYPE) COMMON-LISP:NIL)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1388))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'NON-SYSTEM-SYSTEM 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1389))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1394))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'NON-TOPLEVEL-SYSTEM 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1395))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-ERROR-COMPONENT))
(SYSTEM:FSET 'SYSDEF-ERROR-COMPONENT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1400) 484954 '(MSG COMMON-LISP:TYPE NAME VALUE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE CHECK-COMPONENT-INPUT))
(SYSTEM:FSET 'CHECK-COMPONENT-INPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1401) 484954 '(COMMON-LISP:TYPE NAME WEAKLY-DEPENDS-ON DEPENDS-ON COMPONENTS) "A partial test of the values of a component.")
(UIOP/UTILITY:UNDEFINE-FUNCTION 'NORMALIZE-VERSION)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE NORMALIZE-VERSION))
(SYSTEM:FSET 'NORMALIZE-VERSION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1402) 
484954 '(FORM COMMON-LISP:&KEY COMMON-LISP:PATHNAME COMPONENT PARENT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-DEPENDENCY-DEF))
(SYSTEM:FSET 'PARSE-DEPENDENCY-DEF (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1406) 488289 '(DD) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-DEPENDENCY-DEFS))
(SYSTEM:FSET 'PARSE-DEPENDENCY-DEFS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1407) 488289 '(DD-LIST) "Parse the dependency defs in DD-LIST into canonical form by translating all
system names contained using COERCE-NAME. Return the result.")
(UIOP/UTILITY:UNDEFINE-FUNCTION 'PARSE-COMPONENT-FORM)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PARSE-COMPONENT-FORM))
(SYSTEM:FSET 'PARSE-COMPONENT-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1408) 488289 '(PARENT OPTIONS COMMON-LISP:&KEY PREVIOUS-SERIAL-COMPONENT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-SYSTEM-DEFINITION))
(SYSTEM:FSET 'REGISTER-SYSTEM-DEFINITION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1410) 488289 '(NAME COMMON-LISP:&REST OPTIONS COMMON-LISP:&KEY COMMON-LISP:PATHNAME 
(COMMON-LISP:CLASS 'SYSTEM) (SOURCE-FILE COMMON-LISP:NIL SFP) DEFSYSTEM-DEPENDS-ON 
COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(SYSTEM:FSET 'DEFSYSTEM (SYSTEM:MAKE-MACRO 'DEFSYSTEM (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1412)) 488289 '(NAME COMMON-LISP:&BODY OPTIONS))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/BUNDLE :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/COMPONENT 
:ASDF/SYSTEM :ASDF/FIND-SYSTEM :ASDF/FIND-COMPONENT :ASDF/OPERATION :ASDF/ACTION 
:ASDF/LISP-ACTION :ASDF/PLAN :ASDF/OPERATE :ASDF/DEFSYSTEM) :SHADOW COMMON-LISP:NIL 
:SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#906? 
#907? #908? #909? #910? #911? #912? #913? #914? #915? #916? #917? #918? #919? #920? 
#921? #922? #923? #924? #925? #926? #927? #928? #929? #930? #931? #932? #933? #934? 
#935? #936? #937? #938? #939? #940? #941? #942? #943? #944? #945? #946?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:ASDF/BUNDLE :ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL 
:UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/BUNDLE")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1413))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1417))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1418))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1421))
(MOP::ENSURE-METHOD 'PROLOGUE-CODE :LAMBDA-LIST '(X) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1428) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1429))
(MOP::ENSURE-METHOD 'EPILOGUE-CODE :LAMBDA-LIST '(X) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1430) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1431))
(MOP::ENSURE-METHOD 'PREFIX-LISP-OBJECT-FILES :LAMBDA-LIST '(X) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1432) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1433))
(MOP::ENSURE-METHOD 'POSTFIX-LISP-OBJECT-FILES :LAMBDA-LIST '(X) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1434) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1435))
(MOP::ENSURE-METHOD 'EXTRA-OBJECT-FILES :LAMBDA-LIST '(X) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1436) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1437))
(MOP::ENSURE-METHOD 'EXTRA-BUILD-ARGS :LAMBDA-LIST '(X) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1438) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1439))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1440))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1441))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATION-MONOLITHIC-P))
(SYSTEM:FSET 'OPERATION-MONOLITHIC-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1443) 497605 '(OP) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'GATHER-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1444))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1448))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1450))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1452))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1454))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1456))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1458))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1460))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1462))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1464))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1466))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1468))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1469))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1471))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1474))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE BUNDLE-PATHNAME-TYPE))
(SYSTEM:FSET 'BUNDLE-PATHNAME-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1476) 497605 '(BUNDLE-TYPE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE BUNDLE-OUTPUT-FILES))
(SYSTEM:FSET 'BUNDLE-OUTPUT-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1477) 497605 '(O C) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BUNDLE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1479) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1480))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'IMAGE-OP 'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1481) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1482))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS '(:BEFORE) :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PROGRAM-OP 'SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1483) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1484))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1485))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1487))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1488))
(MOP::ENSURE-METHOD 'COMMON-LISP:INITIALIZE-INSTANCE :LAMBDA-LIST '(INSTANCE COMMON-LISP:&REST 
INITARGS COMMON-LISP:&KEY (NAME-SUFFIX COMMON-LISP:NIL NAME-SUFFIX-P) COMMON-LISP:&ALLOW-OTHER-KEYS) 
:QUALIFIERS '(:AFTER) :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'BUNDLE-OP)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1489))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE BUNDLABLE-FILE-P))
(SYSTEM:FSET 'BUNDLABLE-FILE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1491) 
506304 '(COMMON-LISP:PATHNAME) COMMON-LISP:NIL)
(UIOP/UTILITY:UNDEFINE-FUNCTION 'TRIVIAL-SYSTEM-P)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRIVIAL-SYSTEM-P))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1492))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE USER-SYSTEM-P))
(SYSTEM:FSET 'USER-SYSTEM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1493) 
506304 '(S) COMMON-LISP:NIL)
(COMMON-LISP:DEFTYPE USER-SYSTEM COMMON-LISP:NIL '(COMMON-LISP:AND SYSTEM (COMMON-LISP:SATISFIES 
USER-SYSTEM-P)))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DIRECT-DEPENDENCY-FILES))
(SYSTEM:FSET 'DIRECT-DEPENDENCY-FILES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1494) 508714 '(O C COMMON-LISP:&KEY (TEST 'COMMON-LISP:IDENTITY) (KEY 'OUTPUT-FILES) 
COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'GATHER-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1497) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1498))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SELECT-BUNDLE-OPERATION))
(SYSTEM:FSET 'SELECT-BUNDLE-OPERATION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1499) 508714 '(COMMON-LISP:TYPE COMMON-LISP:&OPTIONAL MONOLITHIC) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE MAKE-BUILD))
(SYSTEM:FSET 'MAKE-BUILD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1500) 508714 
'(SYSTEM COMMON-LISP:&REST ARGS COMMON-LISP:&KEY (MONOLITHIC COMMON-LISP:NIL) (COMMON-LISP:TYPE 
:FASL) (MOVE-HERE COMMON-LISP:NIL MOVE-HERE-P) COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE BUNDLE-SYSTEM))
(SYSTEM:FSET 'BUNDLE-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1501) 
508714 '(SYSTEM COMMON-LISP:&REST ARGS COMMON-LISP:&KEY FORCE (VERBOSE COMMON-LISP:T) 
VERSION COMMON-LISP:&ALLOW-OTHER-KEYS) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-BUNDLE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1502))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-BUNDLE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1506) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1507))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-BUNDLE-OP 'SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1508) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1509))
(MOP::ENSURE-METHOD 'MARK-OPERATION-DONE :LAMBDA-LIST '(O C) :QUALIFIERS '(:AFTER) 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-BUNDLE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1510) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1511))
(MOP::ENSURE-METHOD 'TRIVIAL-SYSTEM-P :LAMBDA-LIST '(S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1512) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1514))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPILED-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1516) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1517))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'COMPILED-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1518) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1519))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-SOURCE-OP 'COMPILED-FILE)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1520) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1521))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPILED-FILE)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1522) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1523))
(MOP::ENSURE-METHOD 'TRIVIAL-SYSTEM-P :LAMBDA-LIST '(S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'PREBUILT-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1524) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1525))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LINK-OP 'PREBUILT-SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1526) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1527))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-COMPILE-BUNDLE-OP 'PREBUILT-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1528) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1529))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LIB-OP 'PREBUILT-SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1530) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1531))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'DLL-OP 'PREBUILT-SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1532) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1533))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'GATHER-OP 'PREBUILT-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1534) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1535))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LIB-OP 'PREBUILT-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1536) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1537))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'DELIVER-ASD-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1538) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1539))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'DELIVER-ASD-OP 'SYSTEM)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1540) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1545))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O C) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-COMPILE-BUNDLE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1550) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1552))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'PRECOMPILED-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1554) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1555))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-OP 'PRECOMPILED-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1556) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1557))
(MOP::ENSURE-METHOD 'COMPONENT-DEPENDS-ON :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'LOAD-BUNDLE-OP 'PRECOMPILED-SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1558))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1562))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1564))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1566))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1568))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1570))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1572))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/CONCATENATE-SOURCE :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE 
:ASDF/COMPONENT :ASDF/OPERATION :ASDF/SYSTEM :ASDF/FIND-SYSTEM :ASDF/ACTION :ASDF/LISP-ACTION 
:ASDF/BUNDLE) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM 
COMMON-LISP:NIL :EXPORT (#947? #948? #949? #950? #951? #952? #953? #954?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:ASDF/CONCATENATE-SOURCE :ASDF) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/CONCATENATE-SOURCE")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1574))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1576))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1577))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1578))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1579))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1580))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1582))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1584))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1586))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1587))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1589))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1591))
(MOP::ENSURE-METHOD 'INPUT-FILES :LAMBDA-LIST '(OPERATION S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-CONCATENATE-SOURCE-OP 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1593) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1595))
(MOP::ENSURE-METHOD 'OUTPUT-FILES :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-COMPILE-CONCATENATED-SOURCE-OP 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1597) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1598))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-CONCATENATE-SOURCE-OP 'SYSTEM)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1599) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1600))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-LOAD-CONCATENATED-SOURCE-OP 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1601) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1602))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-COMPILE-CONCATENATED-SOURCE-OP 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1603) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1604))
(MOP::ENSURE-METHOD 'PERFORM :LAMBDA-LIST '(O S) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP 
'SYSTEM)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1605) :FAST-FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1606))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/BACKWARD-INTERFACE :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE 
:ASDF/COMPONENT :ASDF/SYSTEM :ASDF/FIND-SYSTEM :ASDF/OPERATION :ASDF/ACTION :ASDF/LISP-ACTION 
:ASDF/PLAN :ASDF/OPERATE :ASDF/OUTPUT-TRANSLATIONS) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM 
COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#955? #956? #957? #958? #959? 
#960? #961? #962? #963? #964? #965? #966? #967? #968? #969? #970? #971? #972?) :INTERN 
COMMON-LISP:NIL :RECYCLE (:ASDF/BACKWARD-INTERFACE :ASDF) :MIX COMMON-LISP:NIL :REEXPORT 
COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/BACKWARD-INTERFACE")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1607))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'OPERATION-ERROR 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1608))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1613))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1614))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1615))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-LOAD-DEPENDENCIES))
(SYSTEM:FSET 'COMPONENT-LOAD-DEPENDENCIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1616) 527305 '(COMPONENT) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATION-FORCED))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1617))
(MOP::ENSURE-METHOD 'OPERATION-FORCED :LAMBDA-LIST '(O) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1618) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1619))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATION-ON-WARNINGS))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1620))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE OPERATION-ON-FAILURE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1621))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE (COMMON-LISP:SETF OPERATION-ON-WARNINGS)))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1622))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE (COMMON-LISP:SETF OPERATION-ON-FAILURE)))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1623))
(MOP::ENSURE-METHOD 'OPERATION-ON-WARNINGS :LAMBDA-LIST '(O) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1624) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1625))
(MOP::ENSURE-METHOD 'OPERATION-ON-FAILURE :LAMBDA-LIST '(O) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1626) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1627))
(MOP::ENSURE-METHOD '(COMMON-LISP:SETF OPERATION-ON-WARNINGS) :LAMBDA-LIST '(X O) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'OPERATION)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1628) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1629))
(MOP::ENSURE-METHOD '(COMMON-LISP:SETF OPERATION-ON-FAILURE) :LAMBDA-LIST '(X O) 
:QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 
'COMMON-LISP:T 'OPERATION)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1630) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1631))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSTEM-DEFINITION-PATHNAME))
(SYSTEM:FSET 'SYSTEM-DEFINITION-PATHNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1632) 527305 '(X) "Function ASDF:SYSTEM-DEFINITION-PATHNAME is obsolete.
It used to expose ASDF internals with subtle differences with respect to
user expectations, that have been refactored away since.
We recommend you use ASDF:SYSTEM-SOURCE-FILE instead
for a mostly compatible replacement that we're supporting,
or even ASDF:SYSTEM-SOURCE-DIRECTORY or ASDF:SYSTEM-RELATIVE-PATHNAME
if that's whay you mean.")
(UIOP/UTILITY:UNDEFINE-FUNCTION 'TRAVERSE)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE TRAVERSE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1633))
(MOP::ENSURE-METHOD 'TRAVERSE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#973? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:STRING 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1634))
(MOP::ENSURE-METHOD 'TRAVERSE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#973? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:SYMBOL 
'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1636))
(MOP::ENSURE-METHOD 'TRAVERSE :LAMBDA-LIST '(OPERATION COMPONENT COMMON-LISP:&REST 
#973? COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1638))
(MOP::ENSURE-METHOD 'TRAVERSE :LAMBDA-LIST '(O C COMMON-LISP:&REST KEYS COMMON-LISP:&KEY 
PLAN-CLASS COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'OPERATION 'COMPONENT)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1640))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY))
(SYSTEM:FSET 'ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1642) 530139 '(COMMON-LISP:&KEY (CENTRALIZE-LISP-BINARIES COMMON-LISP:NIL) 
(DEFAULT-TOPLEVEL-DIRECTORY (UIOP/PATHNAME:SUBPATHNAME (COMMON-LISP:USER-HOMEDIR-PATHNAME) 
".fasls/")) (INCLUDE-PER-USER-INFORMATION COMMON-LISP:NIL) (MAP-ALL-SOURCE-FILES 
(COMMON-LISP:OR COMMON-LISP:NIL)) (SOURCE-TO-TARGET-MAPPINGS COMMON-LISP:NIL) (FILE-TYPES 
(SYSTEM::BACKQ-CONS (UIOP/LISP-BUILD:COMPILE-FILE-TYPE) '("build-report")))) COMMON-LISP:NIL)
(MOP::ENSURE-METHOD 'OPERATE :LAMBDA-LIST '(OPERATION-CLASS SYSTEM COMMON-LISP:&REST 
ARGS COMMON-LISP:&KEY COMMON-LISP:&ALLOW-OTHER-KEYS) :QUALIFIERS '(:BEFORE) :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMMON-LISP:T 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1643))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE RUN-SHELL-COMMAND))
(SYSTEM:FSET 'RUN-SHELL-COMMAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1645) 
533107 '(CONTROL-STRING COMMON-LISP:&REST ARGS) "Interpolate ARGS into CONTROL-STRING as if by FORMAT, and
synchronously execute the result using a Bourne-compatible shell, with
output to *VERBOSE-OUT*.  Returns the shell's exit code.

PLEASE DO NOT USE.
Deprecated function, for backward-compatibility only.
Please use UIOP:RUN-PROGRAM instead.")
(COMMON-LISP:DEFVAR *ASDF-VERBOSE* COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE COMPONENT-PROPERTY))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1647))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE (COMMON-LISP:SETF COMPONENT-PROPERTY)))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1648))
(MOP::ENSURE-METHOD 'COMPONENT-PROPERTY :LAMBDA-LIST '(C PROPERTY) :QUALIFIERS 'COMMON-LISP:NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (COMMON-LISP:LIST 'COMPONENT 'COMMON-LISP:T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1649) :FAST-FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1650))
(MOP::ENSURE-METHOD '(COMMON-LISP:SETF COMPONENT-PROPERTY) :LAMBDA-LIST '(NEW-VALUE 
C PROPERTY) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'COMMON-LISP:T 'COMPONENT 'COMMON-LISP:T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1651))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/PACKAGE-SYSTEM :NICKNAMES 
COMMON-LISP:NIL :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/DEFSYSTEM 
:ASDF/UPGRADE :ASDF/COMPONENT :ASDF/SYSTEM :ASDF/FIND-SYSTEM :ASDF/LISP-ACTION) :SHADOW 
COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT (#976? #977? #978? #979? #980? #981?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/PACKAGE-SYSTEM 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/PACKAGE-SYSTEM")
(COMMON-LISP:DEFPARAMETER *DEFPACKAGE-FORMS* '(COMMON-LISP:DEFPACKAGE UIOP/PACKAGE:DEFINE-PACKAGE))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE INITIAL-PACKAGE-SYSTEMS-TABLE))
(SYSTEM:FSET 'INITIAL-PACKAGE-SYSTEMS-TABLE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1652) 535472 'COMMON-LISP:NIL COMMON-LISP:NIL)
(COMMON-LISP:DEFVAR *PACKAGE-SYSTEMS* (INITIAL-PACKAGE-SYSTEMS-TABLE))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1653))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE DEFPACKAGE-FORM-P))
(SYSTEM:FSET 'DEFPACKAGE-FORM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1654) 
535472 '(FORM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE STREAM-DEFPACKAGE-FORM))
(SYSTEM:FSET 'STREAM-DEFPACKAGE-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1655) 535472 '(COMMON-LISP:STREAM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE FILE-DEFPACKAGE-FORM))
(SYSTEM:FSET 'FILE-DEFPACKAGE-FORM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1656) 535472 '(FILE) "Return the first DEFPACKAGE form in FILE.")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1658))
(MOP::ENSURE-METHOD 'COMMON-LISP:PRINT-OBJECT :LAMBDA-LIST '(COMMON-LISP:CONDITION 
COMMON-LISP:STREAM) :QUALIFIERS 'COMMON-LISP:NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(COMMON-LISP:LIST 'PACKAGE-SYSTEM-MISSING-PACKAGE-ERROR 'COMMON-LISP:T)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1659))
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PACKAGE-DEPENDENCIES))
(SYSTEM:FSET 'PACKAGE-DEPENDENCIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1664) 535472 '(DEFPACKAGE-FORM) "Return a list of packages depended on by the package
defined in DEFPACKAGE-FORM.  A package is depended upon if
the DEFPACKAGE-FORM uses it or imports a symbol from it.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PACKAGE-DESIGNATOR-NAME))
(SYSTEM:FSET 'PACKAGE-DESIGNATOR-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1666) 535472 '(COMMON-LISP:PACKAGE) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE REGISTER-SYSTEM-PACKAGES))
(SYSTEM:FSET 'REGISTER-SYSTEM-PACKAGES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1667) 535472 '(SYSTEM PACKAGES) "Register SYSTEM as providing PACKAGES.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PACKAGE-NAME-SYSTEM))
(SYSTEM:FSET 'PACKAGE-NAME-SYSTEM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1668) 535472 '(COMMON-LISP:PACKAGE-NAME) "Return the name of the SYSTEM providing PACKAGE-NAME, if such exists,
otherwise return a default system name computed from PACKAGE-NAME.")
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE PACKAGE-SYSTEM-FILE-DEPENDENCIES))
(SYSTEM:FSET 'PACKAGE-SYSTEM-FILE-DEPENDENCIES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1669) 535472 '(FILE COMMON-LISP:&OPTIONAL SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SAME-PACKAGE-SYSTEM-P))
(SYSTEM:FSET 'SAME-PACKAGE-SYSTEM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1670) 535472 '(SYSTEM NAME COMMON-LISP:DIRECTORY SUBPATH DEPENDENCIES) COMMON-LISP:NIL)
(COMMON-LISP:PROCLAIM '(COMMON-LISP:NOTINLINE SYSDEF-PACKAGE-SYSTEM-SEARCH))
(SYSTEM:FSET 'SYSDEF-PACKAGE-SYSTEM-SEARCH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1671) 535472 '(SYSTEM) COMMON-LISP:NIL)
(COMMON-LISP:SETQ *SYSTEM-DEFINITION-SEARCH-FUNCTIONS* (COMMON-LISP:ADJOIN 'SYSDEF-PACKAGE-SYSTEM-SEARCH 
*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/INTERFACE :NICKNAMES (:ASDF 
:ASDF-UTILITIES) :DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE 
:ASDF/CACHE :ASDF/COMPONENT :ASDF/SYSTEM :ASDF/FIND-SYSTEM :ASDF/FIND-COMPONENT :ASDF/OPERATION 
:ASDF/ACTION :ASDF/LISP-ACTION :ASDF/OUTPUT-TRANSLATIONS :ASDF/SOURCE-REGISTRY :ASDF/PLAN 
:ASDF/OPERATE :ASDF/PARSE-DEFSYSTEM :ASDF/BUNDLE :ASDF/CONCATENATE-SOURCE :ASDF/BACKWARD-INTERNALS 
:ASDF/BACKWARD-INTERFACE :ASDF/PACKAGE-SYSTEM) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM 
COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL :EXPORT (#982? #983? #984? #985? #986? 
#987? #988? #989? #990? #991? #992? #993? #994? #995? #996? #997? #998? #999? #1000? 
#1001? #1002? #1003? #1004? #1005? #1006? #1007? #1008? #1009? #1010? #1011? #1012? 
#1013? #1014? #1015? #1016? #1017? #1018? #1019? #1020? #1021? #1022? #1023? #1024? 
#1025? #1026? #1027? #1028? #1029? #1030? #1031? #1032? #1033? #1034? #1035? #1036? 
#1037? #1038? #1039? #1040? #1041? #1042? #1043? #1044? #1045? #1046? #1047? #1048? 
#1049? #1050? #1051? #1052? #1053? #1054? #1055? #1056? #1057? #1058? #1059? #1060? 
#1061? #1062? #1063? #1064? #1065? #1066? #1067? #1068? #1069? #1070? #1071? #1072? 
#1073? #1074? #1075? #1076? #1077? #1078? #1079? #1080? #1081? #1082? #1083? #1084? 
#1085? #1086? #1087? #1088? #1089? #1090? #1091? #1092? #1093? #1094? #1095? #1096? 
#1097? #1098? #1099? #1100? #1101? #1102? #1103? #1104? #1105? #1106? #1107? #1108? 
#1109? #1110? #1111? #1112? #1113? #1114? #1115? #1116? #1117? #1118? #1119? #1120? 
#1121? #1122? #1123? #1124? #1125? #1126? #1127? #1128? #1129? #1130? #1131? #1132? 
#1133? #1134? #1135? #1136? #1137? #1138? #1139? #1140? #1141? #1142? #1143? #1144? 
#1145? #1146? #1147? #1148? #1149? #1150? #1151? #1152? #1153? #1154? #1155? #1156? 
#1157? #1158? #1159? #1160? #1161? #1162? #1163? #1164? #1165? #1166? #1167? #1168? 
#1169? #1170? #1171? #1172? #1173? #1174? #1175? #1176? #1177? #1178? #1179? #1180? 
#1181? #1182? #1183? #1184? #1185? #1186? #1187? #1188? #1189? #1190? #1191? #1192? 
#1193? #1194? #1195? #1196? #1197? #1198? #1199? #1200? #1201? #1202? #1203? #1204? 
#1205? #1206? #1207?) :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/INTERFACE :ASDF) :MIX 
COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN (#1208? #1209?)))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/USER :NICKNAMES (:ASDF-USER) 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/INTERFACE) :SHADOW 
COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM COMMON-LISP:NIL 
:EXPORT COMMON-LISP:NIL :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/USER :ASDF-USER) 
:MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(COMMON-LISP:APPLY 'UIOP/PACKAGE:ENSURE-PACKAGE '(:ASDF/FOOTER :NICKNAMES COMMON-LISP:NIL 
:DOCUMENTATION COMMON-LISP:NIL :USE (:UIOP/COMMON-LISP :UIOP :ASDF/UPGRADE :ASDF/OPERATE 
:ASDF/BUNDLE) :SHADOW COMMON-LISP:NIL :SHADOWING-IMPORT-FROM COMMON-LISP:NIL :IMPORT-FROM 
COMMON-LISP:NIL :EXPORT COMMON-LISP:NIL :INTERN COMMON-LISP:NIL :RECYCLE (:ASDF/FOOTER 
:ASDF) :MIX COMMON-LISP:NIL :REEXPORT COMMON-LISP:NIL :UNINTERN COMMON-LISP:NIL))
(SYSTEM:%IN-PACKAGE "ASDF/FOOTER")
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1672))
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1673))
(COMMON-LISP:PROVIDE "asdf")
(COMMON-LISP:PROVIDE "ASDF")
(CLEANUP-UPGRADED-ASDF)
(COMMON-LISP:FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1674))
