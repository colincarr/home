"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Users/cpc26/src/abcl/src/org/armedbear/lisp/run-program.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:PROCESS- #:G1964084 #:G1964139 #:G1964209 #:G1964263 #:G1964333 #:G1964388 #:G1964457 #:G1964512 #:G1964790 #:G1964855))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.run_program"))
(SYSTEM:%IN-PACKAGE "SYSTEM")
(REQUIRE "JAVA")
(EXPORT '(RUN-PROGRAM PROCESS PROCESS-P PROCESS-INPUT PROCESS-OUTPUT PROCESS-ERROR 
PROCESS-ALIVE-P PROCESS-WAIT PROCESS-EXIT-CODE PROCESS-KILL))
(FSET 'RUN-PROGRAM (GET-FASL-FUNCTION *FASL-LOADER* 0) 1771 '(PROGRAM ARGS &KEY ENVIRONMENT 
(WAIT T) CLEAR-ENVIRONMENT) "Run PROGRAM with ARGS in with ENVIRONMENT variables.

Possibly WAIT for subprocess to exit.

Optionally CLEAR-ENVIRONMENT of the subprocess of any non specified values.

Creates a new process running the the PROGRAM.

ARGS are a list of strings to be passed to the program as arguments. 

For no arguments, use nil which means that just the name of the
program is passed as arg 0.

Returns a process structure containing the JAVA-OBJECT wrapped Process
object, and the PROCESS-INPUT, PROCESS-OUTPUT, and PROCESS-ERROR streams.

c.f. http://download.oracle.com/javase/6/docs/api/java/lang/Process.html

Notes about Unix environments (as in the :environment):

    * The ABCL implementation of run-program, like SBCL, Perl and many
      other programs, copies the Unix environment by default.

    * Running Unix programs from a setuid process, or in any other
      situation where the Unix environment is under the control of
      someone else, is a mother lode of security problems. If you are
      contemplating doing this, read about it first. (The Perl
      community has a lot of good documentation about this and other
      security issues in script-like programs.

The &key arguments have the following meanings:

:environment 
    An alist of STRINGs (name . value) describing new
    environment values that replace existing ones.

:clear-env
    If non-NIL, the current environment is cleared before the
    values supplied by :environment are inserted.

:wait 
    If non-NIL, which is the default, wait until the created process
    finishes. If NIL, continue running Lisp until the program
    finishes.
")
(COMPILER-DEFSTRUCT 'PROCESS :CONC-NAME '#0? :DEFAULT-CONSTRUCTOR 'NIL :CONSTRUCTORS 
'((%MAKE-PROCESS (JPROCESS))) :COPIER 'COPY-PROCESS :PREDICATE '"PROCESS-P" :DIRECT-SLOTS 
'(#(DEFSTRUCT-SLOT-DESCRIPTION JPROCESS 0 PROCESS-JPROCESS NIL T NIL) #(DEFSTRUCT-SLOT-DESCRIPTION
 INPUT 1 PROCESS-INPUT NIL T NIL) #(DEFSTRUCT-SLOT-DESCRIPTION OUTPUT 2 PROCESS-OUTPUT
 NIL T NIL) #(DEFSTRUCT-SLOT-DESCRIPTION ERROR 3 PROCESS-ERROR NIL T NIL)) :SLOTS 
'(#(DEFSTRUCT-SLOT-DESCRIPTION JPROCESS 0 PROCESS-JPROCESS NIL T NIL) #(DEFSTRUCT-SLOT-DESCRIPTION
 INPUT 1 PROCESS-INPUT NIL T NIL) #(DEFSTRUCT-SLOT-DESCRIPTION OUTPUT 2 PROCESS-OUTPUT
 NIL T NIL) #(DEFSTRUCT-SLOT-DESCRIPTION ERROR 3 PROCESS-ERROR NIL T NIL)) :INHERITED-ACCESSORS 
'NIL :DOCUMENTATION 'NIL)
(PROCLAIM '(INLINE %MAKE-PROCESS))
(SETF (INLINE-EXPANSION '%MAKE-PROCESS) '(LAMBDA (JPROCESS) (BLOCK %MAKE-PROCESS 
(MAKE-STRUCTURE (TRULY-THE SYMBOL 'PROCESS) JPROCESS NIL NIL NIL))))
(FSET '%MAKE-PROCESS (GET-FASL-FUNCTION *FASL-LOADER* 1) 4444 '(JPROCESS) NIL)
(FSET 'PROCESS-P (GET-FASL-FUNCTION *FASL-LOADER* 2) 4444 '(OBJECT) NIL)
(PROCLAIM '(FTYPE (FUNCTION * T) PROCESS-JPROCESS))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 3))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 4))
(PUT 'PROCESS-JPROCESS 'SETF-FUNCTION (MAKE-STRUCTURE-WRITER 0 'PROCESS))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 6))
(PROCLAIM '(FTYPE (FUNCTION * T) PROCESS-INPUT))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 8))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 9))
(PUT 'PROCESS-INPUT 'SETF-FUNCTION (MAKE-STRUCTURE-WRITER 1 'PROCESS))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 11))
(PROCLAIM '(FTYPE (FUNCTION * T) PROCESS-OUTPUT))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 13))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 14))
(PUT 'PROCESS-OUTPUT 'SETF-FUNCTION (MAKE-STRUCTURE-WRITER 2 'PROCESS))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 16))
(PROCLAIM '(FTYPE (FUNCTION * T) PROCESS-ERROR))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 18))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 19))
(PUT 'PROCESS-ERROR 'SETF-FUNCTION (MAKE-STRUCTURE-WRITER 3 'PROCESS))
(FUNCALL (GET-FASL-FUNCTION *FASL-LOADER* 21))
(%SET-FDEFINITION 'COPY-PROCESS (FUNCTION COPY-STRUCTURE))
(FSET 'MAKE-PROCESS (GET-FASL-FUNCTION *FASL-LOADER* 23) 4562 '(PROC) NIL)
(FSET 'PROCESS-ALIVE-P (GET-FASL-FUNCTION *FASL-LOADER* 24) 4853 '(PROCESS) "Return t if process is still alive, nil otherwise.")
(FSET 'PROCESS-WAIT (GET-FASL-FUNCTION *FASL-LOADER* 25) 4991 '(PROCESS) "Wait for process to quit running for some reason.")
(FSET 'PROCESS-EXIT-CODE (GET-FASL-FUNCTION *FASL-LOADER* 26) 5122 '(INSTANCE) "The exit code of a process.")
(FSET 'PROCESS-KILL (GET-FASL-FUNCTION *FASL-LOADER* 27) 5243 '(PROCESS) "Kills the process.")
(FSET '%MAKE-PROCESS-BUILDER (GET-FASL-FUNCTION *FASL-LOADER* 28) 5343 '(PROGRAM 
ARGS) NIL)
(FSET '%PROCESS-BUILDER-ENVIRONMENT (GET-FASL-FUNCTION *FASL-LOADER* 29) 5733 '(PB) 
NIL)
(FSET '%PROCESS-BUILDER-ENV-PUT (GET-FASL-FUNCTION *FASL-LOADER* 30) 5808 '(ENV-MAP 
KEY VALUE) NIL)
(FSET '%PROCESS-BUILDER-ENV-CLEAR (GET-FASL-FUNCTION *FASL-LOADER* 31) 5901 '(ENV-MAP) 
NIL)
(FSET '%PROCESS-BUILDER-START (GET-FASL-FUNCTION *FASL-LOADER* 32) 5978 '(PB) NIL)
(FSET '%MAKE-PROCESS-INPUT-STREAM (GET-FASL-FUNCTION *FASL-LOADER* 33) 6041 '(PROC) 
NIL)
(FSET '%MAKE-PROCESS-OUTPUT-STREAM (GET-FASL-FUNCTION *FASL-LOADER* 34) 6228 '(PROC) 
NIL)
(FSET '%MAKE-PROCESS-ERROR-STREAM (GET-FASL-FUNCTION *FASL-LOADER* 35) 6415 '(PROC) 
NIL)
(FSET '%PROCESS-ALIVE-P (GET-FASL-FUNCTION *FASL-LOADER* 36) 6587 '(JPROCESS) NIL)
(FSET '%PROCESS-WAIT (GET-FASL-FUNCTION *FASL-LOADER* 38) 6682 '(JPROCESS) NIL)
(FSET '%PROCESS-EXIT-CODE (GET-FASL-FUNCTION *FASL-LOADER* 39) 6750 '(JPROCESS) NIL)
(FSET '%PROCESS-KILL (GET-FASL-FUNCTION *FASL-LOADER* 41) 6841 '(JPROCESS) NIL)
